<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[数据结构03-排序基础]]></title>
    <url>%2F2018%2F11%2F29%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%8403-%E6%8E%92%E5%BA%8F%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[数据结构03-排序基础本章主要讲了几种基本的排序方法，分别为直接插入排序，希尔排序和基数排序，快排和归并排序由于用到了递归的思想，所以放在了后面递归章节来说。 排序的概念与分类含有多个数据项的数据元素称为记录。用作记录唯一标识的数据项称为关键字域，其值为关键字。若关键字唯一标识一个记录，则称为主关键字，否则为次关键字，记录类型定义如下： 12345typedef int KeyType;typedef struct &#123; KeyType key; ...&#125; RecordType, RcdType; 排序就是将无序的记录按关键字调整为有序记录序列的一种操作。一般排序都是对存储记录的顺序表排序。顺序表的0号单元留作它用。记录顺序表类型定义如下： 12345typedef struct &#123; RcdType *rcd; int length; int size;&#125; RcdSqList; 直接插入排序直接插入排序的思想是：每次将无序区的第一个记录按关键字插入到有序区的合适位置，并将有序区长度加1。 具体代码如下： 123456789101112void InsertSort(RcdSqList &amp;L) &#123; int i, j; for (i = 1; i &lt; L.length; i++) &#123; if (L.rcd[i+1].key &lt; L.rcd[i].key) &#123; // 需将L.rcd[i+1]插入到有序序列 L.rcd[0] = L.rcd[i+1]; // 把记录L.rcd[i+1]保存在空闲的0号单元 j = i+1; // j为要后移的记录后移之前的位置 do &#123; j--; L.rcd[j+1] = L.rcd[j] // 记录后移 &#125; while (L.rcd[0].key &lt; L.rcd[j-1].key) // 判断是否需要继续移动 L.rcd[j] = L.rcd[0]; &#125; &#125;&#125; 代码分析这里的插排的做法是：无序区的第一个记录是i+1号记录，把它放到0号位置（即哨兵），然后依次比较0号记录与有序区记录的大小，对有序区中比0号位置记录要大的元素依次后移（第i个位置的记录为有序区的最大记录，若比无序区第一个记录i+1对应的值要大，就把它的值直接放到i+1的位置，然后依次后移），并用 j 记录要后移的记录后移之前的位置，最后把0号位置的记录放到j号位置即可。 插入排序最好情况下比较次数n-1次，移动记录次数为0。最坏情况下，需要比较(n+2)(n-1)/2次，移动记录(n+4)(n-1)/2次，事件复杂度为O(n^2)，空间复杂度为O(1)。 希尔排序希尔排序的思想是：把整个待排记录序列(R1,R2,R3,…,Rn)按增量d划分为d个子序列，其中第i(1&lt;=i&lt;=d)个子序列为(Ri,R(i+d),R(i+2d),…,R(i+kd)，并分别对各子序列进行直接插入排序，不断减小增量d，直到d减小到1，对整个序列进行一次直接插入排序。 插入排序每次只对相邻记录进行比较，记录最多只移动一个位置，希尔排序每次对相隔较远距离的记录进行比较，使得记录移动时能跨过多个记录，实现宏观上的调整。 具体实现如下： 1234567891011121314151617void ShellInsert(RcdSqList &amp;L, int dk) &#123; // 对顺序表L进行一次希尔排序，增量为dk int i, j; for (i = 1; i &lt;= L.length-dk; ++i) if (L.rcd[i+dk].key &lt; L.rcd[i].dk) &#123; // 需将L.rcd[i+dk]插入有序序列 L.rcd[0] = L.rcd[i+dk]; j = i + dk; do &#123;j -= dkl L.rcd[j+dk] = L.rcd[j]; &#125; while (j - dk &gt; 0 &amp;&amp; L.rcd[0].key &lt; L.rcd[j-dk].key); L.rcd[j] = L.rcd[0]; &#125;&#125;void ShellSort(RcdSqList &amp;L, int d[], int t) &#123; // 按增量序列d[0..t-1]对顺序表L作希尔排序 int k; for (k = 0; k &lt; t; k++) ShellInsert(L, d[k]);&#125; 代码分析代码解释这里希尔排序的做法是：给定一个增量序列（该序列应该是递减的，并且最后的一个值是1），依次取值作为增量dk，把记录按增量dk划分为dk个序列，依次对每个序列进行插入排序 时间复杂度希尔排序的时间复杂度是所取增量序列的函数。当增量序列为d[k]=2^(t-k+1)-1时（t为排序趟数，1&lt;=k&lt;=t&lt;=log2(n+1)），事件复杂度为O(n^1.5)。 稳定性若待排序列存在两个或以上关键字相等的记录，则排序结果不唯一。假设ki = kj（1&lt;=i&lt;=n,1&lt;=j&lt;=n,i≠j），且在排序前序列ki领先于kj，若在排序后序列ki仍领先于kj，则该排序方法稳定，反之不稳定。希尔排序是不稳定的排序方法。 基数排序前面2种排序都是基于关键字比较，而基数排序不需要比较关键字，它借鉴了多关键字排序的思想，把单一关键字看成是多个关键字复合而成。 一般情况下，多关键字排序的定义为，假设含有n个记录的序列为(r1,r2,…,rn)。每个记录ri中含有m个关键字(ki(0),ki(1),…,ki(m-1))，如果对序列中任意两个记录ri和rj(1&lt;=i&lt;=j&lt;=n)都满足下列有序关系:(ki(0),ki(1),…,ki(m-1))&lt;(kj(0),kj(1),…,kj(m-1))则称记录对这m个关键字有序。其中k0被称为最主位关键字，k(m-1)被称为最次位关键字。 实现多关键字排序有两种策略，MSD(高位优先排序)和LSD(低位优先排序)。 MSD的思路为先按最主位关键字k0进行排序，得到若干子序列，其中每个子序列中的记录都含有相同个k0值，之后分别对每个子序列按关键字k1进行排序，使得k1值相同的记录构成长度更短的子序列，依次重复直到对每个子序列按k(m-1)从小到大排序，最后所得序列就是排序结果 LSD的思路为先按最低位关键字进行排序，接着按依次低位关键字实施排序，最后按最主位关键字进行排序，与MSD不同，其排序过程不产生子序列，每次都是对整个序列排序。 基数排序基本思路：先将所有关键字统一为相同的位数，位数少的前面补0，然后从最低位开始依次进行排序，直到按最高位排序完成。 下面说的是以顺序存储的基数排序的LSD实现 基数排序定义的数据类型123456789101112typedef struct &#123; KeysType *keys; // 关键字 ... // 其他数据项&#125; KeysRcdType;typedef struct &#123; KeysRcdType *rcd; // 0号位置作为哨兵 int length; // 顺序表长度 int size; // 顺序表容量 int digitNum; // 关键字位数，即rcd.keys每个值的长度 int radix; // 关键字基数，即关键字取值范围的长度，十进制为10，字母为26&#125; KeysSqList; 实现基数排序，需要引入3个数组，其中，数组count用于统计关键字的r种取值，pos数组用于确定各子序列的起始位置，rcd1数组与rcd一样，各趟收集中，第一趟从数组rcd收集到数组rcd1，第二趟从rcd1收集到rcd，如此交替进行，若总趟数为奇数，最后要排序结果从rcd1复制回rcd。 基数排序的过程与关键步骤基数排序有3个关键步骤，分别为计数，计算位置和收集。如下 计数计数是统计第i个关键字中取值范围内每个数的个数 12for(j = 0; j &lt; L.radix; ++j) count[j] = 0;for(k = 1; k &lt;= n; k++) count[rcd[k].keys[i]]++; 计算位置计算位置是计算第i个关键字中取值范围内每个值应该存放(收集)的位置。 12pos[0] = 1;for(j = 1; j &lt; radix; j++) pos[j] = count[j-1] + pos[j-1]; 收集收集是把依次把k(k=1直到n)个记录存放到正确的位置。 1234for(k = 1; k &lt;= n; k++) &#123; j = rcd[k].keys[i]; rcd1[pos[j]++] = rcd[k];&#125; 完整的基数排序代码1234567891011121314151617181920212223242526272829303132333435Status RadixSort(KeysSqList &amp;L) &#123; KeysRcdType *rcd1; int i = 0, j; int *count, *pos; count = (int*)malloc(sizeof(int)*L.radix); pos = (int*)malloc(sizeof(int)*L.radix); rcd1 = (KeysRcdType*)malloc(sizeof(KeysRcdType)*(L.length+1)); if(NULL == count || NULL == pos || NULL == rcd1) return OVERFLOW; while(i &lt; L.digitNum) &#123; for(j = 0; j &lt; L.radix; ++j) count[j] = 0; if(0 == i%2) RadixPass(L.rcd, rcd1, L.length, i++, count, pos, L.radix); else RadixPass(rcd1, L.rcd, L.length, i++, count, pos, L.radix); &#125; if(1 == L.digitNum%2) for(j = 1; j &lt;= L.length; ++j) L.rcd[j] = rcd1[j]; free(count); free(pos); free(rcd1); return OK;&#125;void RadixPass(KeysRcdType rcd[], KeysRcdType rcd1[], int n, int i, int count[], int pos[], int radix) &#123; int k, j; for(k = 1; k &lt;= n; k++) count[rcd[k].keys[i]]++; // count键为关键字基数，值为该基数的个数 pos[0] = 1; // 第j个关键字的起始位置为第j-1个关键字的起始位置加上j-1个关键字的个数 for(j = 1; j &lt; radix; j++) pos[j] = count[j-1] + pos[j-1]; for(k = 1; k &lt;= n; k++) &#123; // 收集过程 // k为第k个记录，j为第k个记录的第i个关键字的值 j = rcd[k].keys[i]; // pos[j]的定义是：关键字j的起始位置，这里把位置k的记录放到位置pos[j]处 // 并令pos[j]++，使下一个关键字收集到正确的位置 rcd1[pos[j]++] = rcd[k]; &#125;&#125;]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>插入排序</tag>
        <tag>希尔排序</tag>
        <tag>基数排序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构02-线性数据结构]]></title>
    <url>%2F2018%2F11%2F22%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%8402-%E7%BA%BF%E6%80%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F</url>
    <content type="text"><![CDATA[数据结构02-线性数据结构栈栈是一种后入先出的数据结构 顺序栈顺序栈类型定义如下 123456typedef struct &#123; ElemType *elem; // 存储空间基址 int top; // 栈顶元素下一位标 int size; // 当前分配的存储容量 int increment; // 扩容时，增加的存储容量&#125; SqStack; 顺序栈常用操作如下 1234567Status InitStack_Sq(SqStack &amp;S, int size, int inc);Status DestroyStack_Sq(SqStack &amp;S);Status StackEmpty_Sq(SqStack S);void ClearStack_Sq(SqStack &amp;S);Status Push_Sq(SqStack &amp;S, ElemType e);Status Pop_Sq(SqStack &amp;S, ElemType &amp;e);Status GetTop_Sq(SqStack S, ElemType &amp;e); 顺序栈的部分操作初始化123456789Status InitStack_Sq(SqStack &amp;S, int size, int inc)&#123; S = (ElemType*)malloc(size*sizeof(ElemType)); if(S == NULL) return OVERFLOW; S.top = 0; S.size = size; S.increment = inc; return OK;&#125; 入栈123456789101112Status Push_Sq(SqStack &amp;S, ElemType e)&#123; ElemType* newbase; if(S.top &gt;= S.size) &#123; newbase = (ElemType*)realloc(S.elem, (S.size+S.increment)*sizeof(ElemType)); if(NULL == newbase) return OVERFLOW; S.elem = newbase; S.size += S.increment; &#125; S.elem[S.top++] = e; return OK;&#125; 出栈123456789101112Status Pop_Sq(SqStack &amp;S, ElemType e) &#123; if(S.top &gt; 0) &#123; e = S.elem[--S.top]; return OK; &#125; else &#123; return ERROR; &#125;&#125; 判空12345Status StackEmpty_Sq(SqStack S)&#123; if(S.top == 0) return TRUE; return FALSE;&#125; 取栈顶元素123456789101112Status GetTop(SqStack S, ElemType &amp;e)&#123; if (S.top &gt; 0) &#123; e = S.elem(S.top - 1); return OK; &#125; else &#123; return ERROR; &#125;&#125; 顺序栈的部分习题123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119/**********【题目】若顺序栈的类型重新定义如下。试编写算法，构建初始容量和扩容增量分别为size和inc的空顺序栈S。typedef struct &#123; ElemType *elem; // 存储空间的基址 ElemType *top; // 栈顶元素的下一个位置 int size; // 当前分配的存储容量 int increment; // 扩容时，增加的存储容量&#125; SqStack2;***********/Status InitStack_Sq2(SqStack2 &amp;S, int size, int inc)/* 构建初始容量和扩容增量分别为size和inc的空顺序栈S。*/ /* 若成功，则返回OK；否则返回ERROR。 */&#123; S.elem = (ElemType*)malloc(size * sizeof(ElemType)); if(NULL == S.elem) return OVERFLOW; if (size &lt;= 0 || inc &lt;= 0) return ERROR; S.top = S.elem+1; S.size = size; S.increment = inc; return OK;&#125;/**********【题目】若顺序栈的类型重新定义如下。试编写算法，实现顺序栈的判空操作。typedef struct &#123; ElemType *elem; // 存储空间的基址 ElemType *top; // 栈顶元素的下一个位置 int size; // 当前分配的存储容量 int increment; // 扩容时，增加的存储容量&#125; SqStack2;***********/Status StackEmpty_Sq2(SqStack2 S)/* 对顺序栈S判空。 */ /* 若S是空栈，则返回TRUE；否则返回FALSE */&#123; if (S.top == S.elem) return TRUE; return FALSE;&#125;/**********【题目】若顺序栈的类型重新定义如下。试编写算法，实现顺序栈的入栈操作。typedef struct &#123; ElemType *elem; // 存储空间的基址 ElemType *top; // 栈顶元素的下一个位置 int size; // 当前分配的存储容量 int increment; // 扩容时，增加的存储容量&#125; SqStack2;***********/Status Push_Sq2(SqStack2 &amp;S, ElemType e)/* 若顺序栈S是满的，则扩容，若失败则返回ERROR。*//* 将e压入S，返回OK。 */&#123; ElemType* newbase; if((S.top - S.elem) / sizeof(ElemType) &gt; S.size) &#123; newbase = (ElemType*)realloc(S.elem, (S.size+S.increment)*sizeof(ElemType)); if(NULL == newbase) return OVERFLOW; S.elem = newbase; S.size += S.increment; &#125; *S.top++ = e; return OK; &#125;/**********【题目】若顺序栈的类型重新定义如下。试编写算法，实现顺序栈的入栈操作。typedef struct &#123; ElemType *elem; // 存储空间的基址 ElemType *top; // 栈顶元素的下一个位置 int size; // 当前分配的存储容量 int increment; // 扩容时，增加的存储容量&#125; SqStack2;***********/Status Push_Sq2(SqStack2 &amp;S, ElemType e)/* 若顺序栈S是满的，则扩容，若失败则返回ERROR。*//* 将e压入S，返回OK。 */&#123; ElemType* newbase; if((S.top - S.elem) / sizeof(ElemType) &gt; S.size) &#123; newbase = (ElemType*)realloc(S.elem, (S.size+S.increment)*sizeof(ElemType)); if(NULL == newbase) return OVERFLOW; S.elem = newbase; S.size += S.increment; &#125; *S.top++ = e; return OK; &#125;/**********【题目】试写一算法，借助辅助栈，复制顺序栈S1得到S2。顺序栈的类型定义为：typedef struct &#123; ElemType *elem; // 存储空间的基址 int top; // 栈顶元素的下一个位置，简称栈顶位标 int size; // 当前分配的存储容量 int increment; // 扩容时，增加的存储容量&#125; SqStack; // 顺序栈可调用顺序栈接口中下列函数：Status InitStack_Sq(SqStack &amp;S, int size, int inc); // 初始化顺序栈SStatus DestroyStack_Sq(SqStack &amp;S); // 销毁顺序栈SStatus StackEmpty_Sq(SqStack S); // 栈S判空，若空则返回TRUE，否则FALSEStatus Push_Sq(SqStack &amp;S, ElemType e); // 将元素e压入栈SStatus Pop_Sq(SqStack &amp;S, ElemType &amp;e); // 栈S的栈顶元素出栈到e***********/Status CopyStack_Sq(SqStack S1, SqStack &amp;S2) /* 借助辅助栈，复制顺序栈S1得到S2。 */ /* 若复制成功，则返回TRUE；否则FALSE。 */&#123; InitStack_Sq(S2, S1.size, S1.increment); if(NULL == S2.elem) return FALSE; for(int i = 0; i &lt; S1.top; i++) &#123; Push_Sq(S2, S1.elem[i]); &#125; return TRUE;&#125; 链栈链栈类型定义如下： 1234typedef struct LSNode &#123; ElemType data; struct LSNode *next;&#125; LSNode, *LStack; 接口定义如下： 123456void InitStack_LS(LStack &amp;S);void DestroyStack_LS(LStack &amp;S);Status StackEmpty_LS(LStack S);Status Push_LS(LStack &amp;S, ElemType e);Status Pop_LS(LStack &amp;S, &amp;ElemType e);Status GetTop_LS(LStack S, ElemType &amp;e); 入栈操作123456789Status Push_LS(LStack &amp;S, ElemType e) &#123; LSNode *t; t = (LSNode*)malloc(sizeof(LSNode)); if (NULL == t) return OVERFLOW; t-&gt;data = e; t-&gt;next = S; S = t; return OK;&#125; 出栈操作12345678Status Pop_LS(LStack &amp;S, ElemType &amp;e) &#123; LSNode *t = S; if (NULL == S) return ERROR; e = S-&gt;data; S = S-&gt;next; free(t); return OK;&#125; 部分习题12345678910111213141516171819202122232425262728293031/**********【题目】试写一算法，实现链栈的判空操作。链栈的类型定义为：typedef struct LSNode &#123; ElemType data; // 数据域 struct LSNode *next; // 指针域&#125; LSNode, *LStack; // 结点和链栈类型***********/Status StackEmpty_L(LStack S)/* 对链栈S判空。若S是空栈，则返回TRUE；否则返回FALSE */&#123; if(S == NULL) return TRUE; return FALSE;&#125;/**********【题目】试写一算法，实现链栈的取栈顶元素操作。链栈的类型定义为：typedef struct LSNode &#123; ElemType data; // 数据域 struct LSNode *next; // 指针域&#125; LSNode, *LStack; // 结点和链栈类型***********/Status GetTop_L(LStack S, ElemType &amp;e) /* 取链栈S的栈顶元素到e，并返回OK; *//* 若S是空栈，则失败，返回ERROR。 */&#123; if(S == NULL) return ERROR; e = S-&gt;data; return OK;&#125; 队列循环队列定义如下 123456typedef struct &#123; ElemType *elem; int front; int rear; // 队尾位标，表示队尾元素的下一位置 int maxSize;&#125; SqQueue; 循环队列是把队列看成首尾相连的顺序队列。有如下基本操作接口 12345678Status InitQueue_Sq(SqQueue &amp;Q);Status DestroyQueue_Sq(SqQueue &amp;Q);void ClearQueue_Sq(SqQueue &amp;Q);Status QueueEmpty_Sq(SqQueue Q)int QueueLength_Sq(SqQueue Q);Status GetHead_Sq(SqQueue Q, ElemType &amp;e); Status EnQueue_Sq(SqQueue &amp;Q, ElemType e);Status DeQueue_Sq(SqQueue &amp;Q, ElemType &amp;e); 循环队列的实现入队时，对队尾循环加一，如下 Q.rear = (Q.rear+1)%Q.maxSize; 出队时同样操作 对于队空队满的判断可以有如下判断方法 设一标志域标识队列的空或满 设一长度域记录队列中元素的个数 少用一个元素空间，一旦Q.front==(Q.rear+1)%Q.maxSize则队满 循环队列部分操作初始化操作1234567Status InitQueue_Sq(SqQueue &amp;Q, int size) &#123; Q.elem = (ElemType*)malloc(size*sizeof(ElemType)) if (Q.elem == NULL) return OVERFLOW; Q.maxSize = size; Q.front = Q.rear = 0; return OK;&#125; 出队操作123456Status DeQueue_Sq(SqQueue &amp;Q, ElemType &amp;e) &#123; if (Q.front == Q.rear) return ERROR; e = Q.elem[Q.front]; Q.front = (Q.front + 1) % Q.maxSize; return OK;&#125; 入队操作123456Status EnQueue_Sq(SqQueue &amp;Q, ElemType e) &#123; if (Q.front == (Q.rear + 1) % Q.maxSize) return ERROR; Q.elem[Q.rear] = e; Q.rear = (Q.rear + 1) % Q.maxSize; return OK;&#125; 循环队列的部分习题123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151/**********【题目】试写一算法，求循环队列的长度。循环队列的类型定义为：typedef struct &#123; ElemType *base; // 存储空间的基址 int front; // 队头位标 int rear; // 队尾位标，指示队尾元素的下一位置 int maxSize; // 最大长度&#125; SqQueue;***********/int QueueLength_Sq(SqQueue Q)/* 返回队列Q中元素个数，即队列的长度。 */ &#123; if(Q.front &lt;= Q.rear) return Q.rear - Q.front; else return Q.maxSize + Q.rear - Q.front;&#125;/**********【题目】如果希望循环队列中的元素都能得到利用，则可设置一个标志域tag，并以tag值为0或1来区分尾指针和头指针值相同时的队列状态是"空"还是"满"。试编写与此结构相应的入队列和出队列的算法。本题的循环队列CTagQueue的类型定义如下：typedef struct &#123; ElemType elem[MAXQSIZE]; int tag; int front; int rear;&#125; CTagQueue;**********/Status EnCQueue(CTagQueue &amp;Q, ElemType x)/* 将元素x加入队列Q，并返回OK；*//* 若失败，则返回ERROR。 */&#123; if(Q.front == Q.rear &amp;&amp; Q.tag == 1) return ERROR; Q.elem[Q.rear] = x; Q.rear = (Q.rear+1)%MAXQSIZE; if(Q.rear == Q.front) Q.tag = 1; return OK; &#125;Status DeCQueue(CTagQueue &amp;Q, ElemType &amp;x)/* 将队列Q的队头元素退队到x，并返回OK；*//* 若失败，则返回ERROR。 */&#123; if(Q.front == Q.rear &amp;&amp; Q.tag == 0) return ERROR; x = Q.elem[Q.front]; Q.front=(Q.front+1)%MAXQSIZE; if(Q.front == Q.rear) Q.tag = 0; return OK;&#125;/**********【题目】假设将循环队列定义为：以域变量rear和length分别指示循环队列中队尾元素的位置和内含元素的个数。试给出此循环队列的队满条件，并写出相应的入队列和出队列的算法（在出队列的算法中要返回队头元素）。本题的循环队列CLenQueue的类型定义如下：typedef struct &#123; ElemType elem[MAXQSIZE]; int length; int rear;&#125; CLenQueue;**********/Status EnCQueue(CLenQueue &amp;Q, ElemType x) /* 将元素x加入队列Q，并返回OK；*/ /* 若失败，则返回ERROR。 */&#123; if (Q.length == MAXQSIZE) return ERROR; Q.rear = (Q.rear+1)%MAXQSIZE; Q.elem[Q.rear] = x; Q.length++; return OK;&#125;Status DeCQueue(CLenQueue &amp;Q, ElemType &amp;x) /* 将队列Q的队头元素退队到x，并返回OK；*/ /* 若失败，则返回ERROR。 */&#123; if (Q.length == 0) return ERROR; x = Q.elem[(MAXQSIZE + Q.rear - Q.length + 1)%MAXQSIZE]; Q.length--; return OK;&#125;/**********【题目】已知k阶斐波那契序列的定义为: f0=0, f1=0, …, fk-2=0, fk-1=1; fn=fn-1+fn-2+…+fn-k, n=k,k+1,…试利用循环队列编写求k阶斐波那契序列中第n+1项fn的算法。本题的循环队列的类型定义如下：typedef struct &#123; ElemType *base; // 存储空间的基址 int front; // 队头位标 int rear; // 队尾位标，指示队尾元素的下一位置 int maxSize; // 最大长度&#125; SqQueue;**********/// 想着构造一个maxSize为n+1的循环队列来计算，但是没做出来。。。long Fib(int k, int n)/* 求k阶斐波那契序列的第n+1项fn */&#123; struct SqQueue q; q.front = 0; q.rear = 0; q.maxSize = n+1; q.base = (ElemType*)malloc((n+1)*sizeof(ElemType)); if(q.base == NULL) return OVERFLOW; int i, j, t; for(i = 0; i &lt; k - 1; i++) &#123; q.base[i] = 0; &#125; q.base[i++] = 1; for(t = i; t &lt; n+1; t++) &#123; for(j = t-1; j &gt;= t-k; j--) &#123; q.base[t] += q.base[j]; &#125; &#125; return q.base[n]; &#125;// 下面这种做法时间复杂度O(n2)，空间复杂度O(n)/* struct SqQueue q; q.front = 0; q.rear = 0; q.maxSize = n+1; q.base = (ElemType*)malloc((n+1)*sizeof(ElemType)); if(q.base == NULL) return OVERFLOW; int i, j, t; for(i = 0; i &lt; k - 1; i++) &#123; q.base[i] = 0; &#125; q.base[i++] = 1; for(t = i; t &lt; n+1; t++) &#123; for(j = t-1; j &gt;= t-k; j--) &#123; q.base[t] += q.base[j]; &#125; &#125; return q.base[n]; */ 链队列类型定义如下： 123456789typedef struct LQNode &#123; ElemType data; struct LQNode *next;&#125; LQNode, *QueuePtr;typedef struct &#123; QueuePtr front; QueuePtr rear;&#125; LQueue; 接口如下 1234567void InitQueue_LQ(LQueue &amp;Q);void DestroyQueue_LQ(LQueue &amp;Q);Status QueueEmpty_LQ(LQueue Q);int QueueLength_LQ(LQueue Q);Status GetHead_LQ(LQueue Q, ElemType &amp;e);Status EnQueue_LQ(LQueue &amp;Q, ElemType e);Status DeQueue_LQ(LQueue &amp;Q, ElemType &amp;e); 入队操作1234567891011Status EnQueue_LQ(LQueue &amp;Q, ElemType e) &#123; LQNode *p; p = (LQNode*)malloc(sizeof(LQNode)); if (NULL == p) return OVERFLOW; p-&gt;data = e; p-&gt;next = NULL; if (NULL == Q.front) Q.front = p; else Q.rear-&gt;next = p; Q.rear = p; return OK;&#125; 出队操作12345678910Status DeQuquq_LQ(LQueue &amp;Q, ElemType &amp;e) &#123; LQNode *p; if (NULL == Q.front) return ERROR; p = Q.front; e = p-&gt;data; Q.front = p-&gt;next; if (Q.rear == p) Q.rear = NULL; free(p); return OK;&#125; 部分习题1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586/**********【题目】试写一算法，实现链队列的判空操作。链队列的类型定义为：typedef struct LQNode &#123; ElemType data; struct LQNode *next; &#125; LQNode, *QueuePtr; // 结点和结点指针类型typedef struct &#123; QueuePtr front; // 队头指针 QueuePtr rear; // 队尾指针&#125; LQueue; // 链队列类型***********/Status QueueEmpty_LQ(LQueue Q)/* 判定链队列Q是否为空队列。 *//* 若Q是空队列，则返回TRUE，否则FALSE。*/&#123; if(Q.front == NULL &amp;&amp; Q.rear == NULL) return TRUE; return FALSE;&#125;/**********【题目】试写一算法，实现链队列的求队列长度操作。链队列的类型定义为：typedef struct LQNode &#123; ElemType data; struct LQNode *next; &#125; LQNode, *QueuePtr; // 结点和结点指针类型typedef struct &#123; QueuePtr front; // 队头指针 QueuePtr rear; // 队尾指针&#125; LQueue; // 链队列类型***********/int QueueLength_LQ(LQueue Q)/* 求链队列Q的长度并返回其值 */&#123; int length=0; LQNode *pt; pt=Q.front; while(pt != Q.rear-&gt;next)&#123; length++; pt=pt-&gt;next; &#125; free(pt); return length;&#125;/**********【题目】假设以带头结点的循环链表表示队列，并且只设一个指针指向队尾元素结点(注意不设头指针)，试编写相应的队列初始化、入队列和出队列的算法。带头结点循环链队列CLQueue的类型定义为：typedef struct LQNode &#123; ElemType data; struct LQNode *next;&#125; LQNode, *CLQueue;**********/Status InitCLQueue(CLQueue &amp;rear) // 初始化空队列&#123; if(NULL==(rear=(LQNode*)malloc(sizeof(LQNode)))) return OVERFLOW; rear-&gt;next = rear; return OK;&#125;Status EnCLQueue(CLQueue &amp;rear, ElemType x) // 入队&#123; LQNode* oldRear = rear; LQNode* head=rear-&gt;next; if(NULL==(rear=(LQNode*)malloc(sizeof(LQNode)))) return OVERFLOW; rear-&gt;next = head; rear-&gt;data = x; oldRear-&gt;next = rear; return OK;&#125;Status DeCLQueue(CLQueue &amp;rear, ElemType &amp;x) // 出队&#123; if(rear-&gt;next == rear) return ERROR; LQNode* head = rear-&gt;next; LQNode* headNext = head-&gt;next; x = headNext-&gt;data; head-&gt;next = headNext-&gt;next; free(headNext); return OK;&#125; 线性表顺序表采用顺序存储结构表示的线性表为顺序表。存储位置相邻表示位序相继的两个元素之间的前驱和后继关系。因顺序表的结构，在表中插入或删除元素不方便，所以只考虑表尾插入和删除元素，这样的顺序表也可称为栈表，类型定义如下。 123456typedef struct &#123; ElemType *elem; int length; int size; int increment;&#125; SqList; 基本接口如下 1234567891011Status InitList_Sq(SqList &amp;L, int size, int inc);Status DestroyList_Sq(SqList &amp;L);Status ClearList_Sq(SqList &amp;L);Status ListEmpty_Sq(SqList L);int ListLength_Sq(SqList L);Status GetElem_Sq(SqList L, int i, ElemType &amp;e);int Search_Sq(SqList L, ElemType e); // 顺序表中查找元素e，返回e出现第一个的位置，否则返回-1Status ListTraverse_Sq(SqList L, Status (*visit)(ElemType e)); // 遍历顺序表L，依次对每个元素调用visit()Status PutElem_Sq(SqList &amp;L, int i, ElemType e);Status Append_Sq(SqList &amp;L, ElemType e);Status DeleteLast_Sq(SqList &amp;L, ElemType &amp;e); 删除表尾元素12345Status DeleteLast_Sq(SqList &amp;L, ElemType &amp;e) &#123; if (L.length == 0) return ERROR; e = L.elem[--L.length]; return OK;&#125; 顺序查找123456int Search_Sq(SqList L, ElemType e) &#123; int i = 0; while(i&lt;L.length &amp;&amp; L.elem[i] != e) i++; if(i &lt; L.length) return i; else return -1;&#125; 有序顺序表的归并123456789101112131415161718192021222324252627void MergeList_Sq(SqList La, SqList Lb, SqList &amp;Lc) &#123; // 已知有序顺序表La和Lb中的数据元素按值非递减排序 // 归并La和Lb得到新的有序顺序表Lc，Lc的数据元素也按值非递减排列 int i = 0, j = 0, size, increment = 10; ElemType ai, bj; size = La.length + Lb.length; InitList_Sq(Lc, size, increment); while (i &lt; La.length &amp;&amp; j &lt; Lb.length) &#123; GetElem_Sq(La, i, ai); GetElem_Sq(Lb, j, bj); if (ai &lt;= bj) &#123; Append_Sq(Lc, ai); i++; &#125; else &#123; Append_Sq(Lc, bj); j++; &#125; &#125; while (i &lt; La.length) &#123; GetElem_Sq(La, i++, ai); Append_Sq(Lc, ai); &#125; while (j &lt; Lb.length) &#123; GetElem_Sq(Lb, j++, bj); Append_Sq(Lc, bj); &#125;&#125; 部分习题123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126/**********【题目】设A=(a1,…,am)和B=(b1,…,bn)均为有序顺序表，A'和B'分别为A和B中除去最大共同前缀后的子表（例如，A=(x,y,y,z,x,z)，B=(x,y,y,z,y,x,x,z)，则两者中最大的共同前缀为(x,y,y,z)， 在两表中除去最大共同前缀后的子表分别为A'=(x,z)和B'=(y,x,x,z)）。若A'=B'=空表，则A=B；若A'=空表，而B'≠ 空表，或者两者均不为空表，且A'的首元小于B'的首元，则A&lt;B；否则A&gt;B。试写一个比较A和B大小的算法。（注意：在算法中，不要破坏原表A和B，也不一定先求得A'和B'才进行比较）。顺序表类型定义如下：typedef struct &#123; ElemType *elem; int length; int size; int increment;&#125; SqList;**********/char Compare(SqList A, SqList B)/* 比较顺序表A和B, *//* 返回'&lt;', 若A&lt;B; *//* '=', 若A=B; *//* '&gt;', 若A&gt;B */&#123; int min = (A.length&lt;=B.length)?A.length:B.length; int i; for(i = 0; i &lt; min; i++) &#123; if(A.elem[i] == B.elem[i]) continue; else if(A.elem[i] &lt; B.elem[i]) return '&lt;'; else if(A.elem[i] &gt; B.elem[i]) return '&gt;'; &#125; if(i == A.length &amp;&amp; i == B.length) return '='; else if(i == A.length) return '&lt;'; else return '&gt;';&#125;/**********【题目】试写一算法，实现顺序表的就地逆置，即利用原表的存储空间将线性表(a1,a2,…,an)逆置为(an,an-1,…,a1)。顺序表类型定义如下：typedef struct &#123; ElemType *elem; int length; int size; int increment;&#125; SqList;**********/void Inverse(SqList &amp;L)&#123; ElemType temp; for(int i = 0; i &lt; L.length/2; i++) &#123; temp = L.elem[i]; L.elem[i] = L.elem[L.length-i-1]; L.elem[L.length-i-1] = temp; &#125;&#125;/**********【题目】试对一元稀疏多项式Pn(x)采用存储量同多项式项数m成正比的顺序存储结构，编写求Pn(x0)的算法（x0为给定值）。一元稀疏多项式的顺序存储结构:typedef struct &#123; int coef; // 系数 int exp; // 指数&#125; Term;typedef struct &#123; Term *elem; // 存储空间基址 int length; // 长度（项数）&#125; Poly;**********/float Evaluate(Poly P, float x)/* P.elem[i].coef 存放ai， *//* P.elem[i].exp存放ei (i=1,2,...,m) *//* 本算法计算并返回多项式的值。不判别溢出。 *//* 入口时要求0≤e1&lt;e2&lt;...&lt;em，算法内不对此再作验证 */&#123; float temp = 1.0; float result = 0; int exexp = 0; int j; for(int i = 0;i &lt; P.length; i++) &#123; for(j = exexp; j &lt; P.elem[i].exp; j++) temp *= x; result += temp * P.elem[i].coef; exexp = P.elem[i].exp; &#125; return result;&#125;/**********【题目】假设有两个集合A和B分别用两个线性表LA和LB表示(即：线性表中的数据元素即为集合中的成员），试写一算法，求并集A＝A∪B。顺序表类型定义如下typedef struct &#123; ElemType *elem; // 存储空间的基址 int length; // 当前长度 int size; // 存储容量 int increment; // 空间不够增加空间大小&#125; SqList; // 顺序表可调用顺序表的以下接口函数： Status InitList_Sq(SqList &amp;L, int size, int inc); // 初始化顺序表Lint ListLength_Sq(SqList L); // 返回顺序表L中元素个数Status GetElem_Sq(SqList L, int i, ElemType &amp;e); // 用e返回顺序表L中第i个元素的值int Search_Sq(SqList L, ElemType e); // 在顺序表L顺序查找元素e，成功时返回该元素在表中第一次出现的位置，否则返回-1Status Append_Sq(SqList &amp;L, ElemType e); // 在顺序表L表尾添加元素e**********/void Union(SqList &amp;La, SqList Lb)&#123; ElemType data; for(int i = 1; i &lt;= ListLength_Sq(Lb); i++) &#123; GetElem_Sq(Lb, i, data); if(Search_Sq(La, data) == -1) Append_Sq(La, data); &#125;&#125; 单链表链表和单链栈的结构体定义是一样的，它们的区别是性质和操作，链栈是一个栈，它的操作接口有入栈，出栈，取栈顶元素等，而链表是一个表，是有结构的数据的集合，它的操作有插入，删除，遍历等。 1234typedef struct LNode &#123; ElemType data; struct LNode *next;&#125; LNode, *LinkList; 基本操作接口如下： 1234567891011Status InitList_L(LinkList &amp;L);Status DestroyList_L(LinkList &amp;L);Status ClearList_L(LinkList &amp;L);Status ListEmpty_L(LinkList L);init ListLength_L(LinkList L);LNode* Search_L(LinkList L, ElemType e);LNode* NextElem_L(LNode *p); // 返回p结点的直接后继LNode* MakeNode_L(ElemType e); // 构造元素e的结点，返回指向该结点指针Status InsertAfter_L(LNode *p, LNode *q); // 结点p后插入结点qStatus DeleteAfter_L(LNode *p, ElemType &amp;e); // 删除p结点的直接后继结点，用e返回结点值void ListTraverse_L(LinkList L, Status (*visit)(ElemType e)); // 遍历单链表L 单链表初始化123456Status InitList_L(LinkList &amp;L) &#123; if(NULL==(LNode*)malloc(sizeof(LNode))) return OVERFLOW; L-&gt;next = NULL; return OK;&#125; 查找元素操作12345678LNode* Search_L(LinkList L, ElemType e) &#123; LNode *p; if (NULL == L) return ERROR; p = L-&gt;next; // 带头结点 while(p-&gt;data != e &amp;&amp; p != NULL) p = p-&gt;next; return p;&#125; 求直接后继操作1234LNode* NextElem_L(LNode *p) &#123; if (p == NULL) return NULL; return p-&gt;next;&#125; 构造结点操作123456789LNode *MakeNode_L(ElemType e) &#123; LNode *p; p = (LNode*)malloc(sizeof(LNode)); if (NULL != p) &#123; p-&gt;next = NULL; p-&gt;data = e; &#125; return p;&#125; 插入直接后继结点操作123456Status InsertAfter_L(LNode *p, LNode *q) &#123; if (NULL == p || NULL == q) return ERROR; q-&gt;next = p-&gt;next; p-&gt;next = q; return OK;&#125; 删除直接后继结点操作123456789Status DeleteAfter_L(LNode *p, ElemType &amp;e) &#123; LNode *q; if (p == NULL || p-&gt;next == NULL) return ERROR; q = p-&gt;next; p-&gt;next = q-&gt;next; e = q-&gt;data; free(q); return OK;&#125; 单链表的逆置1234567891011void InverseList(LinkList L) &#123; LNode *q, *p; if(NULL == L-&gt;next || NULL == L-&gt;next-&gt;next) return; p = L-&gt;next; L-&gt;next = NULL; while(p != NULL) &#123; q = p-&gt;next; InsertAfter_L(L, p); p = q; &#125;&#125; 部分习题123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319/**********【题目】试写一算法，实现带头结点单链表的判空操作。单链表的类型定义为：typedef struct LNode &#123; ElemType data; struct LNode *next; &#125; LNode, *LinkList; // 结点和结点指针类型***********/Status ListEmpty_L(LinkList L)/* 判定带头结点单链表L是否为空链表。 *//* 若L是空链表，则返回TRUE，否则FALSE。*/&#123; if(L-&gt;next == NULL) return TRUE; // 带头结点，头结点保存了一些信息 return FALSE;&#125;/**********【题目】试写一算法，实现带头结点单链表的销毁操作。单链表的类型定义为：typedef struct LNode &#123; ElemType data; struct LNode *next; &#125; LNode, *LinkList; // 结点和结点指针类型***********/Status DestroyList_L(LinkList &amp;L)/* 销毁带头结点单链表L，并返回OK。*/&#123; LNode* n = L; while((n=n-&gt;next) != NULL) free(n); free(L); return OK;&#125;/**********【题目】试写一算法，实现带头结点单链表的清空操作。单链表的类型定义为：typedef struct LNode &#123; ElemType data; struct LNode *next; &#125; LNode, *LinkList; // 结点和结点指针类型***********/Status ClearList_L(LinkList &amp;L)/* 将带头结点单链表L置为空表，并返回OK。*//* 若L不是带头结点单链表，则返回ERROR。 */&#123; if(L == NULL) return ERROR; LNode* n = L; while((n=n-&gt;next)!=NULL) free(n); L-&gt;next = NULL; // 释放完内存后，L-&gt;next仍然指向之前分配的，尽管那片空间已经被释放 return OK; &#125;/**********【题目】试写一算法，实现带头结点单链表的求表长度操作。单链表的类型定义为：typedef struct LNode &#123; ElemType data; struct LNode *next; &#125; LNode, *LinkList; // 结点和结点指针类型***********/int ListLength_L(LinkList L)/* 求带头结点单链表L的长度，并返回长度值。*//* 若L不是带头结点单链表，则返回-1。 */&#123; if(L == NULL) return -1; int length = 0; LNode* p = L; while((p=p-&gt;next)!=NULL) length++; return length; &#125;/**********【题目】试写一算法，在带头结点单链表L插入第i元素e。带头结点单链表的类型定义为：typedef struct LNode &#123; ElemType data; struct LNode *next;&#125; LNode, *LinkList;**********/Status Insert_L(LinkList L, int i, ElemType e)/* 在带头结点单链表L插入第i元素e，并返回OK。*//* 若参数不合理，则返回ERROR。 */&#123; // i为第i个位置 // 不能插入到0号位置头结点处 int c; LNode *p=L, *q; if(i&lt;=0) return ERROR; if(L==NULL) return ERROR; if((q=(LNode*)malloc(sizeof(LNode)))==NULL) return OVERFLOW; for(c=1,p=L; c&lt;i; c++) &#123; p = p-&gt;next; if(p == NULL) return ERROR; &#125; q-&gt;data = e; q-&gt;next = p-&gt;next; p-&gt;next = q; return OK;&#125;/**********【题目】试写一算法，在带头结点单链表删除第i元素到e。带头结点单链表的类型定义为：typedef struct LNode &#123; ElemType data; struct LNode *next;&#125; LNode, *LinkList;**********/Status Delete_L(LinkList L, int i, ElemType &amp;e)/* 在带头结点单链表L删除第i元素到e，并返回OK。*//* 若参数不合理，则返回ERROR。 */&#123; // p是第i个结点的前一个结点，q是第i个结点 // 执行删除操作，要确保q结点不是NULL int c; LNode *p=L, *q; if(L==NULL || p-&gt;next == NULL) return ERROR; if(i &lt;= 0) return ERROR; for(c=1,p=L; c&lt;i; c++) &#123; p = p-&gt;next; if(p-&gt;next == NULL) return ERROR; &#125; q = p-&gt;next; e = q-&gt;data; p-&gt;next = q-&gt;next; p-&gt;next = q-&gt;next; free(q); return OK;&#125;/**********【题目】试写一算法，在带头结点单链表的第i元素起的所有元素从链表移除，并构成一个带头结点的新链表。带头结点单链表的类型定义为：typedef struct LNode &#123; ElemType data; struct LNode *next;&#125; LNode, *LinkList;**********/Status Split_L(LinkList L, LinkList &amp;Li, int i)/* 在带头结点单链表L的第i元素起的所有元素 *//* 移除，并构成带头结点链表Li，返回OK。 *//* 若参数不合理，则Li为NULL，返回ERROR。 */&#123; if(i &lt;= 0) &#123; Li = NULL; return ERROR; &#125; LNode* p = L; LNode *t1, *t2; Li = (LNode*)malloc(sizeof(LNode)); // 到最后的时候，t2为L的尾指针，t3为Li的尾指针 int c; for(c = 0; c &lt; i-1; c++) p = p-&gt;next; // 此时p为i-1个元素 t2 = p; p = p-&gt;next; // 此时p为Li的头指针 if(p == NULL) &#123; Li = NULL; return ERROR; &#125; Li-&gt;next = p; t2-&gt;next = NULL; return OK;&#125;/**********【题目】试写一算法，在带头结点单链表删除第i元素起的所有元素。带头结点单链表的类型定义为：typedef struct LNode &#123; ElemType data; struct LNode *next;&#125; LNode, *LinkList;**********/Status Cut_L(LinkList L, int i)/* 在带头结点单链表L删除第i元素起的所有元素，并返回OK。*//* 若参数不合理，则返回ERROR。 */&#123; if(i &lt;= 0) return ERROR; LNode* p = L; LNode* t1; // 用于释放内存 LNode* t2; // 用于保存第i-1个元素，删除后继节点后，使它的next为NULL int c; for(c = 0; c &lt; i-1; c++) p = p-&gt;next; // 此时p为i-1个元素 t2 = p; p = p-&gt;next; if(p == NULL) return ERROR; while(p) &#123; t1 = p; p = p-&gt;next; free(t1); &#125; t2-&gt;next = NULL; return OK; &#125;/**********【题目】试写一算法，删除带头结点单链表中所有值为x的元素，并释放被删结点空间。单链表类型定义如下：typedef struct LNode &#123; ElemType data; struct LNode *next;&#125; LNode, *LinkList;**********/Status DeleteX_L(LinkList L, ElemType x)/* 删除带头结点单链表L中所有值为x的元素， *//* 并释放被删结点空间，返回实际删除的元素个数。*/&#123; /*LNode* p = L; LNode* temp; int count=0; while(p-&gt;next != NULL) &#123; while(p-&gt;next-&gt;data == x) &#123; temp = p-&gt;next; p-&gt;next = p-&gt;next-&gt;next; free(temp); count++; &#125; p = p-&gt;next; &#125; return count; */ LNode *p1, *p2, *p3; int j = 0; p1=p2=L; if(NULL==p1) return j; while(p2!=NULL) &#123; p2=p1-&gt;next; if(p2-&gt;data == x &amp;&amp; p2 != NULL) &#123; p3 = p2; p2 = p3-&gt;next; p1-&gt;next = p2; free(p3); j++; &#125; else if(p2-&gt;data != x) &#123; p1 = p2; p2 = p1-&gt;next; &#125; &#125; return j;&#125;/**********【题目】试写一算法，删除带头结点单链表中所有值小于x的元素，并释放被删结点空间。单链表类型定义如下：typedef struct LNode &#123; ElemType data; struct LNode *next;&#125; LNode, *LinkList;**********/Status DeleteSome_L(LinkList L, ElemType x)/* 删除带头结点单链表L中所有值小于x的元素， *//* 并释放被删结点空间，返回实际删除的元素个数。*/&#123; LNode* p = L; LNode* temp; int count = 0; while(p-&gt;next != NULL) &#123; /* 下面的while如果不加p-&gt;next!=NULL就报错 * 到底为什么会这样我也不清楚，写blog的时候就用下面注释的代码吧 * 猜测是p-&gt;next = p-&gt;next-&gt;next; p = p-&gt;next; * 当p-&gt;next-&gt;next为NULL的时候，p=p-&gt;next就为NULL了，但此时p-&gt;next不为NULL */ while(p-&gt;next-&gt;data &lt; x &amp;&amp; p-&gt;next != NULL) &#123; temp = p-&gt;next; p-&gt;next = p-&gt;next-&gt;next; free(temp); count++; &#125; p = p-&gt;next; &#125; return count; /* LNode *p1, *p2, *p3; int j = 0; p1=p2=L; if(NULL==p1) return j; while(p2!=NULL) &#123; p2=p1-&gt;next; if(p2-&gt;data &lt; x &amp;&amp; p2 != NULL) &#123; p3 = p2; p2 = p3-&gt;next; p1-&gt;next = p2; free(p3); j++; &#125; else if(p2-&gt;data &gt;= x) &#123; p1 = p2; p2 = p1-&gt;next; &#125; &#125; return j;*/&#125; 双向链表双向链表可以访问结点的直接前驱，定义如下： 1234typedef struct DuLNode &#123; ElemType data; struct DuLNode *prior, *next;&#125; DuLNode, *DuLinkList; 操作接口如下： 12345678910111213Status InitList_DuL(DuLinkList &amp;L);Status DestroyList_DuL(DuLinkList &amp;L);Status ClearList_DuL(DuLinkList &amp;L);Status ListEmpty_DuL(DuLinkList L);int ListLength_DuL(DuLinkList L);DuLNode* Search_DuL(DuLinkList L, ElemType e);DuLNode* PriorElem_DuL(DuLNode *p); // 返回p结点的直接前驱结点指针DuLNode* NextElem_DuL(DuLNode *p);DuLNode* MakeNode_DuL(ElemType e);Status InsertBefore_DuL(DuLNode *p, DuLNode *q);Status InsertAfter_DuL(DuLNode *p, DuLNode *q);Status Delete_DuL(DuLNode *p, ElemType &amp;e);void ListTraverse_DuL(DuLinkList L, Status (*visit)(ElemType e)); 插入前驱结点操作123456789Status InsertBefore_DuL(DuLNode *p, DuLNode *q) &#123; if (NULL == p || NULL == q || NULL == p-&gt;prior) return ERROR; q-&gt;prior = p-&gt;prior; q-&gt;next = p; q-&gt;prior-&gt;next = q; p-&gt;prior = q; return OK;&#125; 删除结点操作12345678Status Delete_DuL(DuLNode *p, ElemType &amp;e) &#123; if (NULL == p || NULL == p-&gt;prior) return ERROR; if (p-&gt;next != NULL) p-&gt;next-&gt;prior = p-&gt;prior; p-&gt;prior-&gt;next = p-&gt;next; e = p-&gt;data; free(p); return OK;&#125; 循环链表单循环链表单循环链表特点是尾元结点指针域指向头结点，类型和接口定义与单链表相似。 1typedef LinkList CirLinkList; 双向循环链表双向链表中，若令尾元结点next指针域指向头结点，头结点prior指针域指向尾元结点，就构成双向循环链表。 1typedef DuLinkList DuCirLinkList;]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>栈</tag>
        <tag>队列</tag>
        <tag>链表</tag>
        <tag>顺序表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript08-DOM扩展]]></title>
    <url>%2F2018%2F11%2F09%2FJavaScript08-DOM%E6%89%A9%E5%B1%95%2F</url>
    <content type="text"><![CDATA[JavaScript08-DOM扩展对JavaScript的两个主要扩展主要是Selectors API和HTML5 选择符API根据CSS选择符选择与某个模式匹配的DOM元素。jQuery的核心就是通过CSS选择符查询DOM文档取得元素的引用，从而抛开了getElementById()和getElementsByTagName()，它有两个核心方法：querySelector()和querySelectorAll()，可以通过Document及Element类型的实例调用它们。 querySelector()方法它接收一个CSS选择符，返回与该模式匹配的第一个元素，如果没有就返回null。 1234567891011// 取得body元素var body = document.querySelector("body");// 取得ID为myDiv的元素var myDiv = document.querySelector("#myDiv");// 取得类为"selected"的第一个元素var selected = document.querySelector(".selected");// 取得类为"button"的第一个图像元素var img = document.body.querySelector("img.button"); querySelectorAll()方法querySelectorAll()方法接收的参数和上面一样，都是一个CSS选择符，但返回的是所有匹配的元素，是一个NodeList实例。 元素遍历Chrome Version 70.0.3538.77不支持 Element Travelsal API为DOM元素添加以下5个属性，用于预防元素间空格造成的childNodes和firstChild等属性不一致的差异。 childElementCount：返回子元素（不包括文本节点和注释）的个数 firstElementChild：指向第一个元素 lastElementChild：指向最后一个元素 previousElementSibling：指向前一个同辈元素 nextElementSibling：指向后一个同辈元素 HTML5与类相关的扩充getElementsByClassName()方法可以通过document对象以及所有HTML元素调用该方法，它接收一个参数，即一个包含一个或多个类名的字符串，返回带有指定类的所有元素的NodeList。 取得所有类中包含”username”和”current”的元素，类先后无所谓var allCurrentUsernames = document.getElementByClassName(&quot;username current&quot;); 取得ID为myDiv的元素中带有类名”selected”的所有元素var selected = document.getElementById(&quot;myDiv&quot;).getElementsByClassName(&quot;selected&quot;); classList属性操作类名的时候，可以使用classList属性，classList属性是DOMTokenList的实例，他有一个表示自己包含多少元素的length属性，要取得每个元素，可以使用item()方法，也可以使用方括号。如下： &lt;div class=&quot;bd user disabled&quot;&gt;&lt;/div&gt; classList属性有三个值分别是bd user和disabled。 这个属性还定义了下面方法 add(value)：将给定的字符串值添加到列表中。 contains(value)：表示列表中是否存在给定的值，存在返回true。 remove(value)：删除value toggle(value)：如果列表中存在给定值，就删除它，如果不存在，就添加它。 这样，就可以通过上述方法操控className了，如下 div.classList.remove(&quot;user&quot;); // 删除user类 焦点管理HTML5添加了辅助管理DOM焦点的功能。document.activeElement属性始终会引用DOM中当前获得焦点的元素。元素获得焦点方式有页面加载，用户输入和在代码中调用focus()方法 123456&lt;body&gt; &lt;button type="button" id="myButton"&gt;Click Me!&lt;/button&gt; &lt;p&gt;&lt;/p&gt; &lt;button type="button" onclick="focusMethod()"&gt;Click me to focus on the button!&lt;/button&gt; &lt;script type="text/javascript" src="./aha.js"&gt;&lt;/script&gt; &lt;/body&gt; 1234focusMethod = function getFocus() &#123; document.getElementById("myButton").focus(); alert(document.activeElement == document.getElementById("myButton")); &#125; 文档刚刚加载完，document.activeElement中保存的是document.body元素的引用。 document.hasFocus()用于确定文档是否获得了焦点。 HTMLDocument的变化HTML5扩展了HTMLDocument，增加了新功能。 readyState属性Document的readyState属性可能有两个值 loading：正在加载文档 complete：已经加载完文档 基本用法如下 123if(document.readyState == "complete") &#123; // 执行操作&#125; head属性作为对document.body引用文档&lt;body&gt;元素的补充，HTML5新增了document.head属性，引用文档的&lt;head&gt;元素。 var head = document.head || document.getElementsByTagName(&quot;head&quot;)[0]; 字符集属性charset属性表示文档中实际使用的字符集，也可以用来指定新字符集，可以通过&lt;meta&gt;元素，响应头部或直接设置charset属性修改这个值。 document.charset = &quot;UTF-8&quot;; 自定义数据属性HTML5可以为元素添加非标准的属性，但要添加前缀data-，目的是为元素提供与渲染无关的信息，或提供语义信息。可以通过元素dataset属性访问这些自定义属性的值。dataset是一个DOMStringMap的实例，键为非标准属性名减去data-前缀（比如自定义属性是data-myname，映射对应属性就是myname） &lt;div id=&quot;myDiv&quot; data-appid=&quot;12345&quot; data-myname=&quot;Nicholas&quot;&gt;&lt;/div&gt; 123456var div = document.getElementById("myDiv");var appId = div.dataset.appid;var myName = div.dataset.myname;alert(appId); 插入标记innerHTML属性在读模式下，innerHTML属性返回与调用元素的所有子节点（包括元素，注释和文本节点）对应的HTML标记。写模式下，innerHTML会根据指定的值创建新的DOM树，然后用这个DOM树完全替换调用元素原先的所有子节点。 写模式下，innerHTML的值会被解析为DOM子树，替换调用元素原来的所有子节点。因为它的值被认为是HTML，所以其中的所有标签都会按照浏览器处理HTML的标准方式转换为元素。设置了innerHTML之后，可以像访问文档中其他节点一样访问新创建的节点。 对下面代码的div块调用innerHTML，会返回其内部子元素（字符串形式） 12345678&lt;div id="content"&gt; &lt;p&gt;This is a &lt;strong&gt;paragraph&lt;/strong&gt; with a list following it.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Item 1&lt;/li&gt; &lt;li&gt;Item 2&lt;/li&gt; &lt;li&gt;Item 3&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; 下面元素不支持innerHTML属性：&lt;col&gt;,&lt;colgroup&gt;,&lt;frameset&gt;,&lt;head&gt;,&lt;html&gt;,&lt;style&gt;,&lt;table&gt;,&lt;tbody&gt;,&lt;thead&gt;,&lt;tfoot&gt;和&lt;tr&gt; outerHTML属性在读模式下，outerHTML返回调用它的元素及所有子节点的HTML标签。写模式下，outerHTML会根据指定的HTML字符串创建新的DOM子树，然后用这个DOM子树完全替换调用元素。 对上面代码div块调用outerHTML，会返回上面相同的代码，包括div本身。 div.outerHTML = &quot;&lt;p&gt;This is a paragraph.&lt;/p&gt;&quot;; 对上面代码的调用，等价于下面的代码 123var p = document.createElement("p");p.appendChild(document.createTextNode("This is a paragraph."));div.parentNode.replaceChild(p, div); insertAdjacentHTML()方法它接收两个参数，插入位置和要插入的HTML文本。第一个参数必须是下列值之一： beforebegin：当前元素之前插入一个紧邻的同辈元素 afterbegin：当前元素之下插入一个新的子元素或在第一个子元素之前再插入新的子元素 beforeend：当前元素之下插入一个新的子元素或再最后一个子元素之后再插入一个新的子元素 afterend：当前元素之后插入一个紧邻的同辈元素 内存与性能问题使用上面2个属性1个方法之前，最好先手工删除要被替换的元素的所有时间处理程序和JavaScript对象属性。 对上面2个属性，最佳做法是单独构建一个字符串，然后一次性把结果字符串赋值给innerHTML（或outerHTML），这样可以减少访问属性的开支。 scrollIntoView()方法可以在所有HTML元素上调用，通过滚动浏览器窗口或某个容器元素，调用元素就可以出现在视口中，传入true作为参数，或者不传入参数，则窗口滚动之后会让调用元素的顶部与视口顶部尽可能平齐。传入false，调用元素会尽可能出现在视口中（可能的话，调用元素底部会与视口底部平齐） Chrome不支持。。。 专有扩展children属性这个属性是HTMLCollection的实例，只包含元素中同样还是元素的子节点。children属性与childNodes没什么区别 contains()方法调用contains()方法的应该是祖先节点，这个方法接收一个参数，就是要检测的后代节点。如果被检测的节点是后代节点，就返回true。 插入文本innerText属性通过这个属性可以操作元素中包含的所有文本内容，包括子文档树中的文本。在通过innerText读取值时，它会按照由浅入深顺序将子文档中所有文本拼接起来。在通过innerText写值时，结果会删除元素的所有子节点。插入包含相应文本值的文本节点。 outerText属性作用范围扩大到了包含调用它的节点，写操作下会替换整个元素（包括子节点）。 滚动 scrollIntoViewIfNeeded(alignCenter)：只在当前元素在视口中不可见的情况下，才滚动浏览器窗口或容器元素，最终让它可见。如果参数为true，尽量让元素显示在视口中部。 scrollByLines(lineCount)：元素内容滚动指定的行高，可以正或负值。 scrollByPages(pageCount)：元素内容滚动指定的页面高度。]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>DOM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构01-前言]]></title>
    <url>%2F2018%2F11%2F06%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%8401-%E5%89%8D%E8%A8%80%2F</url>
    <content type="text"><![CDATA[数据结构01-前言一些预定义123456#define TRUE 1#define FALSE 0#define OK 1#define ERROR 0#define OVERFLOW -1typedef int Status; // 用作函数值类型，表示函数结果状态 ElemType代表数值的类型。一般是int，可以作下面定义typedef int ElemType; 时间复杂度T(n) = O(f(n)) 常见时间复杂度 类 符号 举例 常数 O(1) 返回数组第一个元素 对数 O(logn) 对有序数组折半查找 线性 O(n) 对数组顺序查找 nlogn O(nlogn) 归并排序 平方 O(n²) 选择排序 立方 O(n^3) 传统矩阵相乘 指数 O(2n) 汉诺塔 空间复杂度S(n) = O(f(n))]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaSCript07-DOM]]></title>
    <url>%2F2018%2F11%2F01%2FJavaScript07-DOM%2F</url>
    <content type="text"><![CDATA[JavaScript07-DOM节点层次DOM将任何HTML文档描绘成一个多层节点构成的结构。根节点为文档节点，文档节点下一般有一个子节点&lt;html&gt;元素，称为文档元素。 Node类型DOM定义了一个Node接口，由DOM中所有节点类型实现。每个节点都有一个nodeType属性，用于表明节点的类型，该属性有如下12个数值常量 Node.ELEMENT_NODE(1); Node.ATTRIBUTE_NODE(2); Node.TEXT_NODE(3); Node.CDATA_SECTION_NODE(4); Node.ENTITY_REFERENCE_NODE(5); Node.ENTITY_NODE(6); Node.PROCESSING_INSTRUCTION_NODE(7); Node.COMMENT_NODE(8); Node.DOCUMENT_NODE(9); Node.DOCUMENT_TYPE_NODE(10); Node.DOCUMENT_FRAGMENT_NODE(11); Node.NOTATION_NODE(12); nodeName和nodeValue属性要了解节点具体信息，可以使用这两个属性。 if (someNode.nodeType==1){ value = someNode.nodeName; } 对于元素节点，nodeName始终保存元素标签名，nodeValue始终为null 节点关系每个节点都有一个childNodes属性，其中保存着一个NodeList对象，它是一个类数组对象，用于保存一组有序的节点，也有length属性，但它是基于DOM结构动态执行查询的结果，因此DOM结构的变化能够自动反映在NodeList对象中。 可以通过下面方法访问保存在NodeList中的节点 123var firstChild = someNode.childNodes[0];var secondChild = someNode.childNodes.item(1);var count = somNode.childNodes.length; 每个节点都有一个parentNode属性，该属性指向文档树中的父节点。包含在childNodes列表中的所有节点都具有相同的父节点。此外，包含在childNodes列表中的每个节点相互之间都是同胞节点。使用列表中每个节点的previousSibling和nextSibling属性，可以访问同一列表的其他节点。父节点与其第一个和最后一个子节点之间也有关系，使用父节点的firstChild和lastChild属性分别指向childNodes列表的抵押给和最后一个节点。 所有节点都有最后一个属性是ownerDocument，该属性指向表示整个文档的文档节点。 操作节点appendChild()可以通过appendChild()方法向childNodes列表末尾添加一个节点，如下 1var returndNode = someNode.appendChild(newNode); 如果传入到appendChild()的节点已经是文档的一部分，那结果是将该节点从原来位置转移到新位置。DOM树可以看成是一系列指针连接起来的，但任何DOM节点不能同时出现在文档中的多个位置上。 insertBefore()可以使用insertBefore()方法把节点放在childNodes的某个特定位置上，接收两个参数，要插入的节点和作为参考的节点。插入节点后，被插入的节点会变成参考节点的前一个同胞节点，然后被该方法返回。 1returnedNode = someNode.insertBefore(newNode, null); // 插入到最后 replaceChild()它接收两个参数：要插入的节点和要替换的节点，然后把插入的节点返回。 removeChild()接收一个参数：要移除的节点。然后该节点被该方法返回。 其他方法#####cloneNode() cloneNode()接收一个布尔值参数，表示是否执行深复制。如果为true，则复制节点及其整个子节点树，如果为false，只复制节点本身。 Document类型Document类型表示文档，在浏览器中，document对象是HTMLDocument的一个实例，表示整个HTML页面。而且document类型是window对象的一个属性，有下列特征： nodeType为9； nodeName为”#document”； nodeValue为null； parentNode为null； ownerDucument为null; 文档的子节点有一个documentElement属性，始终指向HTML页面的&lt;html&gt;元素，另外还有一个childNodes列表访问文档元素。 document还提供了body，doctype属性访问对于的标签var body = document.body; 文档信息titledocument对象作为HTMLDocument的一个实例，还有一些其他属性表现网页的一些信息，其中一个是title属性 1234// 一个修改title的例子var originalTitle = document.title;document.title = "New page title"; URL,domain和referrerURL属性包含页面完整的URL，domain属性只包含域名，而referrer属性中则保存链接到当前页面的那个页面的URL，这些属性都保存在HTTP头部，JS提供了这些属性访问它们。 这三个属性中只有domain可以设置，但只能设置成URL包含的域，否则报错，这个属性可以用于跨页面通信，比如一个页面加载自www.wrox.com，包含一个内嵌框架加载自p2p.wrox.com。只需要把它们的document.domain都设置成wrox.com，就可以实现两者的通信。注意一旦设置为wrox.com后，就不能设置回p2p.wrox.com了 查找元素Document类型提供了两个方法查找元素，分别为getElementById()和getElementByTagName()。 getElementById()getElementById()接收一个参数：要取得的元素的ID，区分大小写,返回该元素。 &lt;div id=&quot;myDiv&quot;&gt;&lt;/div&gt;var div = document.getElementById(&quot;myDiv&quot;); getElementsByTagName()getElementByTagName()接收一个参数：要取得的元素的标签名，返回的是包含零个或多个元素的NodeList。在HTML文档中，这个方法返回一个HTMLCollection对象，作为一个动态集合。 var images = document.getElementsByTagName(&quot;img&quot;); 可以通过images.item(i).src取得第i个images对象的src属性 HTMLCollection对象还有一个方法nameItem()，可以通过元素的name特性取得集合中的项。 &lt;img src=&quot;xxx.gif&quot; name=&quot;myImage&quot;&gt;var myImage = images.namedItem(&quot;myImage&quot;);这与直接用方括号语法等效var myImage = images[&quot;myImage&quot;]; 要取得文档所有元素，可以传入参数”*” var allElements = document.getElementsByTagName(&quot;*&quot;); getElementsByName()这是只有HTMLDocument类型才有的方法，它返回带有给定name特性的所有元素。通常用于取得单选按钮，如下 1234567891011&lt;fieldset&gt; &lt;legend&gt;Which color do you prefer?&lt;/legend&gt; &lt;ul&gt; &lt;li&gt;&lt;input type="radio" value="red" name="color" id="colorRed"&gt; &lt;label for="colorRed"&gt;Red&lt;/label&gt;&lt;/li&gt; &lt;li&gt;&lt;input type="radio" value="green" name="color" id="colorGreen"&gt; &lt;label for="colorGreen"&gt;Green&lt;/label&gt;&lt;/li&gt; &lt;li&gt;&lt;input type="radio" value="blue" name="color" id="colorBlue"&gt; &lt;label for="colorBlue"&gt;Blue&lt;/label&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/fieldset&gt; 在这里，所有单选按钮的name属性都是”color”，但他们的ID可以不同，ID的作用是把&lt;label&gt;元素应用到每个单选按钮，而name特性则用以确保三个值中只有一个被发送到浏览器，这样就可以用下面代码取得所有单选按钮 var radios = document.getElementByName(&quot;color&quot;); 特殊集合document对象还有一些特殊的集合。这些集合都是HTMLCollection对象。 document.anchors,包含文档中所有带name特性的&lt;a&gt;元素 document.forms,包含所有&lt;form&gt;元素 documents.images,包含所有&lt;img&gt;元素 document.links,包含所有带href的&lt;a&gt;元素 文档写入document有四个方法可以写入:write(),writeln(),open()和close() 123&lt;script type="text/javascript"&gt; document.write((new Date()).toString()); &lt;/script&gt; Element类型Element类型提供了对元素标签名，子节点以及特性的访问。有如下特征： nodeType值为1 nodeName值为元素的标签名 nodeValue值为null parentNode可能是Document或Element 其子结点可能是Element,Text,Comment等等 要访问元素的标签名，可以使用nodeName属性也可以使用tagName属性。 HTML元素所有HTML元素都由HTMLElement类型及其子类型表示，HTMLElement类型直接继承Element并添加了一些属性 id:元素在文档中的唯一标识符 className:元素的class特性对应，即为元素指定的CSS类 这些属性都是可修改的，直接复制即可 取得特性操作特性有三个方法，分别为getAttribute(),setAttribute()和removeAttribute()。这三个方法可以针对任何特性使用。 getAttribute()也可以取得自定义特性（HTML5中，自定义特性应该加上data-前缀） 123var div = document.getElementById(&quot;myDiv&quot;);alert(div.getAttribute(&quot;class&quot;));alert(div.getAttribute(&quot;data-yourData&quot;); 通常更建议直接使用对象的属性，只有在取得自定义特性的情况下才使用getAttribute()方法 设置特性setAttribute()接收两个参数：要设置的特性名和值，如果特性已经存在，他就会替换现有的值，若不存在，就创建该属性并设置值。 attributes属性Element类型是使用attributes属性的唯一一个DOM节点类型。attributes属性中包含一个NamedNodeMap，与NodeList类似，也是一个动态集合。元素的每一个特性都由一个Attr节点表示，每个节点都保存在NamedNodeMap对象中。它有下列方法： getNamedItem(name):返回nodeName属性等于name的节点 removeNamedItem(name):从列表中移除nodeName属性等于name的节点 setNamedItem(node):向列表中添加节点，以节点的nodeName属性为索引 item(pos):返回数字pos位置的节点 attributes包含一系列节点，每个节点的nodeName是特性名，nodeValue为特性值 var id = element.attributes.getNamedItem(&quot;id&quot;).nodeValue; // 取得element节点特性id的值 等效于 var id = element.attributes[&quot;id&quot;].nodeValue; 创建元素使用document.createElement()方法可以创建新元素 var div = document.createElement(&quot;div&quot;); 创建的同时也指定了其ownerDocument属性。 新创建的元素还没加入文档树 document.body.appendChild(div); 可以把它加入到body元素中 元素的子节点childNodes属性包含了它的所有子节点，这些子节点可能是元素，文本节点，注释或处理指令，可以通过element.childNodes[i].nodeType == 1来作检测 Text类型文本节点可以是字面解释的纯文本内容，也可以是包含转义后的HTML字符，但不能包含HTML代码。 nodeType=3 nodeName=”#text” nodeValue为节点所包含的文本 parentNode是一个Element 不支持子节点 可以通过nodeValue属性或data属性访问节点中包含的文本。使用下列方法可以操作节点中的文本 appendData(text)：把text添加到节点末尾 deleteData(offset, count)：从offset指定的位置开始删除count个字符 insertData(offset, text)：在offset指定位置插入text replaceData(offset, count, text)：用text替换从offset指定的位置开始到offset+count位置的文本 splitText(offset)：从offset指定的位置将当前文本分开两个文本节点 substringData(offset, count)：提取从offset指定的位置开始到offset+count为止处的字符串 &lt;div&gt;Hello World!&lt;/div&gt; 上述文本子节点可以通过var textNode = div.firstChild访问 创建文本节点可以使用document.createTextNode()创建新文本节点，接收一个参数：要插入节点的文本。 一个创建新节点并插入创建文本的例子 1234567var element = document.createElement("div");element.className = "message";var textNode = document.createTextNode("Hello World!");element.appendChild(textNode);document.body.appendChild(element); 一般情况下每个元素只有一个文本子节点，但也可以同时有多个文本子节点，当他们是相邻的同胞节点，那么这两个节点就会连起来显示，中间不会有空格。 规范化文本节点DOM文档中存在相邻的同胞文本节点很容易导致混乱，因为分不清哪个文本节点表示哪个字符串。DOM文档中出现相邻文本节点的情况也不在少数，于是催生了一个能够将相邻文本节点合并的方法，为normalize()，它把所有文本节点合并成一个子节点，结果节点的nodeValue为合并前每个文本节点nodeValue拼接起来的值。 分割文本节点splitText()可以用于分割文本节点。 Comment类型注释在DOM中是通过Comment类型来表示的，有如下特征： nodeType值为8 nodeName值为”#comment” nodeValue值为注释的内容 parentNode可能是Document或Element 不支持子节点 Comment类型与Text类型继承自相同的基类，因此它拥有除splitText()之外的所有字符串操作方法，也可以通过nodeValue或data属性来取得注释的内容。 注释节点可以通过其父节点来访问 1234567&lt;div id="myDiv"&gt;&lt;!-- TODO: do what? --&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt; var div = document.getElementById("myDiv"); var comment = div.firstChild; alert(comment.data); &lt;/script&gt; 另外，使用createComment()方法也可以创建注释节点 CDATASection类型只针对基于XML的文档，表示的CDATA区域 DocumentType类型DocumentFragment类型Attr类型元素的特性在DOM中以Attr类型来表示，在所有浏览器中都可以访问Attr类型的构造函数和原型，有下列特征 nodeType=2 nodeName是特性的名称 nodeValue是特性的值 parentNode是null HTML中不支持子节点 要取得特性，通常用getAttribute(),setAttribute()和removeAttribute()方法，很少直接引用特性节点 Attr有三个属性，name，value和specified，其中specified是一个布尔值，用于区分特性是在代码中指定还是默认的。 可以使用document.createAttribute()方法并传入特性的名称来创建新的特性节点。 DOM操作技术动态脚本页面加载时不存在，但将来某一时刻通过修改DOM动态添加的脚本。 动态加载外部JS文件123456function loadScript(url) &#123; var script = document.createElement("script"); script.type = "text/javascript"; script.src = url; document.body.appendChild(script);&#125; 动态添加行内JS代码123456789101112function loadScriptString(code) &#123; var script = document.createElement("script"); script.type = "text/javascript"; try &#123; script.appendChild(document.createTextNode(code)); &#125; catch (ex) &#123; script.text = code; &#125; document.body.appendChild(script);&#125;loadScriptString("function sayHi()&#123; alert('hi'); &#125;"); 动态样式加载外部CSS 12345678function loadStyles(url) &#123; var link = document.createElement("link"); link.rel = "stylesheet"; link.type = "text/css"; link.href = url; var head = document.getElementsByTagName("head")[0]; head.appendChild(link);&#125; 操作表格对于一个表格 123456789101112&lt;table border="1" width="100%"&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;Cell 1,1&lt;/td&gt; &lt;td&gt;Cell 2,1&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Cell 1,2&lt;/td&gt; &lt;td&gt;Cell 2,2&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt; 要创建的节点太多了，所以DOM为&lt;table&gt;,&lt;tbody&gt;和&lt;tr&gt;元素添加了一些属性和方法 &lt;table&gt;的属性和方法如下： caption：保存对&lt;caption&gt;元素的指针 tBodies：是一个&lt;tbody&gt;元素的HTMLCollection tFoot：保存对&lt;tfoot&gt;元素的指针 tHead：保存对&lt;thead&gt;元素的指针 rows：一个表格中所有行的HTMLCollection createTHead()：创建&lt;thead&gt;元素，将其放到表格中，返回引用 createTFoot()：创建&lt;tfoot&gt;元素，同上 createCaption()：创建&lt;caption&gt;元素，同上 deleteCaption() deleteTHead() deleteCaption() deleteRow(pos)：删除指定位置的行 insertRow(pos)：向rows集合中指定位置插入一行 &lt;tbody&gt;元素的属性和方法如下： rows：保存&lt;tbody&gt;元素中行的HTMLCollection deleteRow(pos)：删除指定位置的行 insertRow(pos)：向rows集合中的指定位置插入一行，返回对新插入行的引用 &lt;tr&gt;元素添加的属性和方法如下： cells：保存&lt;tr&gt;元素中单元格的HTMLCollection deleteCell(pos)：删除指定位置的单元格 insertCell(pos)：向cells集合中指定位置插入一个单元格，返回对新插入单元格的引用 1234567891011121314151617181920var table = document.createElement("table");table.border = 1;table.width = "100%";var tbody = document.createElement("tbody");table.appendChild(tbody);tbody.insertRow(0);tbody.rows[0].insertCell(0);tbody.rows[0].cells[0].appendChild(document.createTextNode("Cell 1,1"));tbody.rows[0].insertCell(1);tbody.rows[0].cells[1].appendChild(document.createTextNode("Cell 2,1"));tbody.insertRow(1);tbody.rows[1].insertCell(0);tbody.rows[1].cells[0].appendChild(document.createTextNode("Cell 1,2"));tbody.rows[1].insertCell(1);tbody.rows[1].cells[1].appendChild(document.createTextNode("Cell 2,2"));document.body.appendChild(table);]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>DOM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaSCript05-函数表达式]]></title>
    <url>%2F2018%2F10%2F26%2FJavaScript05-%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[JavaScript函数表达式递归递归更好的建议是使用arguments.callee，这是一个指向正在执行的函数的指针 12345678function factorial(num) &#123; if (num &lt;= 1) &#123; return 1; &#125; else &#123; return num * arguments.callee(num-1); &#125;&#125; 通过arguments.callee代替函数名，可以确保无论怎么样调用函数都不会出问题。 闭包闭包是指有权访问另一个函数作用域中的变量的函数，创建闭包常见方法，就是在一个函数内部创建另一个函数 1234567891011121314function createComparisonFunction(propertyName) &#123; return function(object1, object2) &#123; var value1 = object1[propertyName]; var value2 = object2[propertyName]; if (value1 &lt; value2) &#123; return -1; &#125; else if (value1 &gt; value2) &#123; return 1; &#125; else &#123; return 0; &#125; &#125;&#125; 注意到在内部函数访问了外部函数中的变量propertyName，即使这个内部函数被返回了，而且在其他地方被调用了，它仍然可以访问变量propertyName。 在另一个函数内部定义的函数会将包含函数的活动对象添加到它的作用域链中，这样，匿名函数就可以访问其包含函数中定义的所有变量。即使包含函数被执行完毕后，其活动对象也不会被销毁，因为匿名函数的作用域链仍然在引用这个活动对象。换句话说，包含函数返回后，其执行环境的作用域链会被销毁，但它的活动对象仍然会留在内存中，直到匿名函数被销毁。 闭包与变量上述作用域链的机制引出了一个副作用，就是闭包只能取得包含函数中任何变量的最后一个值，闭包所保存的是整个变量对象，而不是某个特殊的变量。 12345678910function createFunctions() &#123; var result = new Array(); for(var i = 0; i &lt; 10; i++) &#123; result[i] = function() &#123; return i; &#125;; &#125; return result;&#125; 这里的结果是每个函数都返回10，因为每个匿名函数都引用了外部变量i，而i最后的值为10. 可以作如下调整 123456789101112function createFunctions() &#123; var result = new Array(); for(var i = 0; i &lt; 10; i++) &#123; result[i] = function(num) &#123; return function() &#123; return num; &#125;; &#125;(i); &#125; return result;&#125; 关于this对象闭包中使用this，需要注意匿名函数的执行环境具有全局性，因此其this对象通常指向window。 12345678910111213var name = "Thie Window";var object = &#123; name : "My Object", getNameFunc : function() &#123; return function() &#123; return this.name; &#125;; &#125;&#125;;alert(object.getNameFunc()()); // "The Window" 可以作如下修改 1234567891011121314var name = "Thie Window";var object = &#123; name : "My Object", getNameFunc : function() &#123; var that = this; return function() &#123; return that.name; &#125;; &#125;&#125;;alert(object.getNameFunc()()); // "My Object" 模仿块级作用域在JavaScript中没有块级作用域的概念。这意味着在块语句中定义的变量，实际上是在包含语句中而非语句中创建的。 123456function outputNumbers(count) &#123; for(var i = 0; i &lt; count; i++) &#123; alert(i); &#125; alert(i);&#125; 在这里，JS仍然可以访问i，而不同于Java，C++。 可以用匿名函数来模仿块级作用域，语法如下(function(){ //code here })();以上代码定义并立即调用了一个匿名函数 私有变量JavaScript中没有私有成员的概念，所有对象属性都是公有的。不过有一个私有变量的概念，任何在函数中定义的变量，都可以认为是私有变量。如果在函数内部创建一个闭包，那么闭包通过自己的作用域链可以访问这些变量，利用这一点就可以创建用于访问私有变量的公有方法，这种方法成为特权方法。 123456789101112131415function Person(name) &#123; this.getName = function() &#123; return name; &#125;; this.setName = function(value) &#123; name = value; &#125;;&#125;var person = new Person("Nicholas");alert(person.getName());person.setName("Greg");alert(person.getName()); 静态私有变量123456789101112131415161718192021(function() &#123; // 私有变量和私有函数 var name = ""; // 构造函数 Person = function(value) &#123; name = value; &#125; Person.prototype.getName = function() &#123; return name; &#125;; Person.prototype.setName = function(value) &#123; name = value; &#125;;&#125;)();var person1 = new Person("Nicholas");// 测试代码 注意name是静态变量，是所有实例共享的。 模块模式模块模式用于只有一个实例的对象，JS用对象字面量方式创建单例对象，如下 1234567891011121314151617181920var application = function() &#123; //私有 var components = new Array(); //初始化 components.push(new BaseComponent()); //公有 return &#123; getComponentCount : function() &#123; return components.length; &#125;; registerComponent : function(component) &#123; if (typeof component == "object") &#123; components.push(component); &#125; &#125; &#125;&#125; 增强的模块模式增强模块模式适合单例必须是某种类型的实例，同时还必须添加某些属性和方法对其加以增强的情况 12345678910111213141516171819202122var application = function() &#123; //私有 var components = new Array(); //初始化 components.push(new BaseComponent()); //创建application的一个局部副本 var app = new BaseComponent(); //公有 app.getComponentCount : function() &#123; return components.length; &#125;; app.registerComponent : function(component) &#123; if (typeof component == "object") &#123; components.push(component); &#125; &#125;; return app;&#125;]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>JS函数表达式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaSCript06-BOM]]></title>
    <url>%2F2018%2F10%2F26%2FJavaScript06-BOM%2F</url>
    <content type="text"><![CDATA[JavaScript06-BOMBOM是浏览器对象模型，它提供了很多用于访问浏览器的功能。 window对象window对象表示浏览器的一个实例，它既是通过JavaScript访问浏览器的一个接口，又是ECMAScript规定的Global对象。这意味着在网页中定义的任何一个对象，变量和函数，都以window作为其Global对象，因此有权访问parseInt等方法。 全局作用域所有在全局作用域中声明的变量，函数都会变成window对象的属性和方法，但注意，定义全局变量与在window对象直接定义还是有一点差别：全局变量不能通过delete操作符删除，而直接在window对象上定义的属性可以 123456var age = 29;window.color = "red";delete window.age; // return falsedelete window.color; // return true 可以通过window对象查询变量是否存在 123var newValue = oldValue; // error,oldValue not definedvar newValue = window.oldValue; // OK,newValue is undefined 窗口位置IE，Safari，Opera，Chrome提供了screenLeft，screenTop属性表示窗口相对于屏幕左边和上边的位置。Firefox提供了screenX和screenY属性。 123// 获取窗口左边和上边的位置var leftPos = (typeof window.screenLeft == "number")?window.screenLeft:window.screenX;var topPos = (typeof winodw.screenTop == "number")?window.screenTop:window.screenY; 可以使用moveTo()和moveBy()将窗口精确移动到某个位置moveTo()接收的是新位置的x和y坐标，而moveBy()接收的是在水平和锤石方向上移动的像素数 12345// 将窗口移动到屏幕左上角window.moveTo(0,0);// 将窗口向左移动50像素window.moveBy(-50,0); 需要注意这两个方法可能会被浏览器禁用 窗口大小IE9+,Firefox,Safari,Opera和Chrome提供4个属性：innerWidth,innerHeight,outerWidth,outerHeight。在Chrome中，outer和inner返回的是相同的值，都是viewport大小而非浏览器窗口大小。在Firefox中，outer返回的是浏览器窗口本身的尺寸，inner返回的是该容器中页面视图区的大小（减去边框宽度）。 下面方法可以获得viewport大小 123456789101112var pageWidth = window.innerWidth, pageHeight = window.innerHeight;if(typeof pageWidth != "number") &#123; if(document.compatMode == "CSS1Compat") &#123; pageWidth = document.documentElement.clientWidth; pageHeight = document.documentElement.clientHeight; &#125; else &#123; pageWidth = document.body.clientWidth; pageHeight = document.body.clientHeight; &#125;&#125; 可以使用resizeTo()和resizeBy()方法来调整浏览器窗口大小。 12345// 调整到100*100window.resizeTo(100,100); // 调整到200*150window.resizeBy(100,50); 同样的，部分浏览器可能禁用这两个方法 导航和打开窗口使用window.open()方法既可以导航到一个特定的URL，也可以打开一个新的浏览器窗口。这个方法接收4个参数：要加载的URL，窗口目标，一个特性字符串以及一个表示新页面是否取代浏览器历史纪录中当前加载页面的布尔值。如果传递第二个参数，而且该参数是已有窗口或框架的名称，那么就会在具有该名称的窗口或框架中加载第一个参数指定的URL。看下面例子 12// 等同于&lt;a href="http://www.wrox.com" target="topFrame"&gt;&lt;/a&gt;window.open("http://www.wrox.com", "topFrame"); 如果有topFrame的窗口，就会在该窗口加载URL，否则创建一个新窗口并命名为topFrame,第二个参数也可以是下列特殊名称:_self,_parent,_top或_blank。 弹出窗口若第二个参数并不是一个已经存在的窗口或框架，那么该方法就会根据在第三个参数位置上传入的参数创建一个新窗口或新标签页。第三个参数是一个逗号分隔的设置字符串，表示在新窗口中都显示哪些特性。 设置 值 说明 height num 窗口高度，不能小于100 left num 窗口左坐标，不能小于0 location yes or no 显示地址栏，不同浏览器默认值不同 menubar yes or no 默认no，显示菜单栏 resizable yes or no 是否可以通过拖动浏览器窗口边框改变其大小 scrollbars yes or no 内容在视口显示不下，是否运训滚动，默认no status yes or no 状态栏，默认no toolbar yes or no 工具栏，默认no top num 上坐标 width num 新窗口宽度 window.open(&quot;http://www.wrox.com/&quot;,&quot;wroxWindow&quot;,&quot;height=400,width=400,top=10,resizable=yes&quot;); 通过window.open()新创建的窗口可以使用resizeTo或moveTo等方法，并且其有一个属性opener保存着打开它的原始窗口对象chrome会在独立进程中运行每个标签页，当一个标签页打开另一个标签页时，如果两个window对象之间需要彼此通信，那么新标签页就不能运行在独立的进程中。在chrome中，把新创建的标签页的opener属性设置为null，即表示在单独的进程中运行新标签页，即告诉浏览器新创建的标签页不需要与打开它的标签页通信，因此可以在独立进程中运行。 弹出窗口屏蔽程序大多数浏览器都内置弹出窗口屏蔽程序，如下所示可以检测是否被屏蔽 1234567891011121314var blocked = false;try &#123; var wroxWin = window.open("http://www.wrox.com", "_blank"); if(wroxWin == null) &#123; blocked = true; &#125;&#125; catch (ex）&#123; blocked = true;&#125;if (blocked) &#123; alert("The popup was blocked!");&#125; 间歇调用和超时调用JS是单线程语言，但它允许通过设置超时值和间歇时间来调度代码在特定时刻执行。 超时调用超时调用需要使用window对象的setTimeout()方法，它接收两个参数，要运行的代码和毫秒表示的时间（执行代码之前需要等待的毫秒数），第一个参数可以是包含JS代码的字符串，也可以是一个函数（更推荐用函数） 123setTimeout(function() &#123; alert("Hello World!");&#125;, 1000); 注意上述代码经过1000ms不一定会执行，因为JS是一个单线程的解释器。调用setTimeout后，该方法会返回一个数值ID，表示超时调用。可以通过这个ID取消超时调用，如下 12345var itmeoutId = setTimeout(function() &#123; alert("Hello World!");&#125;, 1000);clearTimeout(timeoutId); 间歇调用按照指定的时间间隔重复执行代码，调用的方法是setInterval()，调用方法与上面setTimeout差不多，只不过第二个参数为每次执行之前要等待的毫秒数，同样可以通过clearInterval()方法传入间歇调用ID取消间歇调用尽量不要使用间歇调用，因为后一个间歇调用可能在前一个间歇调用停止之前启动下面是一个用超时调用实现间歇调用的例子，不会出现上述问题 123456789101112var num = 0;var max = 10;function incrementNumber() &#123; if (num &lt; max) &#123; setTimeout(incrementNumber, 500); &#125; else &#123; alert("Done"); &#125;&#125;setTimeout(incrementNumber, 500); 系统对话框浏览器通过alert(),confirm()和prompt()方法可以调用系统对话框，注意系统对话框都是同步和拟态的，即显示这些对话框的时候代码回停止执行，直到关掉对话框 alert()alert()显示的对话框包括文本和一个OK按钮 confirm()confirm()除了文本和OK按钮，还有一个取消按钮，可以通过检查confirm()方法返回的布尔值来确定用户点了哪个按钮 prompt()prompt()方法除了显示OK和Cancel按钮，还会显示一个文本输入框，接收两个参数，要显示给用户的文本提示和和文本输入域的默认值（可以为空字符串）。如果点击OK，该方法返回输入域的值，点击Cancel或其他，该方法返回null location对象location提供了与当前窗口加载的文档有关的信息，它既是window对象的属性，也是document对象的属性，location对象有如下属性 属性名 例子 说明 hash “#contents” 返回URL中的hash（#号后跟0个或多个字符） host “www.wrox.com:80&quot; 返回服务器名称和端口号 hostname “www.wrox.com&quot; 返回不带端口号的服务器名称 href “http:/www.wrox.com&quot; 完整URL，与location.toString()方法返回值一样 pathname “/WileyCDA/“ URL中目录和文件名 port “8080” 端口号 protocol “http:” 页面协议 search “?q=javascript” URL的查询字符串，以问号开头 查询字符串参数一个查询字符串参数的例子，注意字符串参数是被编码过的，需要通过decodeURIComponent解码 1234567891011121314151617181920function getQueryStringArgs() &#123; var qs = (location.search.length &gt; 0 ? location.search.substring(1) : "" ), args = &#123;&#125;, items = qs.length ? qs.split("&amp;") : [], item = null, name = null, value = null, i = 0, length = items.length; for (i = 0; i &lt; len; i++) &#123; item = items[i].split("="); name = decodeURIComponent(item[0]); value = decodeURIComponent(item[1]); if (name.length) &#123; args[name] = value; &#125; &#125; &#125; 位置操作可以通过修改上面的属性（直接赋值）来改变当前加载的页面，也可以通过location.assign(&quot;http://www.wrox.com&quot;)来改变，这样的改变会在浏览器的历史记录中生成一条新纪录，用户通过后退按钮都会导航到前一个页面，如果不想在历史记录中生成新纪录，则可以通过调用location.replace(&quot;http://www.wrox.com/&quot;)reload()方法会重新加载当前页面，如果不传递参数，页面会以最有效的方式重新加载，有可能是从缓存中加载，如果强制从服务器加载，则传入参数true即可 navigator对象navigator对象主要用来检测客户端浏览器，其主要属性和方法可以参考w3c的navigator对象 检测插件对于非IE浏览器，可以使用plugins数组来达到检测插件的目的，该数组每一项都有下列属性 name:插件的名字 description:插件的描述 filename:插件的文件名 length:插件所处理的MIME类型数量 123456789101112function hasPlugin(name) &#123; name = name.toLowerCase(); for (var i = 0; i &lt; navigator.length; i++) &#123; if (navigator.plugins[i].name.toLowerCase().indexOf(name) &gt; -1) &#123; return true; &#125; &#125;&#125;alert(hasPlugin("Flash"));alert(hasPlugin("QucikTime")); history对象history对象保存用户的上网记录，无法得知具体的URL，但是可以通过go()方法来实现用户历史记录的任意跳转，这个方法接收一个参数，表示向后或向前的页面书的一个整数，也可以传入字符串参数，浏览器会跳转到历史纪录中包含该字符串的第一个位置，可能前进也可能后退。 12345history.go(-1); // 后退一页history.go(1); // 前进一页history("wrox.com"); 另外还可以用history.back()和history.forward()方法前进或后退此外还有一个length属性表示历史纪录数量。]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>BOM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Servlet06-JSTL-强大的定制标记]]></title>
    <url>%2F2018%2F10%2F09%2FServlet06-JSTL%2F</url>
    <content type="text"><![CDATA[Servlet06-JSTL-强大的定制标记有时只是EL或标准动作还不够，需要用到JSTL，使用JSTL之前，要把jstl.jar与standard.jar放在WEB应用的lib目录里 &lt;c:out&gt;显示表达式&lt;c:out&gt;作用与脚本的&lt;%=%&gt;作用相似，但是&lt;c:out&gt;可以直接通过”.”操作符来访问属性。 语法格式如下&lt;c:out value=&quot;&lt;string&gt;&quot; default=&quot;&lt;string&gt;&quot; escapeXml=&quot;&lt;true|false&gt;&quot;/&gt; 属性 描述 value 要输出的内容，必要，可以设置为${class:function}输出函数的结果 default 输出的默认值，非必要 escapeXml 设置是否忽略XML特殊字符，默认为true，设置为false则输出HTML内容 &lt;c:forEach&gt;实现循环可以在JSP中使用&lt;c:forEach&gt;实现循环，例子如下 e.g. 1234567&lt;table&gt; &lt;c:forEach var="movie" items="$&#123;movieList&#125;" &gt; &lt;tr&gt; &lt;td&gt;$&#123;movie&#125;&lt;/td&gt; &lt;/tr&gt; &lt;/c:forEach&gt;&lt;/table&gt; 对应脚本如下 12345String[] items = (String[]) request.getAttribute("movieList");for (int i = 0; i &lt; items.length; i++) &#123; String movie = items[i]; out.println(movie);&#125; &lt;c:forEach&gt;属性如下 属性 描述 items 要被循环的信息 begin 开始的元素，0为索引起点 end 最后一个元素 step 迭代的步长 var 代表当前条目的变量名称 varStatus 代表循环状态的变量名称 varStatus建立一个新变量，保存javax.servlet.jsp.jstl.core.LoopTagStatus的一个实例，可以通过在&lt;c:forEach ... varStatus=&quot;movieLoopCount&quot;&gt;内嵌中添加${movieLoopCount.count}得到一个循环计数器，每迭代一次就自增1并输出 嵌套&lt;c:forEach&gt;12345&lt;c:forEach var="listElement" ...&gt; &lt;c:forEach ... items="$&#123;listElement&#125;"&gt; ... &lt;/c:forEach&gt;&lt;/c:forEach&gt; &lt;c:if&gt;实现判断语法格式 123&lt;c:if test="&lt;boolean&gt;" var="&lt;string&gt;" scope="&lt;string&gt;"&gt; ...&lt;/c:if&gt; 属性 描述 test 条件，必要 var 用于存储条件结果的变量，不必要 scope var属性的作用域 e.g. 123&lt;c:if test="$&#123;userType eq 'member'&#125;" &gt; &lt;jsp:include page="xxx.jsp" /&gt;&lt;/c:if&gt; &lt;c:choose&gt;实现if-else效果&lt;c:choose&gt;是&lt;c:when&gt;与&lt;c:otherwise&gt;的父标签，通过这三个标签可以实现if-else或者switch效果 语法格式 12345678910111213&lt;c:choose&gt; &lt;c:when test="&lt;boolean&gt;"&gt; ... &lt;/c:when&gt; &lt;c:when test="&lt;boolean&gt;"&gt; ... &lt;/c:when&gt; ... ... &lt;c:otherwise&gt; ... &lt;/c:otherwise&gt;&lt;/c:choose&gt; &lt;c:set&gt;设置变量和对象属性语法格式 123456&lt;c:set var="&lt;string&gt;" value="&lt;string&gt;" target="&lt;string&gt;" property="&lt;string&gt;" scope="&lt;string&gt;"/&gt; 属性 描述 value 要存储的值 target 要修改的属性所属的对象 property 要修改的属性 var 存储信息的变量 scope var属性的作用域 使用&lt;c:set&gt;设置属性变量var1.没有体&lt;c:set var=&quot;userLevel&quot; scope=&quot;session&quot; value=&quot;Cowboy&quot; /&gt; 2.有体&lt;c:set var=&quot;userLevel&quot; scope=&quot;session&quot; &gt;Sheriff, Bartender, Cowgirl&lt;/c:set&gt; 有体的情况下，会计算体并作为变量的值，如果值计算为null，变量会被删除 对bean和Map使用&lt;c:set&gt;这一类&lt;c:set&gt;只能用来设置bean属性和Map值，不能用它来向列表或数组增加元素 1.没有体&lt;c:set target=&quot;${PetMap}&quot; property=&quot;dogName&quot; value=&quot;Clover&quot;&gt; 如果target是一个bean，则property为属性，如果target是一个Map，则property为键。 2.有体&lt;c:set target=&quot;${person}&quot; property=&quot;name&quot; &gt;${foo.name}&lt;/c:set&gt; 体可以是一个String或表达式 &lt;c:set&gt;要点和技巧 &lt;c:set&gt;不能同时有var和target属性 scope是可选的，默认为page作用域 如果value为null，var指定的属性将被删除 target必须放入一个能解析为实际对象的表达式，不能为String &lt;c:remove&gt;删除元素语法格式&lt;c:remove var=&quot;&lt;string&gt;&quot; scope=&quot;&lt;string&gt;&quot; var为要删除的变量名，scope为变量的作用域var属性必须是一个String直接量，不能是表达式 1&lt;c:remove var="userState" scoper="request" /&gt; &lt;c:import&gt;包含内容语法格式 1234567&lt;c:import url="&lt;string&gt;" var="&lt;string&gt;" scope="&lt;string&gt;" varReader="&lt;string&gt;" context="&lt;string&gt;" charEncoding="&lt;string&gt;"/&gt; 属性 描述 url 待导入资源的URL，可以是相对路径或绝对路径 context 当使用相对路径访问外部context时，context指定了这个资源的名字 charEncoding 所引入的数据的字符编码集 var 用于存储所引入的文本的变量 scope var属性的作用域 varReader 可选的用于提供java.io.Reader对象的变量 三种包含内容方法的区别1.include指令&nbsp;&nbsp;&nbsp;&nbsp;&lt;%@ include file=&quot;Header.html&quot; %&gt;&nbsp;&nbsp;&nbsp;&nbsp;静态导入，在转换时将file指定的文件内容加入到当前页面 2.&lt;jsp:include&gt;标准动作&nbsp;&nbsp;&nbsp;&nbsp;动态，在请求时将page属性指定的内容添加到当前页面 3.&lt;c:import&gt;JSTL标记&nbsp;&nbsp;&nbsp;&nbsp;动态，与标准动作相似但更强大更灵活。 引用WEB应用之外的内容&lt;c:import&gt;可以加载WEB应用之外的内容，只需指定url即可，如下 123456&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&gt;&lt;html&gt;&lt;body&gt; &lt;c:import url="http://www.wickedlysmart.com/skyler/horse.html" /&gt;&lt;/body&gt;&lt;/html&gt; 注意！导入的horse.html应该是一个HTML片段，而不是一个有开始和结束标记的完整页面！ &lt;c:param&gt;定制包含的内容语法格式 &lt;c:param name=&quot;&lt;string&gt;&quot; value=&quot;&lt;string&gt;&quot;/&gt; name：URL中要设置的参数的名称 value：参数的值 使用&lt;c:param&gt;实现子标题上一节中我们使用&lt;jsp:param&gt;实现了页眉的子标题，&lt;c:param&gt;也能实现同样的效果 使用&lt;jsp:import&gt;的JSP 1234567&lt;html&gt;&lt;body&gt; &lt;c:import url="Header.jsp" &gt; &lt;c:param name="subTitle" value="this is a subtitle name"/&gt; &lt;/c:import&gt;&lt;/body&gt;&lt;/html&gt; 所包含的文件Header.jsp 12&lt;!-- some html --&gt;&lt;p&gt;$&#123;param.subTitle&#125;&lt;/p&gt; &lt;c:url&gt;满足所有超链接需求语法格式 12345&lt;c:url var="&lt;string&gt;" scope="&lt;string&gt;" value="&lt;string&gt;" context="&lt;string&gt;"/&gt; value是基本url，context是本地网络应用名，var是代表URL的变量名，scope是var的作用域。 对URL编码，可以把用户的jsessionid追加到特定的 URL最后，具体编码方法如下 在servlet中 123public void doGet(...) &#123; out.println(response.encodeURL("/BeerTest.do"));&#125; 在JSP中 1&lt;a href="&lt;c:url value='/xxx.jsp' /&gt;"&gt;click here&lt;/a&gt; GET请求需要在URL中传入参数，而参数有时有空格的时候需要对URL编码 e.g. 1234&lt;c:set var="last" value="Hidden Cursor" /&gt;&lt;c:set var="first" value="Crouching Pixels" /&gt;&lt;c:url value="/inputComments.jsp?first=$&#123;first&#125;&amp;last=$&#123;last&#125;" var="inputURL" /&gt; 在&lt;c:url&gt;中使用&lt;c:param&gt;可以解决编码的问题 1234567&lt;c:set var="last" value="Hidden Cursor" /&gt;&lt;c:set var="first" value="Crouching Pixels" /&gt;&lt;c:url value="/inputComments.jsp" var="inputURL" &gt; &lt;c:param name="firstName" value="$&#123;first&#125;" /&gt; &lt;c:param name="lastName" value="$&#123;last&#125;" /&gt;&lt;/c:url&gt; 使用参数编码后，URL如下所示/inputComments.jsp?firstName=Crouching+Pixels&amp;lastName=Hidden+Cursor 建立自己的错误页面指定错误页面errorPage.jsp 1234567&lt;%@ page isErrorPage="true" %&gt;&lt;html&gt;&lt;body&gt; ...&lt;/body&gt;&lt;/html&gt; 抛出异常坏页面的普通页面 1&lt;%@ page errorPage="errorPage.jsp" %&gt; 使用&lt;error-page&gt;DD标记可以在DD中为整个WEB应用声明错误页面，甚至可以为不同异常或HTTP错误码类型（404,500等）配置不同的错误页面。如下： 声明一个普遍型错误页面，在DD中 1234&lt;error-page&gt; &lt;exception-type&gt;java.lang.Throwable&lt;/exception-type&gt; &lt;location&gt;/errorPage.jsp&lt;/location&gt;&lt;/error-page&gt; 为更明确的异常声明一个错误页面 1234&lt;error-page&gt; &lt;exception-type&gt;java.lang.ArithmeticExcption&lt;/exception-type&gt; &lt;location&gt;/arithmeticError.jsp&lt;/location&gt;&lt;/error-page&gt; 根据一个HTTP状态码声明错误页面 1234&lt;error-page&gt; &lt;error-code&gt;404&lt;/error-code&gt; &lt;location&gt;/notFoundError.jsp&lt;/location&gt;&lt;/error-page&gt; exception对象错误页面提供一个exception对象，可以使用隐式对象exception也可以使用${pageContext.exception}得到，这个对象的类型是java.lang.Throwable注意，该隐式对象仅对有声明isErrorPage=&quot;true&quot;的页面可用 &lt;c:catch&gt;实现try/catch&lt;c:catch&gt;&lt;/c:catch&gt;体内元素相当于JAVA的try/catch，可以使用属性var保存该异常放在页面作用域，并按var值命名 1234567&lt;c:catch var="myException"&gt; &lt;% int x = 10/0; %&gt;&lt;/c:catch&gt;&lt;c:if test="$&#123;myException != null&#125;"&gt; exception is $&#123;myException.message&#125;&lt;/c:if&gt; 理解TLDTLD配置文件TLD描述了两个主要内容：定制标记和EL函数，上一章曾经用过只有一个&lt;function&gt;元素的TLD，这节还要用到&lt;tag&gt;元素，如下 123456789101112131415161718&lt;tlib-version&gt;1.2&lt;/tlib-version&gt;&lt;short-name&gt;RandomTags&lt;/short-name&gt;&lt;uri&gt;randomThings&lt;/uri&gt;&lt;tag&gt; &lt;description&gt;random advice&lt;/description&gt; &lt;name&gt;advice&lt;/name&gt; &lt;tag-class&gt;foo.AdvisorTagHandler&lt;/tag-class&gt; &lt;body-content&gt;empty&lt;/body-content&gt; &lt;attribute&gt; &lt;name&gt;user&lt;/name&gt; &lt;required&gt;true&lt;/required&gt; &lt;rtexprvalue&gt;true&lt;/rtexprvalue&gt; &lt;/attribute&gt;&lt;/tag&gt; 解释TLDTLD解释如下:&lt;tlib-version&gt;必要，声明标记库版本&lt;short-name&gt;必要，主要由工具使用&lt;uri&gt;taglib指令使用的唯一名&lt;description&gt;不解释&lt;name&gt;必要，标记中使用的就是这个名（冒号右边）&lt;tag-class&gt;必要，在JSP使用这个标记要调用什么&lt;body-content&gt;必要，说明体内不可以有任何内容&lt;attribute&gt;用来设置属性，rtexprvalue指定该属性是否可以是一个表达式，如果设置为false或者没有设置，则不能使用类似&quot;${userName}&quot;这样的表达式 如何使用定制标记使用这个标记的JSP如下 123&lt;%@ taglib prefix="mine" uri="randomThings" %&gt;&lt;mine:advice user="$&#123;userName&#125;" /&gt;&gt; 定制标记处理器1234567891011public class AdvisorTagHandler extends SimpleTagSupport &#123; public void doTag() throws JspException, IOException &#123; ... &#125; // 这里的XXX对应的是标记的属性 public void setXXX(String xxx) &#123; ...; &#125;&#125; 容器对TLD的查找容器会在4个地方查找TLD WEB-INF WEB-INF的子目录 WEB-INF/lib下一个JAR文件的META-INF WEB-INF/lib下一个JAR文件的META-INF目录的子目录]]></content>
      <categories>
        <category>Servlet</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
        <tag>JSP</tag>
        <tag>JSTL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaSCript04-面向对象的程序设计]]></title>
    <url>%2F2018%2F09%2F04%2FJavaScript04-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%2F</url>
    <content type="text"><![CDATA[JavaSCript04-面向对象的程序设计理解对象可以通过以下方式初始化一个对象 123456789var person = &#123; name: "Nicholas", age: 29, job: "Software Engineer", sayName: function() &#123; alert(this.name); &#125;&#125; 属性类型数据属性数据属性包含一个数据值的位置，在这个位置可以读取和写入值，数据属性有4个描述其行为的特性 Configurable: 表示能否通过delete删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性改为访问器属性，默认为true Enumerable: 表示能否通过for-in循环返回属性，默认为true Writable: 表示能否修改属性的值，默认为true Value: 包含这个属性的数据值，默认为undefined 可以通过Object.defineProperty()方法修改默认的特性，接收三个参数：属性所在的对象，属性名和一个描述符对象e.g. 12345678var person = &#123;&#125;;Object.defineProperty(person, "name", &#123; writable: false, value: "Nicholas"&#125;);alert(person.name); // "Nicholas"person.name = "Greg";alert(person.name); // "Nicholas" 在调用Object.defineProperty()方法修改同一个属性时，如果不指定，configurable、enumerable、writable特性的默认值都为false 访问器属性访问器属性不包含数据值，它们包含一对getter函数和setter函数，在读取访问器属性时会调用getter函数，这个函数负责返回有效的值，在写入访问器属性时调用setter函数，这个函数负责决定如何处理数据，访问器属性有如下4个特性 Configurable: 同上 Enumerable: 同上 Get: 在读取属性时调用的函数，默认为undefined Set: 在写入属性时调用的函数，默认为undefined 访问器属性不能直接定义，必须使用Object.defineProperty()来定义 e.g. 12345678910111213141516171819var book = &#123; _year: 2004, edition: 1&#125;;Object.defineProperty(book, "year" &#123; get: function() &#123; return this._year; &#125;, set: function(newValue) &#123; if (newValue &gt; 2004) &#123; this._year = newValue; this.edition += newValue - 2004; &#125; &#125;&#125;);book.year = 2005;alert(book.edition); // 2 若没有指定getter，则属性不能读，若没有指定setter，则属性不能写 定义多个属性ECMAScript5定义了一个Object.defineProperties()方法，可以通过描述符一次定义多个属性，这个方法接收2个对象参数，第一个对象是要添加和修改其属性的对象，第二个对象的属性与第一个对象中要添加或修改的属性一一对应 e.g. 123456789101112131415161718192021222324var book = &#123;&#125;;Object.defineProperties(book, &#123; _year: &#123; writable: true, value: 2004 &#125;, edition: &#123; writable: true, value: 1 &#125;, year: &#123; get: function() &#123; return this._year; &#125;, set: function() &#123; if (newValue &gt; 2004) &#123; this._year = newValue; this.edition += newValue - 2004; &#125; &#125; &#125;&#125;); 可以使用Object.getOwnPropertyDescriptor()来获取对象的特性值 123456789var descriptor = Object.getOwnPropertyDescriptor(book, "_year");alert(descriptor.value); // 2004alert(descriptor.configurable); // falsealert(typeof descriptor.get); // undefinedvar descriptor = Object.getOwnPropertyDescriptor(book, "year");alert(descriptor.value); // undefinedalert(descriptor.enumerable); // falsealert(typeof descriptor.get); // "function" 创建对象工厂模式工厂模式抽象了创建具体对象的过程e.g. 123456789101112function createPerson(name, age, job) &#123; var o = new Object(); o.name = name; o.age = age; o.job = job; o.sayName = function() &#123; alert(this.name); &#125; return o;&#125;var person1 = createPerson("Nicholas", 29, "Software Engineer"); 构造函数模式类似Object，Array都有原生的构造函数，此外还可以创建自定义构造函数，从而定义自定义对象类型的属性和方法e.g. 1234567891011function Person(name, age, job) &#123; this.name = name; this.age = age; this.job = job; o.sayName = function() &#123; alert(this.name); &#125;&#125;var person1 = new Person("Nicholas", 29, "Software Engineer");var person2 = new Person("Greg", 27, "Doctor"); 构造函数的问题使用构造函数模式的缺点就是每个方法都要在每个实例上重新创建一遍在前面例子中，person1和person2的sayName()方法不是同一个Function的实例。每个Person对象的实例都包含一个不同的Function实例alert(person1.sayName == person2.sayName); // false可以通过把函数定义转移到构造函数外部解决这个问题 1234567891011121314function Person(name, age, job) &#123; this.name = name; this.age = age; this.job = job; o.sayName = sayName; &#125;&#125;function sayName() &#123; alert(this.name);&#125;var person1 = new Person("Nicholas", 29, "Software Engineer");var person2 = new Person("Greg", 27, "Doctor"); 原型模式我们创建的每个函数都有一个prototype属性，这个属性是一个指针，指向一个对象，而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。按字面意思理解，prototype就是通过调用构造函数创建的那个对象实例的原型对象。使用原型对象好处是可以让所有对象实例共享它所包含的属性和方法。换句话说，不必在构造函数中定义对象实例的信息，而是可以将这些信息直接添加到原型对象中，如下例子 123456789101112131415function Person() &#123; &#125;Person.prototype.name = "Nicholas";Person.prototype.age = 29;Person.prototype.job = "Software Engineer";Person.prototype.sayName = function() &#123; alert(this.name);&#125;;var person1 = new Person();person1.sayName(); // "Nicholas"var person2 = new Person();alert(person1.sayName == person2.sayName); // true 与构造函数模式不同，新对象的这些属性和方法是由所有实例共享的。 虽然可以通过对象实例访问保存在原型中的值，但不能通过对象实例重写原型中的值，如果我们在实例中添加一个与原型中一个属性同名的属性，那我们就在实例中创建该属性，并屏蔽原型中的那个属性。通过delete可以重新获取来自原型的属性 1234var person1 = new Person();person1.name = "Greg";delete person1.name;alert(person1.name); // "Nicholas" 理解原型对象无论什么时候，只要创建了一个新函数，就会根据一组特定的规则为该函数创建一个prototype属性，这个属性指向函数的原型对象。默认情况下，所有原型对象都会自动获得一个constructor（构造函数）属性，这个属性是一个指向prototype属性所在函数的指针，关系如下图。 更简单的原型语法12345678910function Person() &#123; &#125;Person.prototype = &#123; name : "Nicholas", age : 29, job : "Software Engineer", sayName : function() &#123; alert(this.name); &#125;&#125;; 但是使用对象字面量重写prototype的问题是constructor属性不再指向Person了，可以通过Object.defineProperty()方法解决 1234Object.defineProperty(Person.prototype, "constructor", &#123; enumerable: false, value: Person&#125;); 原型的动态性尽管可以随时为原型添加属性和方法，并且修改能够立即在所有对象实例中反映出来，但如果是重写整个原型对象，那么情况就不一样了。把原型修改为另一个对象就等于切断了构造函数与最初原型之间的联系，看下面例子 1234567891011121314function Person() &#123; &#125;var friend = new Person();Person.prototype = &#123; constructor : Person, age : 29, job : "Software Engineer", sayName : function() &#123; alert(this.name); &#125;&#125;;friend.sayName(); // error!!! 下图揭示了上述代码整个过程的内幕 原型对象的问题原型对象最大的问题就是它共享的本性，对于包含引用类型值的属性来说，问题就比较突出了，见下面例子 1234567891011121314151617181920function Person() &#123; &#125;Person.prototype = &#123; constructor : Person, name : "Nicholas", age : 29, job : "Software Engineer", friends : ["Shelby", "Court"], sayName : function() &#123; alert(this.name); &#125;&#125;;var person1 = new Person();var person2 = new Person();person1.frineds.push("Van");alert(person2.friends); // "Shelby","Court","Van"alert(person1.friends == person2.friends) // true 组合使用构造函数模式和原型模式构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性。结果，每个实例都有自己的一份实例属性，同时又共享着对方法的引用，最大限度节省了内存。 123456789101112131415function Person(name ,age, job) &#123; this.name = name; this.job = hob; this.age = age; this.friends = ["Shelby", "Court"];&#125;Person.prototype = &#123; constructor : Person, sayName : function() &#123; alert(this.name); &#125;&#125;// 测试代码 动态原型模式它把所有信息都封装在构造函数中，而通过在构造函数中初始化原型，又保持了同时使用构造函数和原型的优点。 1234567891011function Person(name, age, job) &#123; this.name = name; this.age = age; this.job = job; if (typeof this.sayName != "function") &#123; Person.prototype.sayName = function() &#123; alert(this.name); &#125;; &#125;&#125; 判断语句if那里，只在sayName()不存在的情况下才将它添加到原型中。这段代码只会在初次调用构造函数时才会执行，其中，if语句检查的可以是初始化之后应该存在的任何属性和方法，不必用一大堆if语句检查每个属性和方法。 继承ECMAScript只支持实现继承，主要依靠原型链来实现的 原型链原型链的基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法。每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。假如我们让原型对象等于另一个类型的实例，此时的原型对象将包含一个指向另一个原型的指针，响应，另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立，如此层层递进，就构成了实例与原型的链条。这就是所谓的原型链的基本概念。 123456789101112131415161718192021function SuperType() &#123; this.property = true;&#125;SuperType.prototype.getSuperValue = function() &#123; return this.property;&#125;;function SubType() &#123; this.subproperty = false;&#125;// 继承SuperTypeSubType.prototype = new SuperType();SubType.prototype.getSubValue = function() &#123; return this.subproperty;&#125;;var instance = new SubType();alert(instance.getSuperType()); // true 别忘记默认的原型所有引用类型默认都继承了Object，这个继承也是通过原型链实现的，下图为完整的原型链 原型链要注意的事项 子类型有时候要覆盖超类型中的某个方法，或者需要添加超类型中不存在的某个方法，但不管怎么样，给原型添加方法的代码一定要放在替换原型的语句之后 通过原型链实现继承时，不能使用对象字面量创建原型方法，因为这样做会重写原型链 原型链的问题原型链主要的问题仍然是包含引用类型值的原型。通过原型来实现继承时，原型实际上会变成另一个类型的实例，于是，原先的实例属性也就变成现在的原型属性了。 1234567891011121314function SuperType() &#123; this.colors = ["red", "blue", "green"];&#125;function SubType() &#123; &#125;SubType.prototype = new SuperType();var instance1 = new SubType();instance1.colors.push("black");alert(instance1.colors); // "red","blue","green","black"var instance2 = new SubType();alert(instance2.colors); // "red","blue","green","black" 第二个问题是创建子类型的实例时，不能向超类型的构造函数传递参数。鉴于这两个问题，下面介绍的方法更加实用 借用构造函数在子类型的构造函数的内部调用超类型构造函数，如下 1234567function SuperType() &#123; this.colors = ["red", "blue", "green"];&#125;function SubType() &#123; SuperType.call(this);&#125; 传递参数12345678function SuperType(name) &#123; this.name = name;&#125;function SubType() &#123; SuperType.call(this, "Nicholas"); this.age = 29;&#125; 借用构造函数的问题 方法都在构造函数中定义，函数复用无从谈起 超类型的原型中定义的方法，对子类型而言不可见 组合继承（伪经典继承）把原型链和借用构造函数的技术组合到一起，使用原型链对原型属性和方法继承，借用构造函数对实例属性的继承。 123456789101112131415161718192021function SuperType(name) &#123; this.name = name; this.colors = ["red", "blue", "green"];&#125;SuperType.prototype.sayName = function() &#123; alert(this.name);&#125;function SubType(name, age) &#123; // 继承属性 SuperType.call(this.name); this.age = age;&#125;// 继承方法SubType.prototype = new SuperType();SubType.prototype.constructor = SubType;SubType.prototype.sayAge = function()&#123; alert(this.age);&#125;; 寄生组合式继承组合继承的问题就在于无论什么情况下，都会调用两次超类型构造函数，一次是在创建子类型原型的时候，另一次是在子类型构造函数内部，第一次调用的时候，SubType.prototype会得到两个属性：name和colors，当调用SubType构造函数的时候，又会调用一次SuperType构造函数，这一次又在新对象上创建了实例属性name和colors（与SubType原型一样的属性），于是这两个属性就屏蔽了原型中同名的两个属性。 所谓寄生组合式继承，就是通过借用构造函数来继承属性，通过原型链混成形式继承方法，其背后的基本思路是：不必为了指定子类型的原型而调用超类型的构造函数，我们所需要的无非就是超类型的原型的一个副本而已，这样，子类型的原型就不会有重复多余的超类型继承得来的属性了（因为超类型的原型没有这些属性）。 1234567891011121314151617181920212223242526272829303132function object(o) &#123; function F() &#123;&#125; F.prototype = o; return new F();&#125;function inheritPrototype(subType, superType) &#123; var prototype = object(superType.prototype); prototype.constructor = subType; subType.prototype = prototype;&#125;function SuperType(name) &#123; this.name = name; this.colors = ["red", "blue", "green"];&#125;SuperType.prototype.sayName = function() &#123; alert(this.name);&#125;function SubType(name, age) &#123; // 继承属性 SuperType.call(this.name); this.age = age;&#125;inheritPrototype(SubType, SuperType);SubType.prototype.sayAge = function() &#123; alert(this.age);&#125; 这种继承方法高效率体现在它只调用了一次SuperType构造函数，因此避免了在SubType.prototype上创建不必要的，多余的属性。]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>JS面向对象</tag>
        <tag>JS原型</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript03-引用类型]]></title>
    <url>%2F2018%2F09%2F03%2FJavaScript03-%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[JavaScript03-引用类型Object类型引用类型的值是引用类型的一个实例，注意引用类型虽然常被称为类，但它与传统面向对象语言的类不一样，ECMAScript没有类和接口等基本结构，ECMAScript的引用类型有时候也称为对象定义，因为它们描述的是一类对象所具有的属性和方法。 两种构造Object实例的方法构造函数123var person = new Object();person.name = "Nicholas";person.age = 29; 对面字面量表示法1234var person = &#123; name : "Nicholas", age : 29&#125;; 访问对象属性1234alert(person.name); // "Nicholas"alert(person["name"]); // "Nicholas"var propertyName = "name";alert(person[propertyName]); // "Nicholas" Array类型与其他语言不一样的是，ECMAScript数组的每一项可以保存任何类型的数据，而且ECMAScript的大小是可以动态调整的。 创建Array的基本方式Array构造函数1234var colors1 = new Array();var colors2 = new Array(20); // 指定Array的长度为20，注意，这里并不是让colors2的第一个元素是20，而是指定其长度20var colors3 = new Array("red", "blue", "green"); 字面量表示法12var colors = ["red", "blue", "green"];var names = []; Arrays.length由于ECMAScript的数组是可以动态调整的，因此其属性length不是只读的，可以为其赋值达到调整数组长度的效果，也可以12var colors = [ some colors ];colors[colors.length] = "other-color"; 为Array添加新元素 一些Array的属性检测数组Array.isArray(value)判断Array是否为数组 转换方法toLocaleString() 返回逗号分割开的字符串，但是调用的是toLocaleString()方法toString() 返回用逗号分割开的数组的每个元素valueOf() 返回数组本身join(param) 用param分割开数组的每个元素 栈方法push(param1,param2,...,paramn)可以接收任意数量参数，按顺序逐个入栈，并返回修改后数组的长度pop()出栈并返回 队列方法shift()删除第一个元素并返回push()同上栈方法的push()unshift(param)数组前端添加任意个项并返回数组的长度 重排序方法reverse()sort()默认的sort()会调用toString()然后比较其字符串的大小来排序，在很多情况下这样排序都不是最佳方案，如下123var values = [0, 1, 5, 10, 15];values.sort();alert(values); // 0,1,10,15,5 可以通过重排序方法接收一个比较函数作为参数来排序比较函数接收两个参数，如果第一个参数应位于第二个参数之前则返回一个负数，相等返回0,否则返回正数，以下为一个简单的比较函数123456789101112function compare(value1, value2) &#123; if(value1 &lt; value2) &#123; return -1; &#125; else if (value1 &gt; value2) &#123; return 1; &#125; else &#123; return 0; &#125;&#125;var values = [0, 1, 5, 10, 15];values.sort(compare);alert(values); // 0,1,5,10,15 对于数值类型或者valueOf()方法会返回数值的类型，只要123function compare(value1, value2) &#123; return value2-value1;&#125; 操作方法cancat()会创建当前数组的一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组，如果没有参数，则只是复制当前数组并返回副本slice()切片，接收1个或2个参数，即要返回项的起始和结束位置。 splice()： 删除：接收2个参数，删除的第一项的位置和要删除的项数 插入：三个参数，起始位置，0（要删除的项数），要插入的项，如果要插入多项，可以传递3个以上的参数 替换：三个参数，起始位置，要删除的项，要插入的任意数量的项 它始终返回一个数组，包含从原始数组中删除的项。 位置方法indexOf()lastIndexOf()接收2个参数，要查找的项和表示查找起点位置的索引，indexOf()从起点开始往后查找，lastIndexOf()从起点开始往前查找，返回要查找的项在数组中的位置，没找到则返回-1注意位置方法必须严格相等12345var person = &#123; name : "Nicholas" &#125;;var errPeople = [&#123; name : "Nicholas" &#125;];var corPeoole = [person];alert(errPeople.indexOf(person)); // -1alert(corPeople.indexOf(person)); // 0 迭代方法ECMAScript的迭代方法接收2个参数，要在每一项上运行的函数和（可选）运行该函数的作用域对象，传入的函数接收三个参数，数组项的值，该项在数组的位置和数组对象本身。every()对数组的每一项运行给定函数，如果该函数对每一项都返回true，则返回truefilter()对数组的每一项运行给定函数，返回该函数会返回true的项组成的数组forEach()对数组每一项运行给定函数，这个方法没有返回值map()对数组每一项运行给定函数，返回每次函数调用的结果组成的数组some()对数组每一项运行给定函数，如果该函数对任一项返回true，则返回true123456789var numbers = [1,2,3,4,5,4,3,2,1];var everyResult = numbers.every(function(item,index,array)&#123;return (item&gt;2)&#125;);alert(everyResule); // falsevar mapResult = numbers.map(function(item, index, array)&#123;return item * 2;&#125;);alert(mapResult); // [2,4,6,8,10,8,6,4,2]numbers.forEach(function(item, index, array)&#123; /* do something on item */ &#125;); 归并方法reduce()reduceRight()迭代数组的所有项，然后构建一个最终返回的值，reduce()从第一项开始迭代，reduceRight()从最后一项开始，接收两个参数，一个在每一项上调用的函数和（可选）作为归并基础的初始值，传入的函数接收4个参数，前一个值，当前值，项的索引和数组对象。这个函数返回的任何值都会作为第一个参数自动传给下一项1234// e.g. 求和var values = [1,2,3,4,5];var sum = values.reduce(function(prev, cur, index, array)&#123;return prev + cur;&#125;);alert(sum); // 15 Date类型ECMAScript的Date类型类似于java.util.Date类，使用自UTC 1970年1月1日午夜开始经过的毫秒数来保存日期创建一个日期对象可以var now = new Date()可以为构造函数传递毫秒来构建Date对象 Date.parse()接收一个表示日期的字符串参数，转换为毫秒数地区为美国的浏览器接收下列日期格式： “月/日/年”，如6/13/2004; “英文月名 日,年”，如January 12,2004 “英文星期几 英文月名 日 年 时:分:秒 时区”，如 Tue May 25 2004 00:00:00 GMT-0700 ISO 8601扩展格式 YYYY-MM-DDTHH:mm:ss.sssz(如2004-05-25T00:00:00) e.g. 构建2004/5/24的日期对象 var someDate = new Date(Date.parse(&quot;May 25, 2004&quot;));实际上var someDate = new Date(&quot;May 25, 2004&quot;);会自动调用parse Date.UTC()Date.UTC()参数为年份，基于0的月份，月中的日，小时，分钟，秒以及毫秒，年和月是必须的，其他可选，返回对应的毫秒数 e.g. var y2k = new Date(2000, 0);构建2000年1月1日0时的时间 Date.now()返回调用这个函数的时间的毫秒数 继承的方法toLocaleString()可能时间格式会有AM或PMtoString()带有时区信息的日期和时间valueOf()返回毫秒 日期格式化方法 toDateString()——以特定于实现的格式显示星期几，月，日，年 toTimeString()——以特定于实现的格式显示时，分，秒和时区 toLocaleDateString()——以特定于地区的格式显示 toLocaleTimeString()——同上 toUTCString()——以特定于实现的格式完整的UTC日期 其他日期/时间组件方法w3school列出的Date对象方法 RegExp类型ECMAScript通过RegExp类型来支持正则表达式,由于之前学Python的时候有认真的学过正则，但是一段时间没用就忘得差不多了，所以在没有用到的时候就先不学了，摆个链接在需要的时候再去看w3school RegExp对象 Function类型函数是对象，因此函数名实际上是一个指向函数对象的指针，不会与某个函数绑定由于函数名是指针,所以ECMAScript也没有函数重载的概念 函数声明与函数表达式看下面例子1234alert(sum(10, 10));function sum(num1, num2) &#123; return num1 + num2;&#125; 以上代码完全可以执行,因为在代码开始执行之前,解析器会通过一个名为函数声明提升的过程,读取并将函数声明添加到执行环境中,对代码求值时,JavaScript引擎在第一遍会声明函数并将它们放到源代码树的顶部,所以即使先调用函数再定义也不会出错,而像下面的例子就会报错1234alert(sum(10, 10));var sum = function(num1, num2) &#123; return num1 + num2;&#125; 原因在于函数位于一个初始化语句中,而不是一个函数声明 同样的,由于函数为对象,它可以作为另一个函数的参数或返回值. 函数内部属性arguments及其属性callee函数内部有两个特殊的对象:arguments和this,arguments保存传入函数中的所有参数,arguments还有一个属性名为callee,该属性是一个指针,指向拥有这个arguments对象的函数请看下面例子1234567function factorial(num) &#123; if (num &lt;= 1) &#123; return 1; &#125; else &#123; return num * factorial(num-1); &#125;&#125; 上面例子中,如果函数名字不会发生改变,那么这样定义是没有问题的,但如果函数名字改变了,则会发生错误,可以用下面的例子来解决1234567function factorial(num) &#123; if (num &lt;= 1) &#123; return 1; &#125; else &#123; return num * arguments.callee(num-1); &#125;&#125; thisthis与Java的this类似,引用的是函数执行的环境对象(当在网页的全局作用域中调用函数时,this对象引用的就是window)1234567891011window.color = "red";var o = &#123; color: "blue" &#125;;function sayColor() &#123; alert(this.color);&#125;sayColor(); // "red" 引用this对象为windowo.sayColor = sayColor;o.sayColor(); // "blue" caller这个属性保存调用当前函数的函数的引用,若在全局作用域中调用当前函数,则它的值为null123456789function outer() &#123; inner();&#125;function inner() &#123; alert(inner.caller); // 返回outer的源码&#125;outer(); 函数属性和方法lengthlength属性表示函数希望接收的命名参数的个数 prototype保存实例方法,不可枚举 call()与apply()在特定的作用域中调用函数,call()接收第一个参数为运行函数的作用域,后面多个参数为函数的参数,allpy()接收2个参数,第一个为运行函数的作用域,第二个为参数数组或arguments,它们可以用于扩充函数的作用域123456789101112window.color = "red";var o = &#123; color: "blue" &#125;;function sayColor() &#123; alert(this.color);&#125;sayColor(); //redsayColor.call(this); //redsayColor.call(window); //redsayColor.call(o); //blue bind()创建一个函数的实例,并将该实例的this绑定在bind()的参数上123456789window.color = "red";var o = &#123; color: "blue" &#125;;function sayColor() &#123; alert(this.color);&#125;var objectSayColor = sayColor.bind(o);objectSayColor(); //blue 基本包装类型–特殊的引用类型引用类型与基本包装类型最大的区别是对象的生命周期,使用new创建的引用类型的实例,在执行流离开当前作用域之前都一直保存在内存中,而自动创建的基本包装类型的对象,则只存在于一行代码的执行瞬间,然后就会销毁. Boolean建议不适用Boolean对象,而是使用布尔值 Number重写了valueOf(),toLocaleString()和toString(),toString()可以传入参数显示返回几进制数值,除了继承的方法,Number类型还提供了一些用于将数值格式化为字符串的方法num.toFixed(2) // 仅显示小数点后两位,四舍五入num.toExponential(1) // 小数位数为1的指数表示法(e表示法)num.toPrecision() // 返回自适应格式,参数为小数位显示 String字符方法stringValue.charAt(num);stringValue[num];stringValue.charCodeAt(num); // 返回num所在的字符的字符编码 字符串操作方法stringValue.concat(otherString);stringValue.substring();stringValue.slice();stringValue.substr(); // 第一个参数开始位置，第二个为字符串长传入负数后它们的行为不一样，不详述 字符串位置方法stringValue.indexOf()stringValue.lastIndexOf()stringValue.trim() // 删除前置后缀所有空格并返回 字符串大小写转换方法stringValue.toLocaleUpperCase(); // 和下面那个一样，不过一般用这个比较多stringValue.toUpperCase();stringValue.toLocaleLowerCase();stringValue.toLowerCase(); 字符串模式匹配方法stringValue.match()stringValue.search()涉及到正则，偷懒就不写了 localeCompare()比较两个字符串，根据结果返回-1,0,1 单体内置对象由ECMAScript实现提供的，不依赖于寄主环境的对象，在ECMAScript程序执行之前就已经存在了 Global对象偷懒，很多前面都有写，不重复了，书本P131 window对象同上 Math对象提供了数学公式和信息 Math.E 自然对数 Math.LN10 10为底的自然对数 Math.PI π Math.LOG10E 10为底e的对数 Math.SQRT2 2的平方根 等等其他值 舍入方法 Math.ceil() 向上舍入 Math.floor() 向下舍入 Math.round() 四舍五入 random()返回0-1的随机数 其他方法 Math.abs() Math.exp() Math.log() 等等]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>JS引用类型</tag>
        <tag>JS包装类型</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript02-变量，作用域和内存问题]]></title>
    <url>%2F2018%2F09%2F02%2FJavaScript02-%E5%8F%98%E9%87%8F-%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[JavaScript02-变量，作用域和内存问题变量JavaScript变量只是在特定时间用于保存特定值的一个名字，不存在定义某个变量就必须保存何种数据类型值的规则，变量的值及其数据类型可以在脚本的生命周期内改变。 基本类型和引用类型的值ECMAScript规定基本类型值指的是简单的数据段，而引用数据值指那些可能由多个值构成的对象，在JavaScript中，Undefined,Null,Boolean,Number,String都是基本数据类型，都是按值访问的。而引用类型的值是保存在内存中的对象，只有Object类型是引用数据类型。 动态的属性123var person = new Object();person.name = "PersonName";alert(person.name); // "PersonName" 以上代码我们创建了一个对象并将其值保存在person中，然后为该对象添加了一个名为name的属性，而对基本数据类型，虽然为其添加属性不会报错，但访问该属性的时候并不能成功访问。 复制变量值对于基本数据类型，12var num1 = 5;var num2 = num1; 两个变量之间不会相互影响。 而对于引用数据类型1234var obj1 = new Object();var obj2 = obj1;obj1.name = "objName";alert(obj2.name); // "objName" obj1和obj2引用的都是同一个对象 传递参数基本类型值的传递就如同基本类型变量的复制一样，而引用类型值的传递，也如同引用类型变量的复制一样。 执行环境及作用域执行环境定义了变量或函数有权访问的其他数据，决定了它们各自的行为，每个执行环境都有一个与之关联的变量对象，环境中定义的所有变量和函数都保存在这个对象中，解析器在处理数据时会在后台使用它。全局执行环境是最外围的一个执行环境。根据ECMAScript实现所在宿主环境不同，表示环境的对象也不同，在WEB浏览器中，全局执行环境被认为是window对象。每个函数都有自己的执行环境，当执行流进入一个函数的时候，函数的环境会进入环境栈，函数执行完毕后栈将其环境弹出，把控制权交还给之前的执行环境。当代码在一个环境中执行，会创建变量对象的一个作用域链。作用域链的作用是保证对执行环境有权访问的所有变量和函数的有序访问。作用域链的前段始终是当前执行代码所在环境的变量对象，如果这个环境是函数，则将其活动对象作为变量对象，该活动最开始时只有一个变量arguments对象。作用域链的下一对象来自包含的环境，再下一个变量对象来自下一个包含环境，一直到全局执行环境。标识符解析是沿着作用域链一级一级地搜索标识符的过程。搜索过程始终从作用域链的前端开始，逐级往后回溯，直至找到标识符为止。其实跟Java的作用域在表现上差不多。 延长作用域链以下两个语句都会在作用域链的前端添加一个变量对象。 try-catch语句的catch块 with语句 没有块级作用域123456789if (true) &#123; var color = "blue";&#125;alert(color); // "blue"for (var i = 0; i &lt; 10; i++) &#123; doSomeThing(i);&#125;alert(i); // 10 在JavaScript中，if和for中创建的变量依旧存在于外部的执行环境中。 垃圾收集JavaScript具有自动垃圾收集机制，执行环境会负责管理代码执行过程中使用的内存。 标记清除垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记，然后它会去掉环境中的变量以及被环境中的变量引用的变量的标记。而再次之后再被加上标记的变量将被视为准备删除的变量。 引用计数跟踪记录每个值被引用的次数，当引用次数变为0的时候，就回收其占用的内存空间，循环引用问题无法解决，很少使用。 管理内存对于全局变量，当确定不再使用的时候，可以为其赋值null，让值脱离执行环境，以便垃圾收集器下次运行时将其回收。]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>JS作用域链</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Servlet03-会话状态]]></title>
    <url>%2F2018%2F09%2F01%2FServlet03-%E4%BC%9A%E8%AF%9D%E7%8A%B6%E6%80%81%2F</url>
    <content type="text"><![CDATA[Servlet03-会话状态前言：这部分涉及到http cookie相关的知识，这里不再赘述 HttpSession一个HttpSession的例子代码摘自runoob，原网站为runoob的Session教程123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869@WebServlet("/SessionTrack")public class SessionTrack extends HttpServlet &#123; private static final long serialVersionUID = 1L; public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; // 如果不存在 session 会话，则创建一个 session 对象 HttpSession session = request.getSession(true); // 获取 session 创建时间 Date createTime = new Date(session.getCreationTime()); // 获取该网页的最后一次访问时间 Date lastAccessTime = new Date(session.getLastAccessedTime()); //设置日期输出的格式 SimpleDateFormat df=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); String title = "Servlet Session 实例 - 菜鸟教程"; Integer visitCount = new Integer(0); String visitCountKey = new String("visitCount"); String userIDKey = new String("userID"); String userID = new String("Runoob"); // 检查网页上是否有新的访问者 if (session.isNew())&#123; title = "Servlet Session 实例 - 菜鸟教程"; session.setAttribute(userIDKey, userID); &#125; else &#123; visitCount = (Integer)session.getAttribute(visitCountKey); visitCount = visitCount + 1; userID = (String)session.getAttribute(userIDKey); &#125; session.setAttribute(visitCountKey, visitCount); // 设置响应内容类型 response.setContentType("text/html;charset=UTF-8"); PrintWriter out = response.getWriter(); String docType = "&lt;!DOCTYPE html&gt;\n"; out.println(docType + "&lt;html&gt;\n" + "&lt;head&gt;&lt;title&gt;" + title + "&lt;/title&gt;&lt;/head&gt;\n" + "&lt;body bgcolor=\"#f0f0f0\"&gt;\n" + "&lt;h1 align=\"center\"&gt;" + title + "&lt;/h1&gt;\n" + "&lt;h2 align=\"center\"&gt;Session 信息&lt;/h2&gt;\n" + "&lt;table border=\"1\" align=\"center\"&gt;\n" + "&lt;tr bgcolor=\"#949494\"&gt;\n" + " &lt;th&gt;Session 信息&lt;/th&gt;&lt;th&gt;值&lt;/th&gt;&lt;/tr&gt;\n" + "&lt;tr&gt;\n" + " &lt;td&gt;id&lt;/td&gt;\n" + " &lt;td&gt;" + session.getId() + "&lt;/td&gt;&lt;/tr&gt;\n" + "&lt;tr&gt;\n" + " &lt;td&gt;创建时间&lt;/td&gt;\n" + " &lt;td&gt;" + df.format(createTime) + " &lt;/td&gt;&lt;/tr&gt;\n" + "&lt;tr&gt;\n" + " &lt;td&gt;最后访问时间&lt;/td&gt;\n" + " &lt;td&gt;" + df.format(lastAccessTime) + " &lt;/td&gt;&lt;/tr&gt;\n" + "&lt;tr&gt;\n" + " &lt;td&gt;用户 ID&lt;/td&gt;\n" + " &lt;td&gt;" + userID + " &lt;/td&gt;&lt;/tr&gt;\n" + "&lt;tr&gt;\n" + " &lt;td&gt;访问统计：&lt;/td&gt;\n" + " &lt;td&gt;" + visitCount + "&lt;/td&gt;&lt;/tr&gt;\n" + "&lt;/table&gt;\n" + "&lt;/body&gt;&lt;/html&gt;"); &#125;&#125; 配置好web.xml即可 对这段代码的解释以及补充request.getSession()以及其重构方法request.getSession(false)HttpSession session = request.getSession(boolean create)返回当前reqeust中的HttpSession，如果当前reqeust中的HttpSession为null，当create为true，就创建一个新的Session，否则返回null 当向Session中存取登录信息时，一般建议：HttpSession session =request.getSession(); 当从Session中获取登录信息时，一般建议：HttpSession session =request.getSession(false); session.isNew() - 判断是否为新的用户12345if(session.isNew()) &#123; // do something with new user&#125; else &#123; // do something&#125; session.getId() - 获取当前用户的sessionID其他HttpSession API 禁用cookie的解决方法-URL重写您可以在每个 URL 末尾追加一些额外的数据来标识 session 会话，服务器会把该 session 会话标识符与已存储的有关 session 会话的数据相关联。 例如，http://w3cschool.cc/file.htm;sessionid=12345，session 会话标识符被附加为 sessionid=12345，标识符可被 Web 服务器访问以识别客户端。 URL 重写是一种更好的维持 session 会话的方式，它在浏览器不支持 cookie 时能够很好地工作，但是它的缺点是会动态生成每个 URL 来为页面分配一个 session 会话 ID，即使是在很简单的静态HTML页面中也会如此。 对URL重写，必须要先对URL进行编码可以通过以下两种方法对URL进行编码 jsp中添加&lt;% response.encodeURL(&quot;hello.jsp&quot;); %&gt; Servlet中使用response.encodeRedirectURL()与sendRedirect()，见下面 12345678910@Overrideprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; HttpSession session = request.getSession(); //下面请求重定向的路径。 String path = response.encodeRedirectURL("/BeerTest.do"); String sessionId = request.getSession().getId(); request.setAttribute("sessionId",sessionId); response.sendRedirect(path);&#125; 设置会话超时在web.xml中配置,下面例子是设置15分钟超时 123456&lt;web-app ...&gt; &lt;servlet&gt; ... &lt;/servlet&gt; &lt;session-timeout&gt;15&lt;/session-timeout&gt;&lt;/web-app&gt; 设置特定会话的会话超时session.setMaxInactiveInterval(20*60); // 设置20分钟没有做任何请求就超时 Cookie创建一个新CookieCookie cookie = new Cookie(&quot;username&quot;, name);设置cookie在客户端存活时间cookie.setMaxAge(30*60); // 30min把cookie发送给客户response.addCookie(cookie);从客户请求得到cookie 123456789Cookie[] cookies = request.getCookies();for (int i = 0; i &lt; cookies.length; i++) &#123; Cookie cookie = cookies[i]; if (cookie.getName().equals("username")) &#123; String userName = cookie.getValue(); out.println("Hello " + userName); break; &#125; 简单的cookie示例login.jsp设置表单提交账号密码，如果账号为test，则点击index.jsp的提交按钮可以显示其密码可以在F12 Application Cookies可以看到cookie web.xml 1234567891011121314151617181920212223242526&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" version="4.0"&gt; &lt;servlet&gt; &lt;servlet-name&gt;cookieTest&lt;/servlet-name&gt; &lt;servlet-class&gt;ServletCookie&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;cookieTest&lt;/servlet-name&gt; &lt;url-pattern&gt;/sv.html&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;servlet&gt; &lt;servlet-name&gt;cookieTest2&lt;/servlet-name&gt; &lt;servlet-class&gt;CheckCookie&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;cookieTest2&lt;/servlet-name&gt; &lt;url-pattern&gt;/result.html&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;/web-app&gt; login.jsp 1234567891011121314&lt;%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%&gt;&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt; &lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form action="sv.html" method="post"&gt; &lt;input type="text" name="username" /&gt; &lt;input type="password" name="password" /&gt; &lt;input type="submit" value="提交" /&gt;&lt;/form&gt;&lt;/body&gt; index.jsp 1234567891011&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;$Title$&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;form action="result.html" method="post"&gt; &lt;input type="submit" value="提交" /&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html ServletCookie.java 12345678910111213141516171819202122232425import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.Cookie;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;@WebServlet(name = "ServletCookie")public class ServletCookie extends HttpServlet &#123; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; String username = request.getParameter("username"); String password = request.getParameter("password"); //定义一个名为username，值为Tom的cookie Cookie cookie = new Cookie(username, password); response.addCookie(cookie); request.getRequestDispatcher("index.jsp").forward(request, response); &#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; &#125;&#125; CheckCookie.java 1234567891011121314151617181920212223242526272829303132import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.Cookie;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.io.PrintWriter;@WebServlet(name = "CheckCookie")public class CheckCookie extends HttpServlet &#123; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; response.setContentType("text/html"); PrintWriter out = response.getWriter(); Cookie[] cookies = request.getCookies(); if (cookies != null) &#123; for (Cookie cookie : cookies) &#123; if(cookie.getName().equals("test")) &#123; String userName = cookie.getValue(); out.println(userName); break; &#125; &#125; &#125; &#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; &#125;&#125; HttpSessionBindingListener]]></content>
      <categories>
        <category>Servlet</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
        <tag>HttpSession</tag>
        <tag>Cookie</tag>
        <tag>HttpSessionBindingListener</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Servlet04-JSP]]></title>
    <url>%2F2018%2F09%2F01%2FServlet04-JSP%2F</url>
    <content type="text"><![CDATA[Servlet04-JSP基本指令page使用page指令导入包&lt;%@ page import=&quot;foo.*&quot; %&gt;&lt;%@ page import=&quot;foo.*,java.util.*&quot; %&gt; page指令的属性 taglibtaglib定义JSP可用的标记库&lt;%@ taglib tagdir=&quot;/WEB-INF/tags/cool&quot; prefix=&quot;cool&quot; %&gt; includeinclude定义在转换时增加到当前页面的文本和代码&lt;%@ include file=&quot;xxx.html&quot; %&gt;使用此指令允许你建立可重用的块（如标准页面标题或导航栏），这些可重用的块能增加到各个页面上，而不用每个JSP都重复写这些代码 表达式对于&lt;% out.println(Counter.getCount()); %&gt;可以用&lt;%= Counter.getCount() %&gt;代替，不需要分号，表达式内的内容为out.print的参数 声明&lt;%! int count = 0; %&gt;声明该JSP所生成的servlet类的成员 初始化JSP在配置文件中如下配置 12345678910&lt;web-app ...&gt; &lt;servlet&gt; &lt;servlet-name&gt;name&lt;/servlet-name&gt; &lt;jsp-file&gt;/directory/xxx.jsp&lt;/jsp-file&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;name&lt;/servlet-name&gt; &lt;url-pattern&gt;/xxx&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;/web-app&gt; 覆盖jspInit()只要在.jsp文件中实现了jspInit()方法，在JSP页面成为servlet的最开始容器就会调用这个方法，这个方法由servlet的init()方法调用，所以在运行jspInit()方法时，已经有一个ServletConfig和ServletContext可供servlet使用，可以在jspInit()中调用getServletConfig()和getServletContext() 123456&lt;%! public void jspInit() &#123; ServletConfig sConfig = getServletConfig(); // do something &#125;%&gt; 同理jspDestroy()也可以覆盖 JSP的属性除了Servlet拥有的请求，会话和上下文这三个属性，JSP还拥有页面作用域pageContext（隐式对象），常用于开发定制标记 使用PageContext得到属性可以在PageContext引用得到任意作用域的属性 同理使用&lt;% pageContext.setAttribute(&quot;foo&quot;, &quot;attr&quot;, PageContext.SESSION_SCOPE); %&gt;等同于&lt;% session.setAttribute(&quot;foo&quot;, &quot;attr&quot;); %&gt; 使用&lt;%= pageContext.findAttribute(&quot;foo&quot;) %&gt;可以在不知道作用域的情况下查找一个属性 EL预热EL(Expression Language)是无脚本JSP，可以允许开发人员在JSP中不适用Java也能达到同样的效果 为什么使用EL？ 不应该要求WEB页面设计人员必须懂Java JSP中的Java代码很难修改和维护 开启无脚本JSP在配置文件web.xml中 123456789101112&lt;web-app ...&gt; ... &lt;jsp-config&gt; &lt;jsp-property-group&gt; &lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt; &lt;scripting-invalid&gt; true &lt;/scripting-invalid&gt; &lt;/jsp-property-group&gt; &lt;/jsp-config&gt; ...&lt;/web-app&gt; 选择忽略EL123456789101112&lt;web-app ...&gt; ... &lt;jsp-config&gt; &lt;jsp-property-group&gt; &lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt; &lt;el-ignored&gt; true &lt;/el-ignored&gt; &lt;/jsp-property-group&gt; &lt;/jsp-config&gt; ...&lt;/web-app&gt;]]></content>
      <categories>
        <category>Servlet</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
        <tag>JSP</tag>
        <tag>EL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Servlet02-ServletConfig,ServletContext与监听器]]></title>
    <url>%2F2018%2F09%2F01%2FServlet02-ServletConfig%2CServletContext%E4%B8%8E%E7%9B%91%E5%90%AC%E5%99%A8%2F</url>
    <content type="text"><![CDATA[Servlet02-ServletConfig,ServletContext与监听器通过web.xml可以初始化参数，避免了硬编码改变了源码与重新编译的麻烦，如下：12345678&lt;servlet&gt; &lt;init-param&gt; &lt;param-name&gt;name&lt;/param-name&gt; &lt;param-value&gt;value&lt;/param-value&gt; &lt;/init-param&gt;&lt;/servlet-name&gt; 在servlet代码中通过1234567来获取该值或者通过下面例子处理```Java Enumeration e = getServletConfig().getInitParameterNames(); while(e.hasMoreElements()) &#123; // do something with e.nextElement(); &#125; 但ServletConfig仅仅能在该servlet中使用，对于想要在全局使用的参数实在不方便，ServletContext可以很好的解决这个问题 ServletContext在web.xml中添加1234&lt;context-param&gt; &lt;param-name&gt;adminEmail&lt;/param-name&gt; &lt;param-value&gt;231232@oaiw.com&lt;/param-value&gt;&lt;/context-param&gt; Servlet中通过getServletContext().getInitParameter(&quot;adminEmail&quot;);来获取 ServletConfig与ServletContext的区别 在部署文件中，上下文初始化参数是在&lt;web-app&gt;中的，而Servlet初始化参数是在servlet中的 ServletConfig的作用域为每个servlet，而ServletContext的作用域为整个WEB应用 ServletContextListener由于ServletContext在初始化的时候只能保存字符串，若要保存一个对象或在应用启动之前利用该字符串做一些准备工作（比如打开数据库），则需要监听器的帮助。ServletContextListener接口可以监听一个上下文初始化事件，得到上下文初始化参数，并在应用为客户提供服务之前运行一些代码，要实现该接口，就要实现下面两个方法public void contextInitialized(ServletContextEvent event)public void contextDestroyed(ServletContextEvent event) 建立一个上下文监听者 创建一个监听者类 把编译后的类*.class放入WEB-INF/classes 在web.xml部署描述文件放一个&lt;listener&gt;元素，如下12345&lt;listener&gt; &lt;listener-class&gt; com.example.MyServletContextListener &lt;/listener-class&gt;&lt;/listener&gt; 一个监听器的例子web.xml中先注册该Listener，然后设置好对应的servlet以及context-param，如下12345678910111213141516171819202122232425&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" version="4.0"&gt; &lt;servlet&gt; &lt;servlet-name&gt;ListenerTester&lt;/servlet-name&gt; &lt;servlet-class&gt;com.example.web.ListenerTester&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;ListenerTester&lt;/servlet-name&gt; &lt;url-pattern&gt;/listen.ht&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;context-param&gt; &lt;param-name&gt;breed&lt;/param-name&gt; &lt;param-value&gt;Great Dane&lt;/param-value&gt; &lt;/context-param&gt; &lt;listener&gt; &lt;listener-class&gt;com.example.web.MyServletContextListener&lt;/listener-class&gt; &lt;/listener&gt;&lt;/web-app&gt; 监听器的工作是得到该ServletContext的初始值，然后创建一个Dog对象，把该值作为参数传入对象构造函数，并构造一个ServletContext对象，设置该Dog对象作为新的ServletContext的属性。123456789101112131415161718192021package com.example.web;import com.example.model.Dog;import javax.servlet.ServletContext;import javax.servlet.ServletContextEvent;import javax.servlet.ServletContextListener;public class MyServletContextListener implements ServletContextListener &#123; public void contextInitialized(ServletContextEvent event) &#123; ServletContext sc = event.getServletContext(); String dogBreed = sc.getInitParameter("breed"); Dog d = new Dog(dogBreed); sc.setAttribute("dog", d); &#125; public void contextDestroyed(ServletContextEvent event) &#123; &#125;&#125; Dog对象如下1234567891011121314package com.example.model;public class Dog &#123; private String breed; public Dog(String breed) &#123; this.breed = breed; &#125; public String getBreed() &#123; return breed; &#125;&#125; Servlet通过getServletContext().getAttribute(&quot;dog&quot;)得到ServletContext的属性值来获取该Dog对象，这样就可以通过ServletContext对象来获取String以外的值了。 123456789101112131415161718192021222324252627282930package com.example.web;import com.example.model.Dog;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.io.PrintWriter;@WebServlet(name = "ListenerTester")public class ListenerTester extends HttpServlet &#123; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; &#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; response.setContentType("text/html"); PrintWriter out = response.getWriter(); out.println("test context attributes set by listener&lt;br&gt;"); out.println("&lt;br&gt;"); Dog dog = (Dog) getServletContext().getAttribute("dog"); out.println("Dog's breed is : " + dog.getBreed()); &#125;&#125; 其他监听者 属性API与属性安全 上下文属性无法确保线程安全，要对上下文加锁。 请求属性和请求分派1234request.setAttribute("attrName", attrValue);RequestDispatcher view = request.getRequestDispatcher("*.jsp");view.forward(request, response); 通过从ServletRequest（或ServletContext）得到RequestDispatcher对象，调用forward()把请求转交给JSP处理 注意！如果已经提交了响应，就不能转发请求，否则会报IllegalStateException，os.flush()等方法都是提交响应]]></content>
      <categories>
        <category>Servlet</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
        <tag>ServletConfig</tag>
        <tag>ServletContext</tag>
        <tag>Listener</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Servlet05-无脚本JSP]]></title>
    <url>%2F2018%2F09%2F01%2FServlet05-%E6%97%A0%E8%84%9A%E6%9C%ACJSP%2F</url>
    <content type="text"><![CDATA[Servlet05-无脚本JSPbean法则-使用bean的规范 必须有一个无参数的公共构造函数 必须按命名规范来命名公共的getter和setter setter的参数类型和getter的返回类型必须一致 性质名和类型是由setter和getter得出，而不得来自于类中的一个成员 结合JSP使用时，性质类型必须是String或其他基本类型 使用EL对于model Person，它是一个JavaBean，所以我们要使用与bean相关的标准动作 使用脚本： 123456&lt;html&gt;&lt;body&gt;&lt;% foo.Person p = (foo.Person) request.getAttribute("person"); %&gt;Person is : &lt;%= p.getName() %&gt;&lt;/body&gt;&lt;/html&gt; 使用标准动作： 123456&lt;html&gt;&lt;body&gt;&lt;jsp:useBean id="person" class="foo.Person" scope="request" /&gt;Person created by servlet: &lt;jsp:getProperty name="person" property="name" /&gt;&lt;/body&gt;&lt;/html&gt; 分析&lt;jsp:useBean&gt;和&lt;jsp:getProperty&gt;&lt;jsp:useBean&gt;用 &lt;jsp:useBean&gt; 声明和初始化一个bean属性，id为声明bean对象的标识符，对应于servlet的request.setAttribute(&quot;person&quot;, p)，class为声明的对象的类类型，scope标识这个bean对象的属性作用域 &lt;jsp:useBean&gt;还可以创建一个bean，如果它找不到一个名为”person”的属性对象，它就会建一个 &lt;jsp:getProperty&gt;用 &lt;jsp:getProperty&gt;得到bean属性的性质值，name标识具体的bean对象，与&lt;jsp:useBean&gt;的id属性相匹配，property标识属性中的性质名(也就是与bean类中getter和setter对应的性质) &lt;jsp:setProperty&gt;&lt;jsp:setProperty&gt;是第三个（也是最后一个）bean标准动作，具体使用如下 &lt;jsp:setProperty name=&quot;person&quot; property=&quot;name&quot; value=&quot;yourNameVal&quot; /&gt; &lt;jsp:useBean&gt;可以有体如果把设置方法代码&lt;jsp:setProperty&gt;放在&lt;jsp:useBean&gt;的体中，就可以有条件地设置性质，只有创建新bean时才设置性质值 123&lt;jsp:useBean id="person" class="foo.Person" scope="page" &gt; &lt;jsp:setProperty name="person" property="name" value="yourNameVal" /&gt;&lt;/jsp:useBean&gt; 多态bean引用 &lt;jsp:useBean&gt;的type属性可以用&lt;jsp:useBean&gt;的type属性实现引用类型不同于具体的对象类型，假设新对象的类型为Employee，引用类型是Person &lt;jsp:useBean id=&quot;person&quot; type=&quot;foo.Person&quot; class=&quot;foo.Employee&quot; scope=&quot;page&quot;&gt; 可以实现效果，生成的servlet代码大概如下 12345foo.Person person = null;// 得到person属性的代码if (person == null) &#123; person = new foo.Employee();&#125; type可以是class类型，抽象类型或者是一个接口，class必须是type的一个子类或具体实现，type是声明的类型，而class是要实例化的类 直接从表单请求到JSP - param属性可以通过设置name一致达到直接从请求到JSP的效果，不需要途中经过servlet 假设表单是这样的： 123456789&lt;html&gt; &lt;body&gt; &lt;form action="TestBean.jsp"&gt; name: &lt;input type="text" name="userName"&gt; ID#: &lt;input type="text" name="userID"&gt; &lt;input type="submit"&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; 在TestBean.jsp中 123&lt;jsp:useBean id="person" type="foo.Person" class="foo.Employee"&gt; &lt;jsp:setProperty name="person" property="name" param="userName" /&gt;&lt;/jsp:useBean&gt; 利用param属性，可以把bean的性质值设置为一个请求参数的值，只需指定请求参数 甚至不需要param属性只要把表单内的内容设置与bean的性质一致，甚至可以不需要param属性，如下 123456789&lt;html&gt; &lt;body&gt; &lt;form action="TestBean.jsp"&gt; name: &lt;input type="text" name="name"&gt; ID#: &lt;input type="text" name="userID"&gt; &lt;input type="submit"&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; 在TestBean.jsp中 123&lt;jsp:useBean id="person" type="foo.Person" class="foo.Employee"&gt; &lt;jsp:setProperty name="person" property="name" /&gt;&lt;/jsp:useBean&gt; 如果设置表单中所有请求参数名都与bean性质名匹配，那么甚至连property都可以省略 如下 123456789&lt;html&gt; &lt;body&gt; &lt;form action="TestBean.jsp"&gt; name: &lt;input type="text" name="name"&gt; ID#: &lt;input type="text" name="empID"&gt; &lt;input type="submit"&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; 在TestBean.jsp中 123&lt;jsp:useBean id="person" type="foo.Person" class="foo.Employee"&gt; &lt;jsp:setProperty name="*" property="name" /&gt;&lt;/jsp:useBean&gt; 性质是引用类型的情况假如Person有一个Dog “dog”性质，Dog有一个String “name”性质，如果想打印Person的dog的name，可以用到EL，如下 123&lt;html&gt;&lt;body&gt;Dog's name is : $&#123;person.dog.name&#125;&lt;/body&gt;&lt;/html&gt; 对${person.dog.name}的解释${person.dog.name} 等同于 &lt;%= ((foo.Person) request.getAttribute(&quot;person&quot;)).getDog().getName() %&gt; 使用点号(.)可以访问性质和映射值 使用中括号[]，更好的点号点号右边是一个bean性质或映射键的时候，点号操作符才能正常工作，但[]操作符就强大很多，它既可以完成点号操作符能完成的工作，也可以当左边变量是一个数组或者List或者右边不遵循正常的Java命名规范的时候仍然可以正常工作 EL中的隐式对象param与paramValuesHTML表单中 12345678&lt;form action="TestBean.jsp"&gt; name: &lt;input type="text" name="name"&gt; ID#: &lt;input type="text" name="empID"&gt; First food: &lt;input type="text" name="food"&gt; Second food: &lt;input type="text" name="food"&gt; &lt;input type="submit"&gt;&lt;/form&gt; 对于单个值，可以在JSP中${param.name}获取表单的name对于多个值，可以在JSP中${paramValues.food[0]}获取多个值中的一个 EL的其他隐式对象得到”host”首部${header[&quot;host&quot;]}或${header.host} 得到Cookie打印”userName” Cookie的值 使用脚本： 12345678&lt;% Cookie[] cookies = request.getCookies();for (int i = 0; i &lt; cookies.length; i++) &#123; if ((cookies[i].getName()).equals("userName")) &#123; out.println(cookies[i].getValue()); &#125;&#125;%&gt; 使用EL： ${cookie.uesrName.value} 上下文参数在web.xml中 1234&lt;context-param&gt; &lt;param-name&gt;mainEmail&lt;/param-name&gt; &lt;param-value&gt;12345@outlook.com&lt;/param-value&gt;&lt;/context-param&gt; 使用脚本：&lt;%= application.getInitParameter(&quot;mainEmail&quot;) %&gt; 使用EL：${initParam.mainEmail} EL函数使用EL函数有如下四步骤 编写一个有公共静态方法的Java类 编写一个标记库描述文件(.tld) 在JSP中放一个taglib指令 使用EL调用函数 编写一个有公共静态方法的Java类1234567package com.xhj.web;public class DiceRoller &#123; public static int rollDice() &#123; return (int) ((Math.random() * 6) + 1); &#125;&#125; 编写一个标记库描述文件IDEA中在web目录右键new -&gt; xml configuration file -&gt; JSP tag library descriptor 重命名为*.tld 123456789101112131415161718&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;&lt;taglib xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-jsptaglibrary_2_1.xsd" version="2.1"&gt; &lt;tlib-version&gt;1.0&lt;/tlib-version&gt; &lt;uri&gt;DiceFunctions&lt;/uri&gt; &lt;function&gt; &lt;name&gt;rollIt&lt;/name&gt; &lt;function-class&gt;com.xhj.web.DiceRoller&lt;/function-class&gt; &lt;function-signature&gt;int rollDice()&lt;/function-signature&gt; &lt;/function&gt; &lt;!-- Invoke 'Generate' action to add tags or functions --&gt;&lt;/taglib&gt; 在JSP中放一个taglib指令&lt;%@ taglib prefix=&quot;mine&quot; uri=&quot;DiceFunctions&quot; %&gt; 使用EL调用函数正文添加${mine:rollIt()} 对TLD文件的解释 TLD中的uri对应JSP中taglib指令的uri属性 TLD中function里的name标签的值对应EL表达式中冒号右边使用的函数 TLD中function-class标签对应.class TLD中function-signature标签的值对应.class里的公共静态方法及其返回值 taglib指令中的prefix属性的值对应EL表达式冒号左边的值 *.tld文件可以放在WEB-INF目录或者其某个子目录中 EL处理null对于找不到表达式中指定的属性/性质/键，也会显示页面，在算术表达式中，EL把null值看做是0，在逻辑表达式中，EL把null看做是false 可复用的模板部件对于网站上每个页面的页眉和页脚都一样的情况下，每个JSP反复编写同样的页眉页脚，会显得效率低下，这个时候可以使用include指令把相同的页面放在不同网页对应的位置上 &lt;include&gt;指令用法：&lt;%@ include file=&quot;*.jsp&quot; %&gt; &lt;jsp:include&gt;标准动作用法&lt;jsp:include page=&quot;*.jsp&quot; /&gt; &lt;include&gt;与&lt;jsp:include&gt;的区别include指令在转换时发生，&lt;jsp:include&gt;标准动作在运行时发生include指令相当于复制代码粘贴，标准动作则根据页面属性创建一个RequestDispatcher，并应用include()方法。 注意！不需要把&lt;html&gt;和&lt;body&gt;标签放到可复用部件中 &lt;jsp:param&gt;定制包含的内容假设我们已经有了一个页眉，但是如果我们想要定制页眉的某一部分，比如我希望在页眉上有一个与上下文相关的子标题，它要依页面而定，如下 在对应的jsp文件中 1234567&lt;html&gt;&lt;body&gt;&lt;jsp:include page="Header.jsp"&gt; &lt;jsp:param name="subTitle" value="aha!this is a sub title." /&gt;&lt;/jsp:include&gt;&lt;/body&gt;&lt;/html&gt; 在Header.jsp中 12&lt;img src="directory/images/xxx.png"&gt;&lt;em&gt;&lt;strong&gt;$&#123;param.subTitle&#125;&lt;/strong&gt;&lt;/em&gt; &lt;jsp:forward&gt;转发可以从一个JSP转发到另一个JSP，或者从一个JSP转发到一个servlet，还可以从一个JSP转发到WEB应用中任何其他资源。比如客户访问页面，如果没有登录，就转向另一个页面 123&lt;% if (request.getParameter("userName") == null) &#123; &gt; &lt;jsp:forward page="xx.jsp" /&gt;&lt;% &#125; %&gt;]]></content>
      <categories>
        <category>Servlet</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
        <tag>JSP</tag>
        <tag>EL</tag>
        <tag>bean</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Servlet之WEB应用体系与MVC]]></title>
    <url>%2F2018%2F09%2F01%2FServlet01-WEB%E5%BA%94%E7%94%A8%E4%BD%93%E7%B3%BB%E4%B8%8E%E5%88%9D%E7%AA%A5MVC%2F</url>
    <content type="text"><![CDATA[#Servlet之WEB应用体系与MVC ##WEB应用体系 ###TOMCAT容器的作用 通信支持容器可以让servlet与WEB容器对话，创建ServerSocket，监听端口，创建流等生命周期管理容器控制着servlet的生命周期，负责加载类，实例化，初始化servlet，调用servlet方法，垃圾回收等多线程支持每次接收到用户servlet请求，就会创建一个新的Java线程，声明方式实现安全使用XML部署描述文件配置安全性JSP支持容器负责把JSP翻译成Java ###容器处理请求 用户点击一个链接，指向一个servlet 容器看出来这个请求要的是一个servlet，创建两个对象，分别为HttpServletResponse，HttpServletRequest 容器根据请求的URL找到对应的servlet，为这个请求分配一个线程，并把请求和响应对象传递给这个servlet线程 容器调用service的service()方法，根据请求的不同类型，service()方法会调用doGet()或doPost()方法 doGet()方法生成动态页面，塞到响应对象里 线程结束，容器把响应对象转换为一个HTTP响应，把它发回给客户，然后删除请求和响应对象 ###servlet的映射方式通过配置部署描述文件web.xml可以配置servlet名对应的URL路径一般的web.xml内容如下1234567891011121314151617&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" version="4.0"&gt; &lt;servlet&gt; &lt;servlet-name&gt;yourDefinedName&lt;/servlet-name&gt; &lt;servlet-class&gt;yourServletClassName&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;yourDefinedName&lt;/servlet-name&gt; &lt;url-pattern&gt;/yourUrl&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;/web-app&gt; &lt;servlet&gt;元素告诉容器有哪个类文件&lt;servlet-name&gt;元素用于把一个&lt;servlet&gt;元素与一个特定的&lt;servlet-mapping&gt;元素绑定，最终用户看不到这个名字，这个名字只在这个部署文件的其他部分使用&lt;servlet-class&gt;类的完全限定名，但不要加上.class后缀&lt;servlet-mapping&gt;请求到来时，容器会在运行时使用这个元素，来调用对应的servlet&lt;url-pattern&gt;URL的路径 客户知道的URL名对应的是&lt;url-pattern&gt;的值，部署人员知道的秘密的内部名对应的是&lt;servlet-name&gt;的值，实际的文件名对应的是&lt;servlet-class&gt;的值 ##初窥MVCMVC分别为model，view，controller，MVC的关键是业务逻辑与表示分离，实际上，业务逻辑甚至根本不知道有表示存在 ###Model实际的业务逻辑和状态放在模型中，系统中只有这部分与数据库通信 ###Controller从请求获得用户输入，并明确输入对模型的影响，告诉模型自行更新，并让视图得到新的模型状态，一个servlet实际上就是一个控制器 ###View负责表示，它从控制器得到模型的状态，还要获得用户输入，交给控制器，一个JSP文件其实就是一个View ##一个简单的MVC应用目录树如下其中，com.example.web.BeerSelect为控制器，com.example.model.BeerExpert为模型，result.jsp为view web.xml内容如下1234567891011121314151617&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" version="4.0"&gt; &lt;servlet&gt; &lt;servlet-name&gt;Ch3 Beer&lt;/servlet-name&gt; &lt;servlet-class&gt;com.example.web.BeerSelect&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;Ch3 Beer&lt;/servlet-name&gt; &lt;url-pattern&gt;/SelectBeer.do&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;/web-app&gt; form.html如下123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;form test&lt;/title&gt; &lt;link rel="stylesheet" type="text/css" href="css/form.css"&gt; &lt;/head&gt; &lt;body&gt; &lt;h1 align="center"&gt;Beer Selection Page&lt;/h1&gt; &lt;div id="formT"&gt; &lt;form method="POST" action="SelectBeer.do"&gt; &lt;p&gt;Color: &lt;select name="color"&gt; &lt;option name="light"&gt;light&lt;/option&gt; &lt;option name="dark"&gt;dark&lt;/option&gt; &lt;/select&gt; &lt;p&gt; &lt;input type="submit"&gt; &lt;/p&gt; &lt;/p&gt; &lt;/form&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; result.jsp123456789101112131415161718192021&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;%@ page import="java.util.*" %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1 align="center"&gt;Bear Recommendations JSP&lt;/h1&gt; &lt;p&gt; &lt;% List styles = (List)request.getAttribute("styles"); Iterator it = styles.iterator(); while (it.hasNext()) &#123; out.print("try: " + it.next()); &#125; %&gt; &lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 模型BeerExpert.java如下12345678910111213141516171819package com.example.model;import java.util.ArrayList;import java.util.List;public class BeerExpert &#123; public List getBrands(String color) &#123; List brands = new ArrayList(); if (color.equals("light")) &#123; brands.add("light a"); brands.add("light b"); &#125; else &#123; brands.add("dark1"); brands.add("dark2"); &#125; return brands; &#125;&#125; 控制器BeelSelect如下1234567891011121314151617181920212223242526272829package com.example.web;import com.example.model.BeerExpert;import javax.servlet.RequestDispatcher;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.util.List;@WebServlet(name = "BeerSelect")public class BeerSelect extends HttpServlet &#123; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; String c = request.getParameter("color"); BeerExpert be = new BeerExpert(); List result = be.getBrands(c); request.setAttribute("styles", result); RequestDispatcher view = request.getRequestDispatcher("result.jsp"); view.forward(request, response); &#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; &#125;&#125; ##作为Servlet在上述代码中，Servlet作为控制器有如下功能 获得html页面中参数color的值 创建一个模型，通过参数获得模型对应的属性 设置请求的属性并设置对应值为从模型得到的结果（键-值对应） 创建一个请求分派器对象，获得result.jsp页面 通过view.forward(request,response)把请求和响应发送给该view，view通过request.getAttribute(“key”)来得到模型发送来的结果 ###Servlet生命周期 WEB容器加载servlet类 实例化servlet（构造函数运行） init() service()调用doGet(),doPost()等等 destroy() ###HttpServletRequest API ###HttpServletResponse API ###输出字符或字节对于输出，可以选择输出字符或者字节输出字符的时候12PrintWriter writer = response.getWriter();writer.println("some text or HTML"); 输出字节的时候12ServletOutputStream out = response.getOutputStream();out.write(aByteArray); ####使用响应完成I/Oe.g.Servlet处理下载JAR文件1234567891011121314151617181920public class CodeReutrn extends HttpServlet &#123; public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException &#123; response.setContentType("application/jar"); // 对于这里的ContentType，还有很多其他的，具体可以自行Google ServletContext ctx = getServletContext(); InputStream is = ctx.getResourceAsStream("/directory/xxx.jar"); int read = 0; byte[] bytes = new byte[1024]; OutputStream os = response.getOutputStream(); while((read = is.read(bytes)) != -1) &#123; os.write(bytes, 0, read); &#125; os.flush(); os.close(); &#125;&#125;]]></content>
      <categories>
        <category>Servlet</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
        <tag>MVC</tag>
        <tag>TOMCAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript01-语法]]></title>
    <url>%2F2018%2F09%2F01%2FJavaScript01-%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[JavaScript01-语法在HTML中嵌入JavaScript有两种方法，第一种是内嵌在&lt;head&gt;标签的&lt;script&gt;标签之间123456789101112&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;Example&lt;/title&gt; &lt;script&gt; JavaScript goes here... &lt;/script&gt; &lt;body&gt; Mark-up goes here... &lt;/body&gt;&lt;/html&gt; 另一种更好的方法是存在.js文件中，利用&lt;script&gt;标签的src属性指向该文件12345678910&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;Example&lt;/title&gt; &lt;script src="file.js"&gt;&lt;/script&gt; &lt;body&gt; Mark-up goes here... &lt;/body&gt;&lt;/html&gt; Script标签元素详解有如下6个属性 async: 可选，表示立即下载脚本，但不应妨碍页面其他操作，只对外部脚本有效。 charset: 可选，基本不用。 defer: 可选，表示脚本可以延迟到文档完全被解析和显示后再执行。只对外部脚本有效。 src: 可选，表示包含要执行代码的外部文件。 type: 可选，使用脚的脚本语言的内容类型，目前用的比较多的还是 text/javascript Script标签的位置最好的做法就是把&lt;script&gt;标签放在HTML文档的最后，&lt;body&gt;标签的前面12345678910&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;Example&lt;/title&gt; &lt;body&gt; Mark-up goes here... &lt;script src="file.js"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; JavaScript数据类型JS有6种数据类型，可以通过关键词typeof检测。 Undefined类型 只有一个值undefined。 Null类型 只有一个值null，undefined派生于null，typeof null检测null会返回boject。 Boolean类型 只有true与false。 Number类型 NaN(Not a number)是一个特殊的数值，表示一个本来要返回数值的操作数未返回数值的情况。 String类型 与Python类似，用双引号或者单引号都OK。 Object类型 ECMAScript的对象其实就是一组数据和功能的集合，可以通过new操作符创建，后续会讲到。 JavaScript语句JS很多语句都和Java类似，这里就只列举JS独有的语句 for-in语句1234for(var propName in window) &#123; document.write(propName);&#125;// 枚举BOM中window对象的所有属性，顺序不可预测 for-in语句是一种精准的迭代语句，可以用来枚举对象的属性。 label语句与Java类似，在代码中添加标签以便将来使用，多用于for语句等循环语句1234start: for (var i=0; i &lt; count; i++)&#123; alert(i); &#125;// start标签可以在将来由break或continue语句引用 with语句将代码的作用于设置到一个特定的对象中123var qs = location.search.substring(1);var hostName = location.hostname;var url = location.href; 等价于下面代码12345with(location) &#123; var qs = search.substring(1); var hostName = hostname; var url = href;&#125; JavaScript函数123function functionName(arg0, arg1, arg2, ... ,argN) &#123; statements;&#125; 理解参数ECMAScript函数的参数与大多数其他语言函数的参数不同，ECMAScript函数不介意传递进来多少个参数，也不在乎传进来参数是什么类型的。即使你定义的函数只接受两个参数，在调用这个函数的时候传递多少个也没问题，原因是ECMAScript中参数在内部是用一个数组来表示的，函数接受到的始终都是这个数组，实际上可以在函数体内通过arguments对象来访问这个数组，从而获取传递给函数的每一个参数。 ECMAScript所有参数传递都是值传递，不可能通过引用传递参数，对于引用数据类型，其值就是其引用 没有重载对于同一名字的多个函数，该名字只属于最后定义的]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java基础之集合]]></title>
    <url>%2F2018%2F07%2F13%2FJava%E5%9F%BA%E7%A1%80%E4%B9%8B%E9%9B%86%E5%90%88%2F</url>
    <content type="text"></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java基础之初窥反射]]></title>
    <url>%2F2018%2F06%2F19%2FJava%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%88%9D%E7%AA%A5%E5%8F%8D%E5%B0%84%2F</url>
    <content type="text"><![CDATA[前言:之前写安卓的时候有遇到过反射,但是当时怎么都不理解,现在正好借此机会初步了解一下反射 什么是反射 Reflection enables Java code to discover information about the fields, methods and constructors of loaded classes, and to use reflected fields, methods, and constructors to operate on their underlying counterparts, within security restrictions.The API accommodates applications that need access to either the public members of a target object (based on its runtime class) or the members declared by a given class. It also allows programs to suppress default reflective access control. 简单来说,反射能够分析类能力,他可以做以下几件事: 在运行时分析类的能力 在运行时查看对象,例如,写一个toString方法供所有类使用 实现通用的数组操作代码 利用Method对象(类比C中的函数指针) 获得对象的Class类反射比较重要的一点是获得对象的类,对象的类是一个Class对象(但不是所有Class对象都是一种类,例如int也是Class对象) 以下是三种获得Class类的方法1234// 第一种:通过对象.getClass()获得Employee e;...Class cl = e.getClass(); 1234567// 第二种:通过Class类的静态方法forName()获得try &#123; String className = "java.util.Random"; Class cl = Class.forName(className);&#125; catch (Execption e) &#123; e.printStackTrace();&#125; 1234// 第三种:通过T.class获得(T是任意Java类型)Class cl1 = Random.class;Class cl2 = int.class;Class cl3 = Double[].class; Class类的一些常用方法getName() Returns the name of the entity (class, interface, array class, primitive type, or void) represented by this Class object, as a String. 123Employee e;...System.out.println(e.getClass().getName()); newInstance() Creates a new instance of the class represented by this Class object. 123Employee e;e.getClass().newInstance();// 调用默认的构造函数,如果要传参,请使用Constructor类的newInstance(Objcet[] args)方法 getMethod() Modifier and Type Method and Description Method getMethod(String name, Class&lt;?&gt;… parameterTypes) &nbsp; Returns a Method object that reflects the specified public member method of the class or interface represented by this Class object. e.g. 获得Employee的raiseSalary方法 Method m1 = Employee.class.getMethod(&quot;raiseSalary&quot;, double.class); getDeclaredFields() Returns an array of Field objects reflecting all the fields declared by the class or interface represented by this Class object. getDeclaredMethods() Returns an array containing Method objects reflecting all the declared methods of the class or interface represented by this Class object, including public, protected, default (package) access, and private methods, but excluding inherited methods. getDeclaredConsstructors() Returns an array of Constructor objects reflecting all the constructors declared by the class represented by this Class object. getDeclaredFields()与getFields()的区别getFields()返回一个包含Field对象的数组,这些对象记录了这个类或其超类的公有域,而getDeclaredFields()的对象记录了这个类的全部域类比Methods与Constructors 反射包中重要类的简单描述在java.lang.reflect包中有三个类Field,Method,和Constructor分别用于描述类的域,方法和构造器 FieldField用于描述类的域,常见的方法有 Modifier and Type Method and Description Object get(Object obj) &nbsp; Returns the value of the field represented by this Field, on the specified object. void set(Object obj, Object value) &nbsp; Sets the field represented by this Field object on the specified object argument to the specified new value. int getModifiers() &nbsp; Returns the Java language modifiers for the field represented by this Field object, as an integer. Class&lt;?&gt; getType() &nbsp; Returns a Class object that identifies the declared type for the field represented by this Field object. String getName() &nbsp; Returns the name of the field represented by this Field object. Method Modifier and Type Method and Description String getName() &nbsp; Returns the name of the method represented by this Method object, as a String. Class&lt;?&gt; getReturnType() &nbsp; Returns a Class object that represents the formal return type of the method represented by this Method object. int getModifiers() &nbsp; Returns the Java language modifiers for the field represented by this Field object, as an integer. Class&lt;?&gt;[] getParameterTypes() &nbsp; Returns an array of Class objects that represent the formal parameter types, in declaration order, of the executable represented by this object. Object invoke(Object obj, Object… args) &nbsp; Invokes the underlying method represented by this Method object, on the specified object with the specified parameters. Constructor Modifier and Type Method and Description String getName() &nbsp; Returns the name of this constructor, as a string. Class&lt;?&gt;[] getParameterTypes() &nbsp; Returns an array of Class objects that represent the formal parameter types, in declaration order, of the executable represented by this object. int getModifiers() &nbsp; Returns the Java language modifiers for the field represented by this Field object, as an integer. 利用反射分析类的能力12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485public class ReflectionTest &#123; public static void main(String[] args) &#123; String name; if (args.length &gt; 0) name = args[0]; else &#123; Scanner in = new Scanner(System.in); System.out.println("Enter class name (e.g. java.util.Date):"); name = in.next(); &#125; try &#123; Class cl = Class.forName(name); Class supercl = cl.getSuperclass(); String modifiers = Modifier.toString(cl.getModifiers()); if (modifiers.length() &gt; 0) System.out.print(modifiers + " "); System.out.print("class " + name); if (supercl != null &amp;&amp; supercl != Object.class) System.out.print(" extends " + supercl.getName()); System.out.print("\n&#123;\n"); printConstructors(cl); System.out.println(); printMethods(cl); System.out.println(); printFields(cl); System.out.println("&#125;"); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; System.exit(0); &#125; public static void printConstructors(Class cl) &#123; Constructor[] constructors = cl.getDeclaredConstructors(); for (Constructor c : constructors) &#123; String name = c.getName(); System.out.print(" "); String modifiers = Modifier.toString(c.getModifiers()); if (modifiers.length() &gt; 0) System.out.print(modifiers + " "); System.out.print(name + "("); Class[] paramTypes = c.getParameterTypes(); // 构造器的参数是Class类型 for (int j = 0; j &lt; paramTypes.length; j++) &#123; if (j &gt; 0) System.out.print(", "); System.out.print(paramTypes[j].getName()); &#125; System.out.println(");"); &#125; &#125; public static void printMethods(Class cl) &#123; Method[] methods = cl.getDeclaredMethods(); for (Method m : methods) &#123; Class retType = m.getReturnType(); // 方法的返回值是Class类型,注意:int等基本数据类型也是Class类型 String name = m.getName(); System.out.print(" "); String modifiers = Modifier.toString(m.getModifiers()); if (modifiers.length() &gt; 0) System.out.print(modifiers + " "); System.out.print(retType.getName() + " " + name + "("); // 这里返回了int, boolean等 Class[] paramTypes = m.getParameterTypes(); for (int j = 0; j &lt; paramTypes.length; j++) &#123; if (j &gt; 0) System.out.print(", "); System.out.print(paramTypes[j].getName()); &#125; System.out.println(");"); &#125; &#125; public static void printFields(Class cl) &#123; Field[] fields = cl.getDeclaredFields(); for (Field f : fields) &#123; Class type = f.getType(); // Returns a Class object that identifies the declared type for the field represented by this Field object. String name = f.getName(); System.out.print(" "); String modifiers = Modifier.toString(f.getModifiers()); if (modifiers.length() &gt; 0) System.out.print(modifiers + " "); System.out.println(type.getName() + " " + name + ";"); &#125; &#125;&#125; 在运行时使用反射分析对象上面讲的是如何查看任意对象的数据域名称和类型,这次进一步查看数据域的实际内容12345Employee harry = new Employee("Harry Hacker", 35000, 10, 1 1989);Class cl = harry.getClass();Field f = cl.getDeclaredField("name");f.setAccessible(true);Object v = f.get(harry) // the value of v is "Harry Hacker" 上面是一个获得对象域的例子,注意反射机制默认受限于Java的访问控制,可以通过以下方法覆盖访问控制 f.setAccessible(true) Field继承自AccessibleObject,可通过其父类方法setAccessible()设置权限 AccessibleObject.setAccessible(fields, true) 调用静态方法对fields设置权限(见下面代码) 下面是一个通用的toString方法12345678910111213141516public class ObjectAnalyzerTest &#123; public static void main(String[] args) &#123; ArrayList&lt;Integer&gt; squares = new ArrayList&lt;&gt;(); String[] ss = &#123;"a", "b", "c"&#125;; for (int i = 1; i &lt;= 5; i++) &#123; squares.add(i * i); &#125; ObjectAnalyzer objectAnalyzer = new ObjectAnalyzer();// System.out.println(objectAnalyzer.toString(ss)); System.out.println(objectAnalyzer.toString(squares));// System.out.println(new ObjectAnalyzer().toString(12345));// System.out.println(new ObjectAnalyzer().toString("test"));// System.out.println(new ObjectAnalyzer().toString(null)); &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546public class ObjectAnalyzer &#123; private ArrayList&lt;Object&gt; visited = new ArrayList&lt;&gt;(); // 循环引用可能导致无限递归 public String toString(Object obj) &#123; if (obj == null) return "null"; if (visited.contains(obj)) return "..."; visited.add(obj); Class cl = obj.getClass(); if (cl == String.class) return (String)obj; if (cl.isArray()) &#123; String r = cl.getComponentType() + "[]&#123;"; // getComponentType() Returns the Class representing the component type of an array. for (int i = 0; i &lt; Array.getLength(obj); i++) &#123; if (i &gt; 0) r += ","; Object val = Array.get(obj, i); if (cl.getComponentType().isPrimitive()) r += val; else r += toString(val); &#125; return r + "&#125;"; &#125; String r = cl.getName(); do &#123; r += "["; Field[] fields = cl.getDeclaredFields(); AccessibleObject.setAccessible(fields, true); for (Field f : fields) &#123; if (!Modifier.isStatic((f.getModifiers()))) &#123; // 静态域舍弃 if (!r.endsWith("[")) r += ","; r += f.getName() + "="; try &#123; Class t = f.getType(); Object val = f.get(obj); if (t.isPrimitive()) r += val; // 如果为原始数据类型则直接添加 else r += toString(val); // 否则递归调用 &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; &#125; r += "]"; cl = cl.getSuperclass(); &#125; while (cl != null); return r; &#125;&#125; 使用反射编写泛型数组代码123456789101112131415161718192021222324252627282930public class CopyOfTest &#123; public static void main(String[] args) &#123; int[] a = &#123; 1, 2, 3 &#125;; a = (int[]) goodCopyOf(a, 10); System.out.println(Arrays.toString(a)); String[] b = &#123; "Tom", "Dick", "Harry" &#125;; b = (String[]) goodCopyOf(b, 10); System.out.println(Arrays.toString(b)); &#125; // int[]无法转换为Object[] public static Object[] badCopyOf(Object[] a, int newLength) &#123; Object[] newArray = new Object[newLength]; System.arraycopy(a, 0, newArray, 0, Math.min(a.length, newLength)); return newArray; &#125; public static Object goodCopyOf(Object a, int newLength) &#123; Class cl = a.getClass(); if (!cl.isArray()) return null; Class componentType = cl.getComponentType(); // Returns the Class representing the component type of an array. int length = Array.getLength(a); Object newArray = Array.newInstance(componentType, newLength); System.arraycopy(a, 0, newArray, 0, Math.min(length, newLength)); return newArray; &#125;&#125; 注意getComponentType()是Class的方法而不是Array的方法Array.newInstance()返回Object对象 调用任意方法类似C语言的函数指针,通过Java的反射机制可以调用任意方法 Object invoke(Object obj, Object... args)第一个参数是隐式参数,其余的对象提供了显示参数,对于静态方法,第一个参数可以被忽略,即设置为null,e.g. ml是一个Method,代表Employee的getName方法,harry是一个Employee对象String n = (String) ml.invoke(harry) // 调用harry的getName()方法method.invoke(a, s); // 调用a的method方法,参数为smethod.invoke(null, s); // 调用静态method方法,参数为s注意invoke返回的是Object 而获得方法可以通过Class cl = harry.getClass()cl.getMethod(String name, Class&lt;?&gt;... parameterTypes) 一个使用invoke的例子123456789101112131415161718192021222324252627282930public class MethodTableTest &#123; public static void main(String[] args) &#123; try &#123; Method square = MethodTableTest.class.getMethod("square", double.class); Method sqrt = Math.class.getMethod("sqrt", double.class); printTable(1, 10, 10, square); printTable(1, 10, 10, sqrt); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; public static double square(double x) &#123; return x * x; &#125; public static void printTable(double from, double to, int n, Method f) &#123; System.out.println(f); double dx = (to - from) / (n - 1); for (double x = from; x &lt;= to; x += dx) &#123; try &#123; double y = (Double) f.invoke(null, x); System.out.printf("%10.4f | %10.4f%n", x, y); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; &#125;&#125; 后言:这次仅仅是跟着课本尝试了一下反射,以后有了相应的基础后会深入理解反射的机制]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Object,所有类的超类]]></title>
    <url>%2F2018%2F06%2F03%2FObject-%E6%89%80%E6%9C%89%E7%B1%BB%E7%9A%84%E8%B6%85%E7%B1%BB%2F</url>
    <content type="text"><![CDATA[Object类是Java中所有类的超类,在Java中每个类都由它扩展而来Object类的方法如下 其中最为关键的3个方法为equals(),hashCode()和toString() equals方法官方文档 在文档中说到,equals用于检测一个对象是否等于另一个对象,该方法必须有以下5个特性: 自反性:对任意非空引用x,&nbsp;&nbsp;&nbsp;x.equals(x)&nbsp;&nbsp;必须返回true 对称性:对任意非空引用x,y,&nbsp;&nbsp;x.equals(y)&nbsp;&nbsp;返回true当且仅当&nbsp;&nbsp;y.equals(x)&nbsp;&nbsp;返回true 传递性:对任意非空引用x,y,z,如果&nbsp;&nbsp;x.equals(y)&nbsp;&nbsp;返回true并且&nbsp;&nbsp;y.equals(x)&nbsp;&nbsp;返回true,则&nbsp;&nbsp;x.equals(z)&nbsp;&nbsp;返回true 一致性:如果x和y引用的对象没有发生变化,反复调用&nbsp;&nbsp;x.equals(y)&nbsp;&nbsp;应该返回同样的结果 对于任意非空引用x,&nbsp;&nbsp;x.equals(y)&nbsp;&nbsp;应该返回false Object类的equals方法而Object类中的默认的equals方法如下123public boolean equals(Object obj) &#123; return (this == obj);&#125; 自定义类的equals方法如果两个对象具有相同的引用,则返回true,否则返回false,这是最经济的符合以上5个特性的equals方法了,但是很多时候这种判断并没有什么意义,更多时候我们要判断对象是否相等,需要检测他们状态的相等性,如果两个对象的状态相等,则认为他们是相等的,比如有一个雇员Employee类,如果两个雇员对象的姓名,薪水和雇佣日期都相等,则认为他们是相等的,那么雇员类的equals方法可以如下(完整的Employee类请见最后)1234567891011121314 public boolean equals(Object otherObject) &#123; if (this == otherObject) return true; // 先判断这两个对象是否具有相同的引用 if (otherObject == null) return false; // 然后判断otherObject是否为null if (getClass() != otherObject.getClass()) return false; // 使用getClass()判断是否为同一类 Employee other = (Employee) otherObject; // 把Object类转换成Employee类 return Objects.equals(name, other.name) // 详细比较他们的域 &amp;&amp; salary == other.salary &amp;&amp; Objects.equals(hireDay, other.hireDay); &#125;&#125; Employee类的equals方法代码解释代码中使用&nbsp;Objects.equals(name, other.name)&nbsp;是为了防备name和hireDay可能为null的情况,下面是Objects类的equals方法,当对象a和b都是null,则返回true,如果其中一个是null则返回false,否则调用a.equals(b)123public static boolean equals(Object a, Object b) &#123; return (a == b) || (a != null &amp;&amp; a.equals(b));&#125; 在是否为同一类的比较中,,除了&nbsp;&nbsp;if (getClass() != otherObject.getClass()) return false;&nbsp;&nbsp;这个判断外,还可以使用&nbsp;&nbsp;if (!(otherObject instanceof Employee)) return false;&nbsp;&nbsp;来判断,但是使用instanceof判断没有解决otherObject是子类的情况(&nbsp;子类引用 instanceof 父类&nbsp;返回true,但反过来则返回false,不符合对称性)所以,使用getClass()与instanceof可以根据下面情况判断: 如果子类能够拥有自己的相等概念,则对称性需求将强制性采用getClass进行检测 如果由超类决定相等的概念(比如Employee与其子类Manager中使用Employee类的成员ID来判断是否相等),那么就可以使用instanceof进行检测 完美的equals方法 显示参数命名为otherObject,稍后强制类型转换为变量other 检测this与ohetObject是否引用同一对象 检测ohterObject是否为null,如果为null返回false 比较this与otherObject是否属于同一类,根据相等概念由父类还是子类决定用getClass()还是instanceof检测 将ohterObject转换为相应的类类型变量 开始对需要比较的域进行比较,对于对象的比较,用Objects.equals(field, other.field) 子类中的equals方法12345public boolean equals(Object otherObject) &#123; if (!super.equals(otherObject)) return false; Manager other = (Manager) otherObject; return bonus == other.bonus; &#125; 先调用super.equals(otherObject)检测父类元素是否相等,然后再比较子类的域 其他对于数组类型的域,使用静态方法Arrays.equals方法判断 hashCode方法散列码hashCode是由对象导出的一个整型值,不同的对象散列码一般不会相同 官方文档根据说明我们可以得知: 只要在Java应用程序执行过程中多次调用同一对象时，hashCode方法就必须始终返回相同的整数，前提是未修改对象的等同比较中使用的信息。 该整数不需要从应用程序的一次执行到同一应用程序的另一次执行保持一致。 如果两个对象由equals方法得到的结果为true，则对这两个对象中的每个对象调用hashCode方法必须产生相同的整数结果。 根据equals方法，如果两个对象不相等，则不要求对两个对象中的每一个调用hashCode方法都必须生成不同的整数结果。 但是，程序员应该意识到，为不相等的对象生成不同的整数结果可能会提高散列表的性能。 Object类中的hashCode方法在源码中,hashCode()不是由Java代码生成的,它返回的值为对象的存储地址,这里就不赘述了 自定义类的hashCode方法如果要重新定义equals方法,则必须重新定义hashCode方法equals方法与什么成员有关,hashCode也必须与该成员有关e.g:如果equals方法与Employee类的salary,hireDay,name相关,则Employee的hashCode方法可以定义如下 123456public int hashCode() &#123; return 7 * Objects.hashCode(name) + 11 * Double.hashCode(salary) + 13 * Objects.hashCode(hireDay);// 如果成员为数组,则使用Arrays.hashCode()&#125; 或者使用Objects.hash(Object… values)123public int hashCode() &#123; return Objects.hash(name, salary, hireDay);&#125; Objects.hashCode(Object o)是null安全的,当参数为null则返回0,否则返回对参数调用Object.hashCode()的结果注意:只有一个参数的时候不要使用Objects.hash(),而是Objects.hashCode(Object o)或者Doubles.hashCode(Double d) Objects.hash(Object… values)源码123public static int hash(Object... values) &#123; return Arrays.hashCode(values);&#125; Arrays.hashCode(Object a[])源码1234567891011public static int hashCode(Object a[]) &#123; if (a == null) return 0; int result = 1; for (Object element : a) result = 31 * result + (element == null ? 0 : element.hashCode()); return result; &#125; toString方法toString()方法返回表示对象值的字符串 官方文档 Object类的toString方法123public String toString() &#123; return getClass().getName() + "@" + Integer.toHexString(hashCode());&#125; 他返回 getClass().getName() + &#39;@&#39; + Integer.toHexString(hashCode()) toString()为什么随处可见只要对象与一个字符串通过操作符”+”连接起来,Java编译就会自动调用toString方法 数组的toString方法数组继承了Object类的toString,仍会像Object类那样输出字符串,大概输出如下[I@1a46e30]这不符合我们的预期,修正方法如下: Arrays.toString()调用静态方法Arrays.toString(),返回对象大概为[2,3,5,7,11,13]如果想要打印多维数组,调用 Arrays.deepToString() 测试类Employee与Manager的源代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354import java.time.LocalDate;import java.util.Objects;public class Employee &#123; private String name; private double salary; private LocalDate hireDay; public Employee(String n, double s, int year, int month, int day) &#123; name = n; salary = s; hireDay = LocalDate.of(year, month, day); &#125; public String getName() &#123; return name; &#125; public double getSalary() &#123; return salary; &#125; public LocalDate getHireDay() &#123; return hireDay; &#125; public void raiseSalary(double byPercent) &#123; double raise = salary * byPercent / 100; salary += raise; &#125; public boolean equals(Object otherObject) &#123; if (this == otherObject) return true; if (otherObject == null) return false; if (getClass() != otherObject.getClass()) return false; Employee other = (Employee) otherObject; return Objects.equals(name, other.name) &amp;&amp; salary == other.salary &amp;&amp; Objects.equals(hireDay, other.hireDay); &#125; public int hashCode() &#123; return 7 * Objects.hashCode(name) + 11 * Double.hashCode(salary) + 13 * Objects.hashCode(hireDay); &#125; /* public int hashCode() &#123; * return Objects.hash(name, salary, hireDay); * &#125; * */ public String toString() &#123; return getClass().getName() + "[name = " + name + ",salary = " + salary + ",hireDay = " + hireDay + "]"; &#125;&#125; 1234567891011121314151617181920212223242526272829303132public class Manager extends Employee &#123; private double bonus; public Manager(String n, double s, int year, int month, int day) &#123; super(n, s, year, month, day); bonus = 0; &#125; public double getSalary() &#123; double baseSalary = super.getSalary(); return baseSalary + bonus; &#125; public void setBonus(double b) &#123; bonus = b; &#125; public boolean equals(Object otherObject) &#123; if (!super.equals(otherObject)) return false; Manager other = (Manager) otherObject; return bonus == other.bonus; &#125; public int hashCode() &#123; return super.hashCode() + 17 * Double.hashCode(bonus); &#125; public String toString() &#123; return super.toString() + "[bonus = " + bonus + "]"; &#125;&#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Object</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java继承之子类访问父类的私有域]]></title>
    <url>%2F2018%2F06%2F01%2FJava%E7%BB%A7%E6%89%BF%E4%B9%8B%E5%AD%90%E7%B1%BB%E8%AE%BF%E9%97%AE%E7%88%B6%E7%B1%BB%E7%9A%84%E7%A7%81%E6%9C%89%E5%9F%9F%2F</url>
    <content type="text"><![CDATA[在类的继承中,子类可以访问父类的公有方法和域,但对于父类的私有成员则不能访问,但很多情况下,子类也应当拥有父类的私有属性,例如一个雇员Employee有名字,薪资,雇佣时间等属性,经理Manager也属于雇员,那么经理也应当有名字,薪资,雇佣时间等,那么问题就来了,子类如何才能使用父类的私有成员?请看下面代码123456789101112131415161718public class Father &#123; private int a; // 默认构造方法,如果没有此方法,子类构造器第一句必须调用super() public Father() &#123; &#125; public Father(int a) &#123; this.a = a; &#125; public int getA() &#123; return a; &#125; public void setA(int a) &#123; this.a = a; &#125;&#125; 1234567891011121314151617public class Son extends Father&#123; public Son() &#123; // 如果子类没有显式调用super(),则自动调用父类默认(没有参数)的构造器,如果父类没有默认构造器,则报错 &#125; public Son(int a) &#123; super(a); // super()必须是子类构造器的第一句 &#125; public static void main(String[] args) &#123; Son son1 = new Son(); son1.setA(123); // 第一种给父类成员赋值的方法,调用setter() Son son2 = new Son(234); // 第二种给父类成员赋值的方法,构造器初始化 System.out.println(son.getA()); // 调用getter()获取父类成员 &#125;&#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>继承</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[让类实现for-each loop:Iterable与Iterator接口]]></title>
    <url>%2F2018%2F06%2F01%2FIterable%E4%B8%8EIterator%2F</url>
    <content type="text"><![CDATA[Interface Iterable&lt;T&gt;根据Java API上写: Implementing this interface allows an object to be the target of the “for-each loop” statement. 也就是说,实现该接口可以让类实现for循环阅读Iterable源码,该接口有3个方法 Modifier,Type and Method Description public interface Iterable&lt;T&gt; &nbsp; default void forEach(Consumer action) Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception. Iterator&lt;T&gt; iterator() Returns an iterator over elements of type T. default Spliterator spliterator() Creates a Spliterator over the elements described by this Iterable. 可以知道,实现该接口,我们只需要实现Iterator iterator()由API: Iterator iterator()Returns an iterator over elements of type T.Returns:an Iterator. 我们只需要返回一个Iterator对象就可以了 Interface IteratorJava API中说到: An iterator over a collection. Iterator takes the place of Enumeration in the Java Collections Framework. Iterators differ from enumerations in two ways:Iterators allow the caller to remove elements from the underlying collection during the iteration with well-defined semantics.Method names have been improved. 其实就是一个迭代器啦… Modifier,Type and Method Description public interface Iterator&lt;E&gt; &nbsp; default void forEachRemaining(Consumer action) Performs the given action for each remaining element until all elements have been processed or the action throws an exception. boolean hasNext() Returns true if the iteration has more elements. E next() Returns the next element in the iteration. default void remove() Removes from the underlying collection the last element returned by this iterator (optional operation). 可以知道,实现该接口,只要实现next()与hasNext(),当有remove()需求时,也要实现该方法. 下面是具体实现1.类名中加上implements Iterable1public class ClassName&lt;E&gt; implements Iterable&lt;E&gt; 2.实现Iterator iterator(),返回Iterator对象1public Iterator&lt;E&gt; iterator() &#123; return new MyIterator&lt;E&gt;(); &#125; 3.实现内部类MyIterator1234567891011121314private class MyIterator&lt;E&gt; implements Iterator&lt;E&gt; &#123; public boolean hasNext() &#123; //return true if the iteration has more elements &#125; public E next() &#123; if (!hasNext()) throw NoSuchElementException(); // returns the next element in the iteration &#125; public void remove() &#123; throw new UnsupportedOperationException(); &#125;&#125; 对Iterator的next()与remove()方法的解释Java的迭代器认为是位于两个元素之间的,当调用next()的时候,迭代器就会越过下一个元素,并返回越过的元素的引用 即如果要用remove()连续删除2个相邻的元素1234Iterator&lt;String&gt; it = instance.iterator(); // 假设instance是实现了Iterable接口的类的实例,泛型指定为Stringit.next();it.remove();it.remove(); // error! 上面的是不行的,因为Java的迭代器并不像C++根据数组索引建模的,在Java迭代器中,查找操作与位置变更是紧密相连的,查找一个元素的唯一方法是调用next(),而执行查找操作的同时,迭代器的位置随之向前移动12345Iterator&lt;String&gt; it = instance.iterator(); // 假设instance是实现了Iterable接口的类的实例,泛型指定为Stringit.next();it.remove();it.next();it.remove(); // OK 调用next()的过程见下图]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Iterable</tag>
        <tag>Iterator</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaDoc与Jar]]></title>
    <url>%2F2018%2F06%2F01%2FJavaDoc%E4%B8%8EJar%2F</url>
    <content type="text"><![CDATA[使用JavaDoc生成文档1javadoc -d 目录名 -encoding UTF-8 -charset UTF-8 xxx.java java内格式： /** 文档内容 / @author : 对类的说明，表明开发该类模块的作者 @version : 对类的说明，表明该模块版本 @see : 对类，属性，方法的说明，参考转向，也就是相关主题 @param : 对方法的说明，对方法中某参数的说明 @return : 对方法的说明，对方法返回值的说明 @exception : 对方法的说明，对方法可能抛出的异常进行说明 下为《算法》中StdRandom.java源码的注释与文档效果 使用jar打包（1）编译 javac A.java （2）打包 jar cvfm A.jar A.man A.class ——c表示创建(create)，v表示显示详情(verbose)，f表示指定文件名，m表示清单文件（3）运行 java -jar A.jar 其中A.man是清单文件（manifest），内容如下：·Manifest-Version：1.0Class-Path：.Main-Class：A]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JavaDoc</tag>
        <tag>Jar</tag>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
