<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[文件管理]]></title>
    <url>%2F2019%2F05%2F11%2F%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[文件管理文件的相关基本概念数据项：文件系统中最低级的数据组织形式，分为基本数据项和组合数据项，基本数据项用于描述一个对象的某种属性的字符集，是可命名的最小逻辑数据单位，又称为字段，例如，用于描述学生的基本数据项有：学号，姓名等；组合数据项是若干基本数据项的组成；数据项还应有数据类型 记录：记录是一组相关数据项的集合，用于描述一个对象在某方面的属性，一个记录应包含哪些数据项取决于需要描述对象的哪个方面。例如，一个学生，当把他作为班上一个学生时，对他的描述为学号，姓名，年龄，所在系班，若把学生当作医疗对象则不同。唯一标识记录的数据项是关键字 文件：文件是由创建者所定义的，具有文件名的一组相关元素的集合，分为有结构文件和无结构文件，有结构文件中，文件由若干个相关记录组成，而无结构文件被看成是一个字符流，文件在文件系统是一个最大的数据单位，它描述了一个对象集，例如可以将一个班的学生记录作为一个文件 文件属性可以包括：文件类型，文件长度，文件的物理位置，文件的建立时间（最后一次的修改时间等） 文件类型文件类型按用途分类可分为系统文件，用户文件和库文件按文件中数据的形式分类可分为源文件，目标文件和可执行文件按存取控制属性分类可分为只执行文件，只读文件，读写文件按组织形式和处理方式分类可分为普通文件，目录文件和特殊文件 文件系统文件系统的模型是指文件和对文件进行操纵和管理的软件集合 分为三层：对象及属性，对文件进行操纵和管理的软件集合，文件系统接口 对象及其属性层文件管理系统管理的对象如下： 文件 目录 磁盘存储空间 对对象操纵和管理的软件集合层该层是文件管理系统的核心部分，文件系统的功能大多是这一层实现，其中包括对文件存储空间的管理，对文件目录的管理，用于将文件的逻辑地址转换为物理地址的机制，对文件的读写管理，对文件的共享保护等功能 一般把与文件系统有关的软件分为4个层次： I/O控制层：磁盘驱动程序等组成 基本文件系统层：内存与磁盘之间数据块的交换 基本I/O管理程序：完成与磁盘I/O有关的事务，如文件逻辑块号转换为物理块号等 逻辑文件系统：用于处理与记录和文件相关的操作，如允许用户使用符号文件名访问文件及记录等 文件系统接口文件系统提供了命令接口和程序接口 文件逻辑结构文件的逻辑结构是从用户观点出发所观察到的文件组织形式，即文件是由一系列逻辑记录组成的，是用户可以直接处理的数据及其结构，独立于文件的物理特性，又称为文件组织 文件的物理结构又称为文件的存储结构，是指系统将文件存储在外存上所形成的一种存储组织形式，用户是不能看见的 物理结构和逻辑结构都会影响对文件的检索速度 下图是文件结构类型的概述 逻辑结构的类型文件按有无结构分为有结构文件和无结构文件 有结构文件根据记录长度分为定长和不定长两类，定长指文件的所有记录长度都是相同的，所有记录的各数据项都处在记录中相同的位置，具有相同的顺序和长度，定长记录有效提高检索记录的速度和效率，方便对文件处理和修改，文件长度用记录数目来表示；变长记录指文件中各记录长度不相同 有结构文件按文件组织方式分为 顺序文件：由一系列记录按某种顺序排列形成的文件，记录通常是定长记录（变长记录查询速度慢，不支持随机访问和删除插入记录） 索引文件：可变长记录文件建立一张索引表，为每个记录设置一个表项，加速对记录的检索 索引顺序文件：顺序文件和索引文件的结合，在为每个文件建立一张索引表时，并不是为每个记录建立索引表项，而是为一组记录中的第一个记录建立一个索引表项 无结构文件是流式文件，信息管理系统和数据库系统中广泛采用了有结构的文件形式，而源程序，可执行文件，库函数等采用的就是无结构文件，长度是以字节为单位，可以把流式文件看作记录式文件的一个特例：一个记录仅有一个字节 顺序文件顺序文件可以按照串结构或顺序结构排列，串结构指按存入时间的先后进行排序，各记录之间的顺序与关键字无关，对串结构文件检索比较费时，顺序结构是由用户指定一个字段作为关键字，文件中所有记录可以按关键字排序，具有更高的检索速度 索引文件为变长记录建立一个索引表，对主文件的每个记录在索引表中设有一个相应表项，用于记录该记录的长度L，以及指向该记录的指针 索引文件是可以实现直接存取的，索引文件支持随机访问 索引顺序文件索引顺序文件保留了顺序文件的关键字顺序，又增加了文件索引表和溢出文件，溢出文件用来记录新增加的，删除的和修改的记录 一级索引顺序文件将变长记录顺序文件的所有记录分为若干组，为顺序文件建立一张索引表，并为每组的第一个记录，在索引表建立一个索引项，其中包含该记录的关键字和指向该记录的指针 对索引顺序文件检索时，先利用提供的关键字以及某种查找算法去检索索引表，找到该记录所在记录组第一个记录的表项，从中得到该记录组第一个记录在主文件的位置，然后再利用顺序查找法去查找主文件，从中找到所要求的记录 直接文件和哈希文件直接文件直接文件可以根据给定的关键字直接获得记录的物理地址，即关键字本身就决定了记录的物理地址，由关键字到记录物理地址的转换称为键值转换，而上述的索引文件实质是对关键字计算得到对应索引表表项的物理地址，由该物理地址得到指向对应记录的指针 哈希文件利用哈希函数将关键字转换为相应记录的地址 文件的物理结构物理结构是从实现的观点出发，文件在外存上的存放组织形式，有如下三种物理结构 连续结构 链接结构 索引结构 目录管理对目录管理的要求 实现”按名存取”：用户只须向系统提供所需访问的文件的名字，便能快速准确地找到指定文件在外存地存储位置，这是目录管理最基本地功能 提高对目录的检索速度 文件共享：允许多个用户共享一个文件，这样只须在外存中保留一份该文件副本供不同用户使用，节省存储空间，提高利用率 允许文件重名：允许不同用户对不同文件采取相同的名字 文件控制块FCB文件目录：文件控制块的有序集合，即一个文件控制块就是一个文件目录项，通常一个文件目录被看成是一个文件，称为目录文件 文件控制块：描述和控制文件的数据结构，文件与文件控制块一一对应，一个文件控制块就是一个文件目录项（文件目录是文件控制块的有序集合），包含基本信息，存取控制信息和使用信息，可以分为内存FCB和外存FCB 它们的关系：文件控制块与文件一一对应，而文件目录是有结构文件，其中的每一个记录都是一个文件控制块 检索过程：检索的时候，把文件目录调入内存，查找其目录项，找到与给定的文件名对应的文件名，读出其物理地址 基本信息类 文件名 文件物理位置 文件逻辑结构：流式还是有结构，记录数，定长记录还是变长记录等 文件物理结构：顺序还是链接还是索引 存取控制信息类文件主，核准用户和一般用户的存取权限 使用信息类 文件建立日期和时间 上一次修改的日期和时间 当前使用信息（已打开文件的进程数，是否被锁等等） 索引结点OS中每有一个目录，就有一个FCB 引入：文件目录占空间，检索目录文件过程中，要把存放目录文件的第一个盘块中的目录的调入内存，然后将用户所给定的文件名与目录项的文件名一一对应，若没有找到指定文件，还需要将下一盘块的目录项调入内存。检索过程中，只用到了文件名，而没有其他描述文件的信息，仅当找到一个目录项（即其中文件名与指定要查找的文件名相匹配）时，才需从该目录项中读出该文件的物理地址，而其他一些对该文件进行描述的信息在检索目录时一概不用。显然这些信息在检索目录的时候不需要调入内存，为此，采用把文件名与文件描述信息分开的方法，即使文件描述信息单独形成一个称为索引结点的数据结构 引入后，文件目录项就不是FCB了，而是文件名+索引结点，这样可以使每个盘块可以存更多的文件目录项，减少盘块数，从而减少盘块调入内存的次数 引入索引结点前的文件目录项（FCB） 引入索引结点后的文件目录项（文件名+索引结点） 例如上图，在没有引入索引结点的时候，FCB是上图一所示，每次检索目录的时候都要把FCB调入内存，而FCB又占用比较大的空间，这样系统开销会很多，采用了上图二的文件目录项后，一个目录项只占用很小的开销（UNIX为16个字节，14字节文件名，2字节为i结点指针），可以减少磁盘启动次数，节省系统开销 我对索引结点减少磁盘启动次数的理解前提：目录文件所占盘块数为N，则检索该文件目录时平均调入盘块次数为(N+1)/2次，检索一个文件要从第一个文件目录开始检索，直到最后一个文件目录 引入索引结点可以减少磁盘启动次数，节省系统开销，主要原因是调入内存是以盘块为单位和引入索引结点后文件目录项的大小比FCB的大小要小 e.g.在文件系统中，每个盘块为256字节，文件控制块占64个字节，其中文件名占8个字节。如果索引节点编号占2个字节，对一个存放在磁盘上的128个目录项的目录，试比较引入索引节点前后，为找到其中一个文件，平均启动磁盘的次数 在引入索引结点前，每个目录项中存放的是对应文件的FCB，故128个目录项的目录总共需要占用128X64／256=32个盘块。因此，在该目录中检索到一个文件，平均启动磁盘的次数为(1+32)/2=16.5次。引入索引结点后，每个目录项中只需存放文件名和索引结点的编号，因此128个目录项的目录总共需要占用128X(8+2)／256=5个盘块。因此，找到匹配的目录项平均需要启动(1+5)／2，即3次磁盘；而得到索引结点编号后，还需启动磁盘将对应文件的索引结点读入内存，故平均需要启动磁盘4次。可见，引入索引结点后，可大大减少启动磁盘的次数，从而有效地提高检索文件的速度。 引入索引结点后的索引过程 文件目标项只存放文件名和结点号，结点号存放FCB信息 查询只调入文件名部分和结点指针，找到后才调入对应i结点指向的内容 磁盘索引结点存放在磁盘的索引结点，每个文件有唯一的磁盘索引结点，包括如下内容： 文件主标识 文件类型（正规文件，目录文件，特殊文件） 文件存取权限 文件物理地址 文件长度 文件连接计数（本文件系统所有指向该文件名的指针计数，用于共享） 文件存取时间 内存索引结点存放在内存中的索引结点，当文件被打开时，要将磁盘索引结点拷贝到内存的索引结点中方便以后使用，增加了以下内容 索引结点编号 状态 访问计数 文件所属文件系统的逻辑设备号 链接指针 单级目录结构最简单的文件目录，在整个文件系统中只建立一张目录表，每个文件占一个目录项，目录项含文件名，文件扩展名，文件长度，文件类型，文件物理地址以及其他文件属性，状态位（是否空闲） 单级目录结构不允许重名，新建文件时要检查有无同名，删除时回收块并清楚占用目录项 两级目录结构 可以为每个用户再建立一个单独的用户文件目录UFD，这些文件目录由用户所有文件的文件控制块组成，在系统中再建立一个主文件目录MFD，MFD的每个目录项为用户的目录文件 两级目录结构允许重名，但不允许用户建立自己的子目录 树形结构目录一个目录文件中目录项可以为目录文件和数据文件，允许重名，便于实现文件共享 目录查询技术当用户要访问一个已经存在的文件时，系统首先利用用户提供的文件名对目录进行查询，找出该文件的FCB或对应索引结点，然后根据FCB或索引结点中记录的文件物理地址（盘块号），换算出文件在磁盘上的物理地址，最后再通过磁盘驱动程序将所需文件读入内存 常用的目录查询方式为线性检索法和Hash方法 线性检索法 查找过程如下： 系统先读入第一个文件分量名usr，用它与根目录文件中各目录项的文件名顺序的进行比较，找到匹配者，并得到索引结点号，再从索引结点号得知物理地址号（盘块号），将该盘块132号读入内存 系统再将路径名第二个分量ast读入，与存放在132号盘块的第二级目录文件各目录项的文件名顺序比较，以此类推直到找到mbox的索引结点和物理地址 Hash方法建立一张Hash索引文件目录，利用Hash方法查询，系统利用文件名变换为文件目录的索引值，再利用该索引值到目录去查找 文件共享两种共享方式：用户直接通过路径名来访问共享文件和对需要共享的文件进行链接 文件保护 存取控制机制防止人为因素造成文件不安全 磁盘容错技术防止磁盘故障造成文件不安全 后备系统防止自然因素造成的不安全性]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>OS</tag>
        <tag>文件管理</tag>
        <tag>FCB</tag>
        <tag>索引结点</tag>
        <tag>目录管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[磁盘存储器的管理]]></title>
    <url>%2F2019%2F05%2F11%2F%E7%A3%81%E7%9B%98%E5%AD%98%E5%82%A8%E5%99%A8%E7%9A%84%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[磁盘存储器的管理磁盘存储器管理的单位是盘块 外存的组织方式文件的物理结构直接与外存的组织方式有关，不同的外存组织方式形成不同的文件物理结构 连续组织方式：为每个文件分配连续的磁盘空间 链接组织方式：为每个文件分配不连续的磁盘空间，通过链接指针将文件的所有盘块链接在一起 索引组织方式 连续组织方式特点： 顺序访问容易，速度快（磁头移动距离小） 要求连续空间，一段时间后要整理磁盘消除碎片 必须事先知道长度，文件不易动态增长和删除 文件对应目录项包含：始址，总块数，最后一块字节数 链接组织方式特点： 消除磁盘外部碎片，提高外存利用率 对插入，删除和修改记录容易 适应文件的动态增长，无需事先知道文件大小 只能顺序存取 隐式链接文件目录的每个目录项都含有指向链接文件第一个盘块和最后一个盘块的指针，只适用于顺序访问，随机访问效率低 簇：包含多个块的单位，盘块分配时以簇为单位，可以成倍减小查找指定块的时间，增大内部碎片 显示链接把用于链接文件各物理块的指针显式地存放在内存的一张链接表中，该表在整个磁盘只设置一张 表的序号是物理块号，在每个表项中存放链接指针，即下一个盘块号，凡是属于某一文件的第一个盘块号，均作为文件地址被填入相应FCB的物理地址字段，查找是在内存进行的所以速度提升且减少磁盘访问次数，该表称为文件分配表FAT 索引组织方式打开某个文件时，只要把该文件占用的索引块号读入内存即可，无需把FAT调入内存，索引的优点是支持直接访问，当要读第i块盘块时，直接从该文件的索引块中找到该盘块号 单级索引：为每个文件分配一个索引块，文件较大时有利，较小时浪费外存空间，文件较大时索引块较多，需要建立多级索引 多级索引如下 混合分配方式UNIX采用混合分配方式，一，二，多级索引合用 i.addr(0)——i.addr(9)存放直接地址，i.addr(10)存放一次间接地址，i.addr(11)存放二次间接地址 文件组织策略 文件访问通常是顺序，文件较小，用连续分配 文件较大顺序访问，链接结构 文件较大随机访问，索引结构 分配策略的小习题 文件存储空间的管理设置一个磁盘分配表，用于记住可供分配的存储空间情况，还应提供对盘块分配和回收的手段，存储空间基本分配单位都是磁盘块而非字节 空闲表法空闲表属于连续分配方式，为每个文件分配一块连续的存储空间，即系统为外存上的所有空闲区建立一张空闲表，每个空闲区对应一个空闲表项，包括表项序号，第一个盘块号，空闲盘块数等信息 空闲链表法空闲盘块链将所有空闲空间以盘块为单位拉成一条链，工作效率低 空闲盘区链将磁盘所有空闲盘区拉成一条链，每个盘区包含若干个盘块，要有指明本盘块大小的信息 位示图法利用二进制的一位来表示磁盘一个盘块的使用情况，0为盘块空闲，1为已分配 位示图法盘块的分配 顺序扫描位示图，找出一个或一组值为0的二进制位 将找到的一个或一组二进制位转换位盘块号，假定找到值为0的二进制位位于位示图第i行j列，则盘块号按下式计算：b=n(i-1)+j 修改位示图，令map[i,j]=1 位示图的回收 将回收盘块号转换为位示图的行号列号i=(b-1)DIVn+1,j=(b-1)MODn+1 修改位示图，令map[i,j]=0 成组链接法UNIX采用的方法 基本思想（汤书P281解释更详细） 空闲盘块号栈存放当前可用的一组空闲盘块号及栈中尚有的空闲盘块号数，唯一存在于内存的栈 文件区的所有空闲盘块分为若干组 每一组含有盘块总数和所有的盘块号记入前一组最后一个盘块中 第一组盘块总数和所有盘块号记入空闲盘块号栈 最末一组只有N-1各盘块 S.free(0)是栈底 空闲盘块分配首先检查空闲盘块号栈是否上锁，如未上锁，便从栈顶取出一空闲盘块号，将与之对应的盘块分配给用户，然后将栈顶指针下移一格若该盘块号已是栈底，即S.free(0)，即最后一个可分配的盘块号。 须调用磁盘读过程，将栈底盘块号所对应盘块的内容读入栈中，作为新的空闲盘块号栈的内容，然后，把原栈底对应的盘块分配出去(其中的有用数据已读入栈中) 空闲盘块的回收将回收盘块的盘块号记入空闲盘块号栈的顶部，并执行空闲盘块数加1操作。当栈中空闲盘块号数目已达100时，表示栈已满，便将现有栈中的100个盘块号，记入新回收的盘块中，再将其盘块号作为新栈底 提高磁盘I/O速度的途径 磁盘高速缓存（数据交付，置换算法，周期性写回磁盘） 提前读 延迟写 优化物理块布局 虚拟盘 数据一致性控制事务：用于访问和修改各种数据项的一个程序单位，可以看作一系列相关的读写操作，被访问的数据可以分散地存放在同一文件的不同记录中，也可放在多个文件中。只有对分布在不同位置的同一数据所进行的读和写(含修改)操作全部完成时，才能再以托付操作(Commit Operation)来终止事务。只要有一个读、写或修改操作失败，便须执行夭折操作(Abort Operation)。读或写操作的失败可能是由于逻辑错误，也可能是系统故障所导致的 事务记录 事务名：用于标识该事务的惟一名字 数据项名：它是被修改数据项的惟一名字 旧值：修改前数据项的值 新值：修改后数据项将具有的值 恢复算法undo，把所有被事务Ti修改过的数据恢复修改前的值redo，把所有被事务Ti修改过的数据设置为新值 检查点作用：使对事务记录表中事务记录的清理工作经常化]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>OS</tag>
        <tag>磁盘存储器的管理</tag>
        <tag>位示图法</tag>
        <tag>成组链接法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[设备管理]]></title>
    <url>%2F2019%2F05%2F10%2F%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[设备管理I/O系统管理的主要对象是I/O设备和相应的设备控制器，其主要任务是，完成用户提出的I/O请求，提高I/O速率，以及提高设备利用率，并为更高层的进程方便地使用这些设备提供手段 I/O系统的层次结构I/O软件组织分为4个层次 用户层I/O软件：提供库函数对I/O设备操作 设备独立性软件：实现用户程序与设备驱动器的统一接口，设备命名，保护和分配释放等 设备驱动软件：与硬件直接相关，用于具体实现系统对设备发出的操作指令 中断处理程序：用于保存被中断进程的CPU环境，转入相应的中断处理程序处理，处理完恢复现场 设备控制器设备并不是直接与CPU进行通信，而是与设备控制器通信，I/O设备应提供提供数据信号线，状态信号线和控制信号线给设备控制器 设备控制器主要功能是控制一个或多个I/O设备，实现I/O设备和计算机之间的数据交换，它是CPU与I/O设备之间的接口，接收从CPU发来的命令，去控制I/O设备工作 设备控制器基本功能 接收和识别命令 数据交换：数据总线实现CPU到控制器的交换，数据寄存器实现设备控制器到I/O设备的交换 标识和报告设备的状态 地址识别 数据缓冲区 差错控制 设备控制器的组成 设备控制器与处理机的接口：数据线地址线和控制线，实现CPU和设备控制器的通信，数据线通常与数据寄存器或者控制/状态寄存器连接，与数据寄存器连接的话是传输数据，与控制/状态寄存器连接的话是存放控制信息或设备状态信息 设备控制器与设备的接口：控制器由一个或多个设备接口，由数据，控制，状态三种信号组成 I/O逻辑：实现对设备控制，通过一组控制线与处理机交互，处理I/O命令，每当CPU启动一个设备，一方面启动命令发送给控制器，另一方面同时通过地址线把地址发送给控制器，由控制器的I/O逻辑对收到的地址译码，对所选设备控制 I/O通道引入目的：解脱CPU对I/O的组织，管理。虽然设备控制器可以减少CPU对I/O的干预，但当主机所配置的外设很多时，CPU负担仍很重，为此增加了I/O通道 I/O通道是一种特殊的执行I/O指令的处理机，与CPU共享内存，可以有自己的总线，它从CPU接收I/O指令，从内存取出要执行的通道执行程序，然后执行，完成规定I/O任务后，向CPU发中断信号 通道类型 字节多路通道：各通道以时间片轮转方式共享通道，适用于低，中速设备 数组选择通道：无子通道，仅一主通道，某时间由某设备独占，适用高速设备，利用率低 数组多路通道：多子通道按需分配，综合前面两种优点 I/O控制方式四个阶段：程序I/O——中断I/O——DMA控制——通道控制 趋势：减少CPU对I/O操作的干预，提高并行度 程序I/O控制方式：采用轮询的方式，CPU需要花代价不断查询I/O状态 中断I/O控制方式：CPU向I/O发命令然后做其他事，设备管理器按照该命令控制指定I/O，当I/O中断产生，CPU转去执行中断处理程序，CPU以字节为单位干预I/O DMA控制：由DMA控制器直接控制总线传递数据块，DMA控制器完成从I/O到内存，主要用在块设备中 通道控制：DMA控制对多离散块的读取仍需要多次中断，通道方式CPU只要给出通道程序首地址，要访问的I/O设备后，通道程序就会完成一组块操作 缓冲管理缓冲管理的目的是：组织管理，分配，释放buffer 引入： 缓和CPU与I/O设备速度不匹配的矛盾 减少对CPU的中断频率 提高CPU和I/O并行性 解决数据粒度不匹配问题（数据单元大小） 单缓冲 双缓冲 收发可双向同时传送 循环多缓冲 缓冲池 设备分配包括对设备，设备控制器和通道的分配 设备分配应考虑的若干因素 设备的固有属性：共享+虚拟，独享 分配算法：FIFO，优先权 安全性 设备独立性即设备无关性，指应用程序独立于具体使用的物理设备 设备可以分为逻辑设备和物理设备，逻辑设备名到物理设备名的映射由逻辑设备表LUT实现 分配流程：进程给出逻辑名——通过LUT得到物理设备及其driver入口 优点是设备分配更灵活，可以是多对多的映射关系，提供均衡性于容错性，提高共享性，易于实现I/O重定向（改变LUT表即可） 设备独立性软件设备独立性软件执行所有设备的公有操作，如分配回收，名字映射，保护，缓冲，差错控制等，并向用户层软件提供统一接口如read，write SPOOLING技术为了缓和CPU高速性和I/O设备低速性的矛盾，引入脱机输入，脱机输出技术，利用专门的外围控制机，将低速I/O设备上的数据，传送到高速磁盘上，或者相反。当系统引入多道程序技术后，完全可以利用其中一道程序来模拟脱机输入时外围控制机的功能，把低速I/O设备上的数据传送到高速磁盘上，再用另一道程序，模拟脱机输出时外围控制器的功能，将数据从磁盘传送到低速输出设备上，这样便可在主机的直接控制下，实现以前的脱机输入，脱机输出的功能，此时外围操作与CPU对数据的处理同时进行，我们把这种联机情况下实现的同时外围操作的技术，称为SPOOLing技术（Simultaneous Periphernal Operating Online）或称为假脱机技术 SPOOLing提供了I/O速度，将独占设备改造为共享设备，实现了虚拟设备的功能 设备处理设备驱动程序的功能： 接收I/O进程发来的命令和参数，将命令中的抽象要求转换为具体要求 检查用于I/O请求的合法性 发出I/O命令 及时响应由控制器或通道发来的中断请求，并根据中断类型调用相应的中断处理程序处理 自动构成通道程序 设备处理方式 为每一类设备设置一个进程，专门用于执行这类设备的I/O操作 整个系统设置一个I/O进程，用于执行系统中所有各类设备的I/O操作 不设置专门的设备处理进程，而为各类设备设置相应的设备处理程序，供用户或系统进程调用 磁盘存储器管理 磁盘的类型 固定头磁盘：每条磁道上都有一读/写磁头，所有磁头都被装在刚性磁臂中，通过这些磁头可访问所有磁道，并进行并行读/写，有效提高I/O速度 移动头磁盘：每一个盘面仅配一个磁头，也被装入磁臂中，该磁头能移动进行寻道，仅能串行方式读/写，I/O速度慢 磁盘访问时间 寻道时间Ts：磁臂（磁头）移动到指定磁道上所经历的时间，是启动磁臂时间s与磁头移动n条磁道所花费时间之和，Ts=m*n+s，m是常数，与磁盘驱动器速度有关 旋转延迟时间Tτ：扇区移动到磁头下面所经历的时间 传输时间Tt：把数据从磁盘读出或向磁盘写入数据所经历的时间Tt=b/rN，b是每次读/写的字节数，r是磁盘每秒转数，N是一条磁道上的字节数 当一次读/写的字节数相当于半条磁道上的字节数时，Tt与Tτ相同，可将访问时间Ta表示为Ta=Ts+1/2r+b/rN 磁盘调度先来先服务FCFS根据进程请求访问磁盘的先后次序调度 最短寻道时间优先SSTF该算法选择这样的进程，要求访问的磁道与当前磁头所在的磁道距离最近 扫描算法SCANSSTF实质是基于优先级的调度算法，可能会导致低优先级进程饥饿现象，因为只要不断有新进程请求到达，且所访问的磁道与磁头距离较近，则较远的进程饥饿，扫描算法不仅考虑访问磁道与当前磁道的距离，更优先考虑磁头当前的移动方向，例如当磁头自里向外移动，SCAN算法考虑的是当前磁道之外的，又是距离最近的，直到再无更外的磁道需要访问，就将磁臂换向改为自外向里，跟电梯运行很像，又称为电梯调度算法 磁盘高速缓存利用内存中的存储空间，来暂存从磁盘中读出的一系列盘块中的信息高速缓存逻辑上属于磁盘，物理上是内存高速缓存在内存中分为两种：第一种是内存中开辟单独的存储空间来作为磁盘高速缓存，大小是固定的，不会受应用程序多少的影响，第二种是把所有未利用的内存空间变为一个缓冲池，供请求分页系统和磁盘I/O（作为磁盘高速缓存）共享 数据交付方式系统可以采取两种方式，将数据交付给请求进程 数据交付：直接将高速缓存中的数据传送到请求者进程的内存工作区中 指针交付：只将指向高速缓存中某区域的指针交付给请求者进程 置换算法高速缓存的置换算法和请求分页系统有些区别，除了考虑最近最久未使用这一原则外，还考虑了访问频率，可预见性和数据的一致性 周期性写回磁盘UNIX系统专门增设一个修改程序，该程序周期性调用一个系统调用SYNC，主要功能是强制性将所有高速缓存中已修改的盘块数据写回磁盘，一般两次SYNC间隔30s]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>OS</tag>
        <tag>设备管理</tag>
        <tag>设备控制器</tag>
        <tag>通道</tag>
        <tag>SPOOLing</tag>
        <tag>缓冲</tag>
        <tag>磁盘存储器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[存储器管理]]></title>
    <url>%2F2019%2F05%2F10%2F%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8%2F</url>
    <content type="text"><![CDATA[虚拟存储器基本概念虚拟存储器的引入：常规存储器管理方式特征：一次性（全部装入），驻留性（驻留在内存不换出） 局部性原理： 时间局部性：如循环执行，某条指令被执行，不久以后可能会再次执行，数据被访问，不久后可能会再次被访问，原因是程序中存在大量循环操作 空间局部性：如顺序执行，一旦程序访问了某个存储单元，在不久之后，其附近的存储单元也将被访问，即程序在一段时间内所访问的地址可能集中在一定范围之内 虚拟存储器的定义：具有请求调入功能和置换功能，能从逻辑上对内存容量进行扩充的一种存储系统实质：时间换空间，但时间牺牲不大 虚拟存储器特征：离散性（部分装入），多次性（局部装入，多次装入），对换性，虚拟性 虚拟存储器的实现方式虚拟存储器的实现，全都建立在离散分配存储管理方式的基础上 需要动态重定位 目前的虚拟存储器都是采用分页请求系统和分段请求系统的方式实现的，分页请求系统就是在分页系统的基础上增加了请求调页功能和页面置换功能，分段请求系统在分段系统的基础上加入了请求调段功能和分段置换功能 分页请求系统 以页为单位转换 需硬件： 请求分页的页表机制 缺页中断 地址变换机构 需实现请求分页机制的软件 请求分段系统 以段为单位转换 请求分段的段表结构 缺段中断 地址变换机构 需实现请求分段机制的软件 请求分页存储管理方式请求分页的页表机制在纯页表机制上增加若干项形成，主要作用还是将用户地址空间中的逻辑地址映射为内存空间中的物理地址，为了满足页面换出换进换出的需要，它增加了一些字段 状态位P：仅有一位，指示该页是否已经调入内存 访问字段A：记录本页在一段时间内被访问的次数或记录本页最近已有多长时间未被访问，作为置换算法换出页面时的参考 修改位M：标识该页在调入内存后是否被修改过，由于内存每一页在外存上都有一份副本，因此置换该页时，如果未被修改，就不需要将该页写回到外存 缺页中断请求分页系统中，每当所要访问的页面不在内存时，便产生一缺页中断，请求OS将所缺之页调入内存，它与一般中断相比有明显区别，主要表现如下： 在指令执行期间产生和处理信号。通常CPU都是在一条指令执行完后才检查是否有中断请求到达。然而缺页中断在指令执行期间，若发现所要访问的指令或数据不在内存时，便立即产生和处理缺页中断信号，以便及时将所缺的页面调入内存 一条指令在执行期间可能产生多次缺页中断。例如下图中，执行一条指令copy A to B，可能要产生6次缺页中断，因为指令本身跨了两个页面，A和B各自为一个数据块，它们也都跨了两个页面 地址变换机构在分页系统地址变换机构的基础上，为实现虚拟存储器，再增加了某些功能，比如产生和处理缺页中断，以及从内存中换出一页的功能等等 请求分页的内存分配为进程分配内存时涉及三个问题：第一，为保证进程能正常运行，所需要的最小物理块数的确定；第二，在为每个进程分配物理块时，应采取什么样的分配策略，即所分配的物理块是固定的，还是可变的；第三，为不同进程分配物理块数，是平均分配算法还是根据进程大小按比例分配 最小物理块数的确定最小物理块数指保证进程正常运行所需的最小物理块数，取决于计算机硬件结构和指令格式，比如单地址指令且直接寻址的机器，最小物理块数为2，一块存放指令的页面，一块存放数据的页面，而对于单地址指令间接寻址，至少需要3个物理块，如果指令长度两个或多个字节，且指令本身可跨两个页面，源地址目标地址所涉及区域也跨两个页面，则要为每个进程分配6个物理块以装入6个页面 内存分配策略可采用固定和可变分配策略，置换时也可采取全局置换和局部置换，组合出下面三种适用的策略，全局置换指产生缺页都获得新物理块，如果没有空闲物理块，就从内存中选择一页调出，该页可能是系统中任何一个进程的，局部置换指换出的页面只能是该进程的页面，而不能是其他进程的 固定分配局部置换：固定分配指为每个进程分配一组固定数目的物理块，在进程运行时间不再改变，局部置换指如果进程在运行中发现缺页，则只能从分配给该进程的n个页面中选一页换出，再调入一页，以保证分配给该进程内存空间不变，缺点是难以确定固定分配的页数，如果少，置换率高，如果多就浪费 可变分配全局置换：可变分配指先为每个进程分配一定数目的物理块，在进程运行器件可根据情况适当增加或减少。可变分配全局置换这可能是最易于实现的一种物理块分配和置换策略，已用于若干个OS中。在采用这种策略时，凡产生缺页（中断）的进程，都将获得新的物理块，仅当空闲物理块队列中的物理块用完时，OS才能从内存中选择一页调出。被选择调出的页可能是系统中任何一个进程中的页，因此这个被选中的进程拥有的物理块会减少，这将导致其缺页率增加 可变分配局部置换：当某进程发现缺页时，只允许从该进程在内存的页面中选择一页换出，这样不会影响到其它进程的运行，如果进程运行中频繁缺页中断，系统就为该进程分配若干附加的物理块，直到进程缺页率降到适当程度为止，反之如果缺页率比较低，就适当减少该进程物理块数 物理块分配算法 平均分配算法 考虑优先权分配算法 页面调入策略问题： 何时调入页面 预调页策略：将那些预计在不久后会被访问的页面预先调入内存 请求调页策略：在进程需要访问页面不在内存的数据和程序时才提出请求，费系统开销 从何处调入页面 对换区，快 文件区，慢，在缺少对换区空间时 UNIX方式：未运行过的页面都从文件区调入，运行过但被换出的页面从对换区调入 页面调入过程：在上面地址变换机构的图的左半部分就是页面调入过程 页面置换算法最佳置换算法OPT其所选择的被淘汰页面，将是以后永不使用的，或许是在最长时间内不再被访问的页面，因为人们目前无法预知，一个进程在内存的若干页面中哪一个是未来最长时间不再被访问的，因而该算法是无法实现的，用于评价其他算法 考虑先将7，0，1三个页面装入内存，当进程要访问页面2，就会产生缺页中断，这个时候就会把页面7淘汰，因为页面0是第5个被访问的页面，页面1是第14个被访问的页面，页面7是第18个被访问的页面，访问到页面3的时候，同理页面1被淘汰，以此类推 先进先出页面置换算法FIFO该算法总是淘汰最先进入内存的页面，即选择内存中驻留时间最久的页面淘汰，该算法实现只需要把 进程已调入内存的页面按先后次序链接成一个队列，并设置一个指针，称为替换指针，它总是指向最老的页面 最近最久未使用置换算法LRU根据页面调入内存后的使用情况做出决策，选择最近最久未使用的页面淘汰，每个页面一个访问字段，用来记录一个页面自上次被访问以来经历了多少时间t，当需要淘汰一个页面时，选择现有页面中t值最大的淘汰 需要移位寄存器R=Rn-1Rn-2…R2R1R0的支持，当访问某物理块时，就将移位寄存器Rn-1置1，定时器每隔一段时间将寄存器右移一位，具有最小数值的寄存器所对应的页面就是最近最久未使用的页面或者需要栈的支持，当进程访问某页面，将该页面号从栈移出，压入栈顶，栈底就是最近最久未使用的页面号 Clock置换算法，页面缓冲算法等考纲没说要考，再看下去我要挂科了 请求分页访问内存有效时间EAT=(1-p)t+pf其中p为缺页率，t为内存访问时间，f为缺页中断时间 请求分段存储管理方式请求分段的段表机制 存取方式：执行，只读，读/写 存在位P：是否已调入内存 增补位：本段在运行过程中是否做过动态增长 缺段中断机构 与缺页中断的区别主要是有空区拼接，形成一个合适的空区 地址变换机构 分段的共享与保护分段的优点是便于实现分段的共享与保护 共享段表 分段保护提供如下分段保护 越界检查 存取控制检查 环保护机构]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>OS</tag>
        <tag>虚拟存储器</tag>
        <tag>请求分页</tag>
        <tag>请求分段</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[存储器管理]]></title>
    <url>%2F2019%2F05%2F09%2F%E5%AD%98%E5%82%A8%E5%99%A8%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[存储器管理存储器管理概述存储器的多层结构由于CPU与存储器的速度不匹配，需要对存储器进行分层，经典是三层结构：CPU寄存器，主存和辅存，目前比较高级的分层是六层：寄存器，高速缓存，主存储器，磁盘缓存，固定磁盘和可移动存储介质，层次越高，速度越快，但价格越高，存储容量越小 高速缓存常用SRAM，内存DRAM，SDRAM等，外存是软盘，硬盘，光盘等 各层次作用主存又称内存，用于保存进程运行的程序和数据，处理机都是从主存储器取指令和数据的，并把指令放入指令寄存器，数据放入数据寄存器，或者反过来把寄存器中的数据存入主存储器。 寄存器有与处理机相同的速度 高速缓存是介于寄存器和存储器之间的存储器，主要用于备份主存常用的数据，减少处理机对主存的访问次数，可以大幅度提高程序执行速度 磁盘缓存是为了缓和磁盘I/O速度和主存访问速度的不匹配，主要用于暂时存放频繁使用的一部分磁盘数据和信息，以减少访问磁盘的次数，它本身不是一种实际存在的存储器，而是利用主存中部分存储空间暂时存放从磁盘中读出或写入的信息 存储器管理功能存储器管理主要有如下功能 存储分配和回收：分配和和回收算法及相应的数据结构 地址变换 可执行文件生成中的链接技术 程序加载（装入）时的重定位技术 进程运行时硬件和软件的地址变换技术和机构 存储共享和保护 代码和数据共享 地址空间访问权限（读，写，执行） 存储器扩充 重定位概念重定位是实现逻辑地址（相对地址）到物理地址（绝对地址）的映射逻辑地址：应用程序的地址都是从0开始的物理地址：主存中一系列存储信息的物理单元的地址 程序的装入一个程序一般有5个过程，编辑，编译，链接，装入和运行 程序装入分为绝对装入和可重定位装入和动态运行时装入绝对装入指编译后，装入前已产生绝对地址，装入时不需要再作地址重定位，绝对地址由编译器或程序员编程完成可重定位装入指静态重定位，静态重定位指地址转换在装入时一次完成，缺点是不允许程序在运行中在内存中移动位置动态运行时装入在把装入模块装入内存后，并不立即把装入模块中的逻辑地址转换成物理地址，而是把这种地址转换推迟到程序真正要执行的时候才进行，因此，装入内存后的地址都是逻辑地址，需要一个重定位寄存器的支持 程序的链接源程序编译后得到一组目标模块，链接程序的功能是将这组目标模块以及它们所需要的库函数装配成一个完整的装入模块 静态链接：对相对地址进行修改，变换外部调用符号动态链接：便于修改和更新，便于实现对目标模块的共享运行时动态链接 连续分配管理方式为了能将用户程序装入内存，必须为它分配一定大小的内存空间，连续分配方式是最早出现的一种存储器分配方式 单一连续分配用于单用户单任务中，把内存分为系统区和用户区，应用程序装入到用户区，可使用用户区全部空间，优点是易于管理，缺点是对要求内存空间少的程序造成内存浪费，程序全部装入，很少使用的程序部分也会占用内存 固定分区特点：有n个分区，可同时装入n个作业/任务固定分区可以把分区划分为相等的跟不相等的，不相等的利用率更高 数据结构：分区使用表，将分区按大小排序，并将地址，分配标识符（是否已分配），大小作记录，由于每个分区的大小固定，必然会造成存储空间的浪费 可变式分区数据结构 空闲分区表：记录每个空闲分区的情况，每个空闲分区占一个表目，表目中包括分区号，分区大小和分区始址等。 空闲分区链：实现对空闲分区表的分配和链接，在每个分区的起始部分设置一些用于控制分区分配的信息，以及用于链接各分区所用的前向指针，在分区尾部设置一后向指针，通过前后向链接指针，可将所有空闲分区链接成一个双向链，分区尾部重复设置状态位和分区大小表目，当分区被分配出去后，状态位由”0”改为”1”，此时前后指针无意义 分配算法为把一个新作业装入内存，须按照一定的分配算法，从空闲分区表或空闲分区链中选一分区分配给该作业 分区分配操作分配内存利用某种分配算法，从空闲分区链（表）中找到所需大小的分区，设请求的分区大小是u.size，表中每个空闲分区的大小可表示为m.size，若m.size-u.size&lt;=size（size是事先规定的不再切割的剩余分区的大小）说明多余部分太小，可不再切割，将整个分区分配给请求者，并从分区链移除，否则从该分区中按请求的大小划分找出一块内存空间分配出去，余下的部分仍留在空闲分区链（表）中，然后将分配区的首地址返回给调用者 回收内存当进程运行完毕释放内存后，系统根据回收区的首地址，从空闲区链（表）中找到相应的插入点，此时可能出现下面四种情况 回收区与插入点前一个空闲分区F1相邻接，此时应将回收区与插入点前一分区合并，不必为回收区分配新表项，而只需修改前一分区F1的大小 回收区与插入点后一个空闲分区F2相邻接，此时将两分区合并，形成新的空闲分区，但用回收区的首地址作为新空闲区的首地址，大小为两者之和 回收区同时与插入点的前，后两个分区邻接，此时将三个分区合并，使用F1的表项和F1的首地址，取消F2的表项，大小为三者之和 回收区既不与F1邻接也不与F2邻接：新建表项，填入回收区首地址和大小，插入到空闲链适当位置 分配算法基于顺序搜索的动态分区分配算法 首次适应(first fit, FF)算法：空闲分区链以地址递增的次序链接，从链首开始顺序查找直到找到一个大小能满足要求的空闲分区为止，然后从该分区划出一块内存空间分配给请求者 循环首次适应(next fit, NF)算法：不再是每次都从链首开始查找，而是从上次找到的空闲分区的下一个空闲分区开始查找 最佳适应(best fit, BF)算法：每次为作业分配内存时，总是把能满足要求又是最小的空闲分区分配给作业，要求所有空闲分区按容量从大到小顺序形成一空闲分区链 最坏适应(worst fit, WF)算法：总是挑选最大的空闲区从中分割一部分存储空间给作业使用，要求将所有空闲分区按容量从大到小形成一空闲分区链，查找时只需看第一个分区是否满足作业要求 基于索引搜索的动态分区分配算法 快速适应(quick fit)算法：将空闲分区根据容量大小分类，对于每一类具有相同容量的所有空闲分区，单独设立一个空闲分区链，内存设立一张管理索引表，索引表项对应空闲分区类型，并记录该类型空闲分区链表表头的指针，根据进程常用空间大小划分，比如2KB，4KB，8KB等，7KB可以放在8KB也可以放在特殊的空闲分区链表中 伙伴系统：无论已分配分区或空闲分区，其大小均为2的k次幂，对于相同大小空闲分区单独设立一个空闲分区双向链表，不同大小的空闲分区形成了k个空闲分区链表，对于进程分配一个长度为n的存储空间时，计算i值，使2^(i-1) &lt; n &lt;= 2^i，先从2^i的空闲分区查找，若找到就分配，没有则从2^(i+1)的空闲分区查找，找到就分为相等的两个分区，称为一对伙伴，其中一个分区用于分配，另一个分区加入到2^i的空闲分区链表中 哈希算法，构造空闲分区大小为关键字的哈希表，每一个表项记录一个对应的空闲分区链表表头指针 动态可重定位分区分配 紧凑：连续分配方式的一个重要特点是：一个系统或用户程序必须被装入一片连续的内存空间中，当计算机运行一段时间后，它的内存空间会被划分为许多小的分区，而缺乏大的空闲空间，当有大作业要加入，因为小分区不邻接，无法分配内存给大作业，紧凑就是将内存中的所有作业进行移动，使它们全都相邻接，这样，原来分散的多个空闲小分区拼接成一个大分区，每次紧凑后，必须对移动了的程序或数据进行重定位 动态重定位：动态运行时装入的方式，作业装入内存后所有地址仍然是相对地址，而将相对地址转换成绝对地址的工作被推迟到程序指令要真正执行的时候进行，设一个重定位寄存器，用它存放程序（数据）在内存中的起始地址，程序执行时真正访问的地址是相对地址与重定位寄存器的地址相加而形成的 对换对换的引入：将阻塞进程，暂时不用的程序，数据换出，将具备运行条件的进程换入类型： 整体对换：进程对换，解决内存紧张 部分对换：页面对换/分段对换：提供虚存支持 对换空间的管理具有对换功能的OS中，常把磁盘空间分为文件区和对换区，对换区比文件区侧重于对换速度，因此对换区一般采用连续分配，采用数据结构和分配回收类似于可变化分区分配 进程的换出与换入当内存不足时，便调用对换进程，实现进程的换出和换入 进程的换出 选择被换出的进程：选择因素：优先级，驻留时间，进程状态 进程换出过程：共享段计数减一，如果是0就换出，修改PCB和MCB 进程的换入 选择换入进程：优先级，换出时间等 申请内存 换入 分页存储管理方式基本概念分页主要是将用户程序的地址空间划分为若干个固定大小的区域，称为”页”或”页面”，典型的页面大小为1kb，相应地，也将内存空间分为若干个物理块或页框，页和块的大小相同，这样可以将用户程序的任一页放入任一物理块中，实现离散分配（页是相对用户程序的地址而言，页框或者块是相对内存空间而言） 离散分配的引入：连续分配引起碎片，紧凑方式消耗系统开销 分页存储管理的基本方法地址结构 A：逻辑地址空间的地址 L：页面的大小 包含两部分内容：前一部分为页号P，后一部分为位（偏）移量W，即页内地址，图中的地址长度为32位，其中0——11位为页内地址，即每页大小4KB（页面大小），12——31位为页号，地址空间最多允许有1M页 页的计算例子 页表为了能在内存中找到每个页面对应的物理块，系统为每个进程建立一张页面映射表，为页表，在进程地址空间内的所有页(0——n)，依次在页表中有一页表项，其中记录了相应页在内存中对应的物理块号，实现从页号到物理块号的地址映射 地址变换机构为了能将用户地址空间中的逻辑地址转换成内存空间中的物理地址，系统中设立了地址变换机构，地址变换机构任务实际只是将逻辑地址中的页号转换为内存中的物理块号（页内地址与物理块内的地址是一样的，所以不需要变换），地址变换任务就是借助页表实现的 基本地址变换机构 越界保护 每个进程对应一页表，其信息（如长度，始址）放在PCB中，执行时将其首地址装入页表寄存器 页表是驻留在内存中的，当调度程序调度某程序的时候，才将PCB中的页表始址和页表长度装入页表寄存器（一个进程对应一个页表，所以对不同页表，需要有页表始址来区分） 地址变换过程当进程要访问某个逻辑地址的数据时，分页地址变换机构会自动地将有效地址（相对地址）分为页号和页内地址两部分，再以页号为索引区检索页表，查找操作由硬件执行。在检索之前，先将页号与页表长度比较，若大于或等于页表长度，则表示本次所访问的地址已超越进程的地址空间，产生一地址越界中断。若未出现越界错误，则将页表始址与页号和页表项长度的乘积相加，便得到该表项在页表中的位置，于是可从中得到该页的物理块号，将它装入物理地址寄存器，然后把页内地址送入物理地址寄存器的块内地址字段中，这样便完成了逻辑地址到物理地址的变换 我对将页表始址与页号和页表项长度的乘积相加地理解页表项长度应该就是页表项（即物理块）的地址的长度通过上述式子的计算，得到的是一个地址值（页表始址+页号*页表项长度（地址长度）），这个地址值应该是页表中该页表项的物理内存地址，访问这个物理内存地址，就得到这个物理块号了 需要考虑的问题直接映射的分页系统对系统效能不利，因为CPU需要访问两次主存才能得到所需要的数据，第一次访问是访问主存中的页表，从中找到指定页的物理块号再将块号与页内偏移量W拼接形成物理地址，第二次访问是从第一次所得地址中获得实际数据，为了解决这个问题，引入快表 具有快表的地址变换机构为了提高地址变换速度，在地址变换机构中增设一个具有并行查寻能力的特殊高速缓冲寄存器，又称为”联想寄存器”，或称为”快表”，或者TLB，用以存放当前访问的那些页表项，此时地址变换过程是这样的： 在CPU给出有效地址后，由地址变换机构自动地将页号P送入高速缓冲寄存器，并将此页号与高速缓存中地所有页号进行比较，若其中有与此相匹配的页号，便表示所要访问的页表项在快表中，于是，可直接从快表中读出该页所对应的物理块号，并送到物理地址寄存器，如在快表中没有找到对应的页表项，则还须再访问内存中的页表，找到后把从页表中读出的物理块号送往地址寄存器，同时，再将此页表项存入快表的一个寄存器单元中，如果快表满了，则OS找到一个老的且被认为不需要的页表项换出 访问内存的有效时间从进程发出指定逻辑地址的访问请求，经过地址变换，到在内存中找到对应的实际物理地址单元并取出数据，所需要花费的总时间，称为内存的有效访问时间（Effective Access Time, EAT)，有效访问时间分为第一次访问内存时间（即查找页表对应的页表项所耗费的时间t）与第二次访问内存时间（即将页表项的物理块与页内地址拼接成实际物理地址所耗费的时间t）之和 t：访问一次内存所需要的时间EAT=t+t=2*t 引入快表后，快表命中率a，查找快表需要的时间λ EAT=a(t+λ)+(1-a)(2t+λ)=2t+λ-t*a 两级和多级页表 两级页表的逻辑地址结构 以前面的32位逻辑地址空间为例，当页面大小为4KB的时候(12位)，采用两级页表结构时，再对页表进行分页，使每页包含2^10个页表项，或者说，外层页表中的外层页内地址P2为10位，外层页号P1也为10位 （通过外部页号得到P2的始址，然后P2和d就可以通过上面说过的地址变换过程获得物理地址了）外层页表的每个页表项中存放的是某页表分页的首地址，地址变换机构中同样要增加外层页表寄存器，用于存放外层页表的始址，并利用逻辑地址中的外层页号作为外层页表的索引，从中找到指定页表的始址（同上页表始址与页号和页表项长度乘积相加那个原理），再利用P2作为指定页表分页的索引，找到指定页表项，即含有该页在内存中的物理块号，用该块号P和页内地址d即可构成访问的内存物理地址 一个练习小例子 对题目的理解：页号是用户程序而言的，该用户程序有32页，每页2K，而物理块是针对内存空间而言的，内存有1M，第1题第2问中，因为物理空间有1M，每页2K，即每个物理块2K，所以内存中有512个物理块，这32页必须可以对应到这512个物理块中的每一块，物理块号为0#——511#，页表项是物理块的块号，所以页表项位数应该是511的二进制位数，即9位 对第二题，由逻辑地址算出页号和页内地址，通过页号找到物理块号，物理地址=物理块号*页面大小+业内地址 分段存储管理系统基本思想：按程序的逻辑结构，将程序的地址空间划分为若干段，各段大小可不相同，在进行存储分配时，以段为单位，这些段在内存中可以不相邻接为什么引入：一方面程序可分为若干个段，主程序段，子程序段A，子程序段B，数据段，栈段等，另一方面实现和满足信息共享，信息保护，动态链接以及信息的动态增长等需要 分段系统基本原理分段每个段定义了一组逻辑信息，分段地址的地址具有如下结构 段表 地址变换过程 设置了段表寄存器，用于存放段表始址和段表长度TL，在进行地址变换时，系统将逻辑地址中的段号和段表长度TL进行比较，若S&gt;TL，表示段号太大，访问越界，若未越界，则根据段表始址和段号，计算出该段对应段表项的位置（物理地址），从中读出该段在内存的起始地址，然后检查段内地址d是否超过该段段长SL，若超过，即d&gt;SL，同样发出越界中断，若未越界，则该段基址d与段内地址相加，即可得到要访问的内存物理地址 分段同样需要访问两次内存，同样由联想存储器用于保存最近常用的段表项 分页和分段主要区别 页是信息的物理单位，段是逻辑单位 页长度固定由系统决定，段长度不固定 分页用户程序地址空间是一维的，分段是二维的，既要给出段名又要给出段内地址 段页式存储管理方式]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>OS</tag>
        <tag>存储器管理</tag>
        <tag>分页</tag>
        <tag>分段</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[处理机调度与死锁]]></title>
    <url>%2F2019%2F05%2F09%2F%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6%E4%B8%8E%E6%AD%BB%E9%94%81%2F</url>
    <content type="text"><![CDATA[处理机调度与死锁处理机调度基本概念处理机调度分为三个层次 高级调度：作业调度，调度对象是作业，根据某种算法，决定将外存上处于后备队列的哪几个作业调入内存，为它们创建进程，分配资源，并放入就绪队列，主要用在多道批处理系统，在分时和实时系统中不设置高级调度 低级调度：进程调度，根据某种算法，决定就绪队列中哪几个进程应获得处理机，并由分派程序将处理机分配给被选中的进程，最基本的调度 中级调度：内存调度，主要目的是提高内存利用率和系统吞吐量，把暂时不能运行的进程调至外存等待，此时进程状态称为就绪驻外存状态（或挂起状态），当进程具备运行条件且内存又有空闲时，由中级调度决定，把外存上已具备运行条件的就绪进程重新调入内存，并挂在就绪队列上等待，实际上中级调度是存储器管理的对换功能 调度的运行频率是低&gt;中&gt;高 调度队列模型仅有进程调度的调度队列模型 同时具有三级调度的调度队列模型 周转时间多道批处理系统中，用户提交的作业先存放到外存，排成一个后备队列，作业调度程序按一定算法从后备队列中选择若干作业调入内存，使他们共享CPU和系统资源，当程序A因I/O而暂停执行时，再调度另一道程序B运行，这样可以保持CPU处于忙碌状态 周转时间常用于批处理系统，指从作业被提交给系统开始，到作业完成的时间，分为 驻外等待调度时间 驻内等待调度时间 执行时间 阻塞时间 平均周转时间可以表示为 带权周转时间描述进程在其周转时间中，等待和执行时间的具体分配情况，W=T/Ts，T是周转时间，Ts是系统为它提供服务的时间平均带权周转时间表示为 调度算法先来先服务(FCFS)和短作业优先(SJF)调度算法它们都可以用于作业调度和进程调度 FCFS(first-come first-served)就不解释了，SJF（short job first)以作业长短计算优先级，作业越短优先级越高，作业长度以作业所要求的运行时间来衡量，SJF缺点是必须预知作业的运行时间，对长作业非常不利，人机无法交互，未考虑作业紧迫程度。 FCFS和SJF的比较 在SJF中，当A完成后，此时时间为4，B,C,D,E均已到达，因为D的作业最短，所以处理机先为D服务，然后为B，E，C服务 高优先权优先调度算法可以作为作业调度和进程调度 优先级调度算法（PSA，priority-scheduling algorithm）分为非抢占式优先权算法和抢占式优先权算法，抢占式实时性更好 优先权的类型分为 静态优先权：整个运行期不变 动态优先权：优先权随执行时间而下降，随等待时间而上升，响应比Pp=(等待时间+服务时间)/服务时间作为优先权，优点是长短兼顾，缺点是需要计算Rp 高响应比优先算法(HRRN,Highest Response Ratio Next)响应比Rp=(tw+ts)/ts，tw为等待时间，ts为服务时间 基于时间片的轮转调度算法(RR)进程调度算法，基于时间片的轮转(RR,round robin)让就绪队列上的每个进程每次仅运行一个时间片，每个进程每次大约都可获得1/n的处理机时间 进程切换时间 若一个时间片尚未用完，正在运行的进程已经完成，则激活调度程序，将它从就绪队列中删除，再调度就绪队列中队首的进程运行，并启动一个新的时间片 若时间片用完，计时器中断处理程序激活，调度程序把它送往就绪队列的队尾 时间片大小的确定若时间片太大，则退化为FCFS，若太小，则系统开销过大，时间片大小确定应考虑系统对响应时间的要求，就绪队列中进程的数目和系统的处理能力（应保证一个时间片处理完常用命令） 实时调度实时调度必须提供： 就需时间：某任务成为就绪的起始时间 开始/完成截止时间 处理时间 资源要求 优先级 非抢占式用时间片轮转，抢占式可以时钟中断或立即抢占（只要不在临界区就抢占） 常见的实时调度算法最早截止时间优先EDF根据任务的开始截止时间来确定任务优先级 最低松弛度优先LLF松弛（紧急）程度=完成截止时间-处理时间-当前时间 主要用于可抢占的调度方式 死锁死锁定义：如果一组进程中的每一个进程都在等待仅由该组进程中的其它进程才能引发的事件，那么该组进程是死锁的。 产生死锁的原因 竞争资源引起死锁：竞争不可抢占的资源或可消耗资源引起死锁 进程推进顺序不当 产生死锁必要条件 互斥条件：资源必须互斥 请求和保持条件：进程已经保持至少一个资源但又提出新的资源请求 不可抢占条件：资源不可抢占 循环等待条件：发生死锁时，必然存在一个进程——资源的循环链，即P0等待P1占用的资源，P1等待P2占用的资源，Pn等待P0占用的资源 解决死锁的方法 预防死锁 避免死锁 检测死锁 解除死锁 解决死锁的方法预防死锁预防死锁：破坏产生死锁的4个必要条件之一，互斥条件一般是不能破坏的，所以主要是破坏产生死锁的后三个条件，预防死锁有效，但资源利用率低 摒弃请求和保持条件：资源一次性分配摒弃不剥夺条件：新申请不能满足就释放已获得资源摒弃环路条件：资源有序分配，为资源编号，申请时按编号进行 避免死锁避免死锁是在资源动态分配过程中，防止系统进入不安全状态，以避免发生死锁，最经典的避免死锁的算法是银行家算法 银行家算法数据结构 可利用资源向量Available：含有m个元素的数组，每个元素代表一类可利用的资源数目，初始值是系统配置的该类全部可用资源的数目，Available[j]=K表示系统中现有Rj类资源的最大数目K个 最大需求矩阵Max：是一个n*m的矩阵，定义了系统中n个进程中每一个进程对m类资源的最大需求，如果Max[i, j]=K，则表示进程i需要Rj类资源的最大数目为K 分配矩阵Allocation：n*m矩阵，定义了系统中每一类资源当前已分配给每一进程的资源数，如果Allocation[i, j]=K，则表示进程i当前已分得Rj类资源的数目为K 需求矩阵Need：n*m矩阵，用来表示每一个进程尚需的各类资源数，如果Need[i, j]=K，表示进程i还需要Rj类资源K个 Need[i, j] = Max[i, j] - Allocation[i, j] 算法流程设Requesti是进程Pi的请求向量，如果Requesti[j]=K，则表示进程Pi需要K个Rj类的资源，当Pi发出资源请求后，系统按下述步骤进行检查 如果Requesti[j] &lt;= Need[i, j]，则转向步骤2，否则认为出错，因为它申请的资源大于它宣布的最大值 如果Requesti[j] &lt;= Available[j]，则转向步骤3，否则尚无足够资源，Pi需等待 系统试探把资源分配给进程Pi，并修改下面数据结构的数值 Available[j] = Available[j] - Requesti[j]; Allocation[i, j] = Allocation[i, j] + Requesti[j]; Need[i, j] = Need[i, j] - Requesti[j]; 系统执行安全性算法，检查此次资源分配后系统是否处于安全状态，若安全，才正式分配资源给Pi，否则本次试探分配作废，恢复原来的资源分配状态，让进程Pi等待 安全性算法如上面所述，安全性算法是试探性分配后（即修改了Available，Allocation，Need但未正式分配资源）进行的，若安全才正式分配，否则试探分配作废，算法如下 设置两个向量：工作向量Work，表示系统可提供给进程继续运行所需的各类资源数目，含有m个元素，执行安全算法开始时，Work=Available；Finish，它表示系统是否有足够资源分配给进程，使之运行完成。开始时Finish[i]=false，当有足够资源分配给进程时，再令Finish[i]=true 从进程集合中找到一个满足下述条件的进程：Finish[i]=false;Need[i, j] &lt;= Work[j];若找到，则转向步骤3，否则转向步骤4 假如进程Pi获得资源，则进程Pi可顺利执行，直到完成，并释放分配给它的资源，故应执行Work[j] = Work[j] + Allocation[i, j];Finish[i] = true;go to step 2; 如果所有进程的Finish[i]=true都满足，则表示系统处于安全状态，否则，系统处于不安全状态 银行家算法安全性检查的例子 一开始检查，发现p0不满足第2步的条件，p1满足，就把p1的资源释放，加到Work，然后继续检查，p2不满足，p3满足，则释放掉p3的资源，然后释放，最后所有的进程都释放了 P.S.解题的时候，画表，行是每个进程，列依次是Work,Need,Allocation,Work+Allocation,Finish 检测死锁资源分配图 资源分配图圆圈表示进程，方框表示资源，方框内点表示资源数，箭头由资源指向进程表示一个单位的资源分配给进程，进程指向资源表示进程请求一个单位的资源 死锁定理S为死锁状态的充分条件是当且仅当S状态的资源分配图是不可完全简化 资源分配图的简化找出既不阻塞又非独立的进程结点Pi，去掉所有分配边和请求边，若能去掉所有结点的所有分配边和请求边，则不会发生死锁，否则发生死锁 解除死锁主要方法 抢占资源：从一个或多个进程抢占足够资源分配给死锁进程 终止进程]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>OS</tag>
        <tag>调度</tag>
        <tag>死锁</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[进程管理]]></title>
    <url>%2F2019%2F05%2F08%2F%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[进程管理进程的定义，与程序的区别定义进程是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位，是程序的一次执行。 与程序的区别 进程 程序 程序是指令的集合，是静态的概念 进程是处理机上的一次执行过程，动态的概念 程序是长期存在的 进程有生命周期，有创建，活动和消亡 程序是指令的有序集合 进程由程序，PCB和数据组成 程序和进程并非一一对应，同一程序同时运行在若干不同数据集上，它将属于若干个不同进程 一个进程可以执行多个程序 进程的状态及其转换进程三种基本状态分别是 就绪状态 执行状态 阻塞状态 它们的转换关系如下 引入挂起状态（被换出内存的状态）后，进程的转换如下 挂起状态挂起状态是把进程从内存移出外存，不释放CPU 而阻塞状态是释放CPU，但不释放内存 引入挂起状态的原因是 终端用户请求 父进程请求 负荷调节需要 操作系统需要 进程控制块PCBPCB的作用PCB是进程的唯一标识，它常驻内存 它作为独立运行基本单位的标志 能实现间断性运行方式 提供进程管理所需要的信息 提供进程调度所需要的信息 实现与其他进程的同步和通信 PCB的信息PCB主要包括以下四个方面的信息 进程标识符：外部标识符（针对用户即进程），内部标识符（针对系统） 处理机状态：通用寄存器，指令计数器，用户栈指针，程序状态字等 进程调度信息：进程状态，进程优先级，进程调度其他信息（已等待CPU时间等），事件（阻塞原因） 进程控制信息：程序和数据地址，进程同步和通信机制，资源清单，链接指针（所在队列下一个进程PCB的首地址） 进程控制任务：对系统中所有进程从产生，存在到消亡的全过程实施有效的管理和控制 进程控制由内核中原语实现。 原语（Primitive）：由若干条指令组成，用于完成一定功能的一个过程，它们是原子操作，即所有动作要么全不做，要么全做，是不可分割的，不允许被中断的。原语由内核系统态执行，常驻内存。 常见的进程控制原语如下 创建 撤销 阻塞：执行-&gt;阻塞 唤醒：阻塞-&gt;就绪 挂起：活动-&gt;静止 激活：静止-&gt;活动 进程创建进程创建的过程如下 申请空白PCB 为新进程分配资源 初始化PCB 新进程插入到就绪队列 进程同步同步同步指并发进程在执行次序上的协调，以达到有效资源共享和相互合作，是程序执行有可再现性。 进程有两种形式的制约关系，分别是 资源共享关系：进程间接制约，需互斥地访问临界资源 相互合作关系：进程直接制约 临界资源：一次仅允许一个进程访问的资源 临界区：进程访问临界资源的那段代码 同步机制应遵循： 空闲让进 忙则等待 有限等待 让权等待：不能进入临界区的进程应放弃CPU执行权 信号量机制实现进程同步有许多方法，其中比较经典的是信号量机制 整型信号量整型信号量定义为用于表示资源数目的整型量S，它除初始化外，仅能通过两个原子操作wait(S)和signal(S)来访问，这两个操作一直被称为P，V操作，wait，signal操作描述如下 1234567wait(S) &#123; while (S &lt;= 0); S--;&#125;signal(S) &#123; S++;&#125; 这两个操作是原子操作，它们在执行的时候是不可中断的 记录型信号量整型信号量并没有实现让权等待，而是让进程处于忙等状态，这个时候就需要引入记录型信号量来实现 记录型信号量有一个整型变量value表示资源数目，还有一个进程链表指针list，用于链接上述所有等待进程，定义和PV操作描述如下 12345678910111213typedef struct &#123; int value; struct process_control_block *list;&#125; semaphore;wait(semaphore *S) &#123; S-&gt;value--; if (S-&gt;value &lt; 0) block(S-&gt;list); // block是阻塞原语，它的意思是把当前进程自我阻塞并插入到S-&gt;list中&#125;signal(semaphore *S) &#123; S-&gt;value++; if (S-&gt;value &lt;= 0) wakeup(S-&gt;list); // wakeup是唤醒原语&#125; S-&gt;value是系统中某类资源数目，对它每次wait，意味进程请求一个单位的该类资源，当S-&gt;value &lt; 0，表示该资源已分配完成，进程应调用block原语自我阻塞，并插入到信号量链表S-&gt;list中。当S-&gt;value &lt; 0，它的绝对值是链表中已阻塞进程的数目。对信号量每次signal操作表示执行进程释放一个单位资源，S-&gt;value++，若+1后S-&gt;value仍然&lt;=0，表示该信号量链表中仍有等待该资源的进程被阻塞，调用wakeup原语唤醒该进程.如果S-&gt;value初值为1，则只允许一个进程访问临界资源，此时信号量为互斥信号量。 AND型信号量AND同步机制基本思想是：将进程整个运行过程中需要的所有资源，一次性全部分配给进程，使用后一次性释放，原语为Swait(Simultaneous wait)和Swakeup 管程引入原因：为了避免凡要使用临界资源的进程都自备同步操作wait(s)和signal(s)，将同步操作的机制和临界资源结合到一起，形成管程 定义：一个数据结构和能为并发进程所执行的一组操作，包括局部于管程的共享变量，对该数据结构进程操作的一组过程，对局部管程数据设置初值 管程语法描述如下： 1234567891011121314Monitor monitor_name &#123; // 管程名 share variable declarations; // 共享变量 cond declarations; // 条件变量 void P1(...) &#123;...&#125; void P2(...) &#123;...&#125; ... void(....) &#123;...&#125; &#123; // 管程主体 initialization code; // 初始化代码 &#125;&#125; 条件变量用于进程的阻塞和挂起，形式为condition x, y，对条件变量的操作仅仅是wait和signal，每个条件变量保存一个链表，用于记录因该条件变量而阻塞的所有进程，同时提供两个操作x.wait和x.signal x.wait：正在调用管程的进程因x条件需要被阻塞或挂起，调用x.wait将自己插入到x条件的等待队列上，并释放管程x.signal：正在调用管程的进程发现x条件发生了变化，则调用它，重新启动一个因x条件而阻塞或挂起的进程 进程同步的经典问题生产者-消费者问题问题描述：一组生产者向一组消费者提供消息，它们共享一个包含n个缓冲区的有界缓冲池，生产者向其中投放消息，消费者从中取得消息 问题求解：互斥信号量mutex实现诸进程对缓冲池的互斥使用，信号量empty和full分别表示缓冲池中空缓冲区和满缓冲区的数量 1234567891011121314151617181920212223242526272829303132int in = 0, out = 0;item buffer[n];semaphore mutex = 1, empty = n, full = 0;void producer() &#123; do &#123; produce an item nextp; ... wait(empty); // 当空缓冲池数量为0，即缓冲池已满 wait(mutex); buffer[in] = nextp; in = (in + 1) % n; signal(mutex); signal(full); &#125; while (TRUE);&#125;void consumer() &#123; do &#123; wait(full); // 当满缓冲池为0，即缓冲池已空 wait(mutex); nextc = buffer[out]; out = (out + 1) % n; signal(mutex); signal(empty); consume the item in nextc; ... &#125; while (TRUE); &#125;void main() &#123; cobegin producer(); consumer(); coend&#125; P操作很重要，假如颠倒了生产者的P操作，先拥有了缓冲池的使用权，但此时无空缓冲池，则会进入死锁，V操作顺序则无关紧要，当缓冲区只有一个时，mutex可以省略 哲学家进餐问题 哲学家进餐应定义5个信号量表示5只筷子，且初值均为1，而不能定义1个信号量，因为5个筷子位置不同，哲学家并不是随意拿5个筷子的，他们只能拿他们左右最靠近他们的筷子，描述如下semaphore chopstick[5] = {1, 1, 1, 1, 1}; 第i个哲学家的活动可描述为 123456789101112do &#123; wait(chopstick[i]); wait(chopstick[(i + 1) % 5]); ... // eat ... signal(chopstick[i]); signal(chopstick[(i + 1) % 5]); ... // think ...&#125; while(TRUE) 哲学家问题出现死锁的可能是：五个哲学家同时饥饿而各自拿起左边的筷子，就会使5个信号量chopstick均为0，当他们再试图去拿右边的筷子时，会因没有筷子可拿而无限等待 解决方法有如下几个： 1.至多允许有4位哲学家同时拿左边筷子，方法：设置信号量sm初值为4 12345678910111213philopher(i) &#123; do &#123; wait(sm); wait(chopstick[i]); wait(chopstick[(i + 1) % 5]); eat; signal(sm); signal(chopstick[i]); signal(chopstick[(i + 1) % 5]); signal(sm); think; &#125; while (TRUE);&#125; 2.规定奇数号哲学家先拿他左手边的筷子，再拿右手边的筷子，偶数号哲学家相反 123456789101112131415161718philopher(i) &#123; do &#123; if (i % 2 == 0) &#123; wait(chopstick[i]); wait(chopstick[(i + 1) % 5]); eat; signal(chopstick[i]); signal(chopstick[(i + 1) % 5]); &#125; else &#123; wait(chopstick[(i + 1) % 5]); wait(chopstick[i]); eat; signal(chopstick[(i + 1) % 5]); signal(chopstick[i]); &#125; think; &#125; while (TRUE);&#125; 3.仅当左右手两只筷子均可用的时候，才拿起筷子进餐，利用AND信号量解决 12345678philopher(i) &#123; do &#123; Sswait(chopstick[i], chopstick[(i + 1) % 5]) eat; Ssignal(chopstick[i], chopstick[(i + 1) % 5]); think; &#125; while (TRUE);&#125; 读者-写者问题问题描述：读进程可共享同一对象，写进程不可共享同一对象 分析：整型变量readcount表示读者数，信号量rmutex互斥访问readcount，wmutex读写互斥，只要有一个进程在读，就不允许写进程去写 1234567891011121314151617181920212223242526272829semaphore rmutex = 1, wmutex = 1;int readcount = 0;void reader() &#123; do &#123; wait(rmutex); // readcount的互斥访问 if (readcount == 0) wait(wmutex); // 读写互斥，当该进程为第一个读进程，判断是否有写进程在写，有则阻塞，无则加锁 readcount++; signal(rmutex); ... perform read operation; ... wait(rmutex); readcount--; if (readcount == 0) signal(wmutex); signal(rmutex); &#125; while (TRUE);&#125;void writer() &#123; do &#123; wait(wmutex); perform write operation; signal(wmutex); &#125; while (TRUE);&#125;void main() &#123; cobegin reader(); writer(); coend&#125; 读-写问题的扩散——写者优先即当写进程到达后，后续的读进程必须等待 方法：增加信号量S（初值1），当写进程运行时上锁，封锁后续读者。增加信号量s后，当读进程读，先wait(s)，若后续读进程运行，都会进入s的阻塞队列，而不会在其他进程读的期间（上锁了s，没有上锁rmutex）进入wmutex的阻塞队列，当有写进程运行并进入s的阻塞队列，后续再有读进程进入s的阻塞队列，都排在写进程之后，当前面读进程释放s后，写进程就可以对s上锁，阻止后续读进程了 123456789101112131415161718192021222324252627282930313233semaphore rmutex = 1, wmutex = 1, s = 1;int readcount = 0;void reader() &#123; do &#123; wait(s); wait(rmutex); // readcount的互斥访问 if (readcount == 0) wait(wmutex); // 读写互斥，当该进程为第一个读进程，判断是否有写进程在写，有则阻塞，无则加锁 readcount++; signal(rmutex); signal(s); ... perform read operation; ... wait(rmutex); readcount--; if (readcount == 0) signal(wmutex); signal(rmutex); &#125; while (TRUE);&#125;void writer() &#123; do &#123; wait(s); wait(wmutex); perform write operation; signal(wmutex); signal(s); &#125; while (TRUE);&#125;void main() &#123; cobegin reader(); writer(); coend&#125; 进程通信进程通信实质是进程间的信息交换，有如下几种通信方式 信号量机制：低级，效率低，对用户不透明 共享存贮器：共享存储区等 消息传递系统：交换报文，由一组通信原语实现 管道通信：管道是连接一个读进程和一个写进程之间通信的共享文件 客户机-服务器系统：套接字等]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>OS</tag>
        <tag>进程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript09-事件]]></title>
    <url>%2F2019%2F04%2F10%2FJavaScript09-%E4%BA%8B%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[JavaScript09-事件事件流事件流描述的是从页面中接收事件的顺序。如果单击某个按钮，那么单击事件不仅仅发生在按钮上，同样发生在按钮的容器元素，甚至整个页面上。事件冒泡就是最具体的元素最先接收这个事件，然后逐级向上，事件捕获则相反。 事件冒泡事件冒泡是IE提出的，即事件开始时由最具体的元素（文档中嵌套层次最深的那个节点）接收，然后逐级向上传播到较为不具体的节点（文档） 1234567891011&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;aha&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div id="myDiv"&gt;Click Me&lt;/div&gt; &lt;/body&gt; &lt;/html&gt; 点击&lt;div&gt;元素，那么这个click事件就按照如下顺序传播： &lt;div&gt; &lt;body&gt; &lt;html&gt; document 事件捕获Netscape Communicator团队提出的另一种事件流。事件捕获的思想是不太具体的节点应该更早接收到事件，而最具体的节点应该最后接收到事件。仍以上面html代码为例，单击&lt;div&gt;元素就会以下列顺序触发click事件 document &lt;html&gt; &lt;body&gt; &lt;div&gt; 一般考虑到老版本，使用事件冒泡更多。 DOM事件流DOM2级事件规定的事件流包括三个阶段：事件捕获阶段，处于目标阶段和事件冒泡阶段。 事件处理程序事件处理程序名字以”on”开头，因此click事件的事件处理程序就是onclick，load事件的事件处理程序就是onload。 HTML事件处理程序123456&lt;script type="text/javascript"&gt; function showMessage() &#123; alert("Hello World!"); &#125;&lt;/script&gt;&lt;input type="button" value="Click Me" onclick="showMessage()" /&gt; 这样指定事件处理程序会创建一个封装着元素属性值的函数，这个函数中有一个局部变量event，也就是事件对象 &lt;input type=&quot;button&quot; value=&quot;Click Me&quot; onclick=&quot;alert(event.type)&quot; /&gt; // &quot;click&quot; 通过event对象，可以直接访问事件对象，在这个函数内部，this值等于事件的目标元素 &lt;input type=&quot;button&quot; value=&quot;Click Me&quot; onclick=&quot;alert(this.value)&quot; /&gt; // 返回元素的value属性，这里为&quot;Click Me&quot; 关于这个动态创建的函数，可以像访问局部变量一样访问document及该元素本身的成员，使用with像下面这样扩展： 1234567function() &#123; with(document) &#123; with(this) &#123; // 元素属性值 &#125; &#125;&#125; 如果当前元素是一个表单输入元素，则作用域还会包含访问表单元素的入口，如下： 123456789function() &#123; with(document) &#123; with(this.form) &#123; with(this) &#123; // 元素属性值 &#125; &#125; &#125;&#125; 扩展这个作用域的方式，主要是想让事件处理程序无需引用表单元素就能访问其他表单字段，例如： 1234&lt;form method="post"&gt; &lt;input type="text" name="username" value="" /&gt; &lt;input type="button" value="Echo Username" onclick="alert(username.value)"&gt;&lt;/form&gt; DOM0级事件处理程序通过JavaScript指定事件处理程序的传统方式，就是将一个函数赋值给一个事件处理程序属性。如下 1234var btn = document.getElementById(&quot;myBtn&quot;);btn.onclick = function() &#123; alert(&quot;Clicked&quot;);&#125; 使用DOM0级方法执行的事件处理程序被认为是元素的方法，程序中的this引用的是当前元素。只需把属性值设置为null就可以删除事件处理程序 DOM2级事件处理程序DOM2级事件定义了两个方法，用于处理指定和删除事件处理程序的操作：addEventListener()和removeEventListener()。所有DOM节点都包含这两个方法，它们接收3个参数：要处理的事件名，作为事件处理程序的函数和一个布尔值。这个布尔值若为true，表示捕获阶段调用事件处理程序；如果是false，表示冒泡阶段调用事件处理程序。 DOM2级方法主要好处是可以添加多个事件处理程序，如下 123456789var btn = document.getElementById("myBtn");btn.addEventListener("click", function() &#123; alert("Hello World!");&#125;, false);btn.addEventListener("click", function()&#123; alert(this.id);&#125;, false); 通过addEventListener()添加的事件处理程序只能使用removeEventListener()来移除；移除时传入的参数要与添加处理程序时使用的参数相同，即添加的匿名参数无法移除。 大多数情况下，都是把事件处理程序添加到事件流的冒泡阶段，这样可以最大限度地兼容各种浏览器。最好只在需要在事件到达目标之前截获它的时候将事件处理程序添加到捕获阶段。如果不是特别需要，不建议在事件捕获阶段注册事件处理程序。 事件对象在触发DOM上某个事件时，会产生一个事件对象event，这个对象中包含所有与事件有关的信息，包括导致事件的元素，事件的类型以及其他与特定事件相关的信息。例如鼠标操作导致的鼠标位置的信息等。 DOM中的事件对象兼容DOM的浏览器会将一个event对象传入到事件处理程序中。 关于event的更多（比如其成员),可以看MDN的DOM Event接口 如果事件处理程序指定给目标元素，则this，currentTarget和target是相同的，事件处理程序内部，对象this始终等于currentTarget的值，如果事件处理程序存在于父节点中，则这些值是不同的，如下 123456var btn = document.getElementById("myBtn");document.body.onclick = function(event) &#123; alert(event.currentTarget == document.body); alert(document.body == this); alert(event.target == btn);&#125; 需要处理一个函数处理多个事件的时候，可以使用type属性，如下： 123456789101112131415161718var btn = document.getElementById("myBtn");var handler = function(event) &#123; switch(event.type) &#123; case "click" : alert("clicked"); break; case "mouseover" : event.target.style.backgroundColor = "red"; break; case "mouseout" : event.target.style.backgroundColor = ""; break; &#125;&#125;;btn.onclick = handler;btn.onmouseover = handler;btn.onmouseout = handler; 要阻止特定事件的默认行为，可以使用preventDefault()方法。例如，链接的默认行为就是在被单击的时候会导航到其href特性指定的URL。 1234var link = document.getElementById("myLink");link.onclick = function(event) &#123; event.preventDefault();&#125; 只有cancelable属性设置为true的事件，才可以使用preventDefault()方法来取消默认行为。 stopPropagation()方法用于立即停止事件在DOM层次中的传播，即取消进一步事件捕获或冒泡。例如，直接添加到一个按钮的事件处理程序可以调用stopPropagation()，从而避免触发注册在document.body上面的事件处理程序。 eventPhase属性可以用来确定事件当前位于事件流的哪个阶段。如果是在捕获阶段调用事件处理程序，那么eventPhase的值为1，如果事件处理程序在目标对象上，则eventPhase值为2，如果是在冒泡阶段调用的事件处理程序，eventPhase等于3。 跨浏览器的事件对象12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182var EventUtil = &#123; addHandler: function(element, type, handler) &#123; if (element.addEventListener) &#123; element.addEventListener(type, handler, false); &#125; else if (element.attachEvent) &#123; // IE事件处理程序 element.attachEvent("on" + type, handler); &#125; else &#123; element["on" + type] = handler; &#125; &#125;, getEvent: function(event) &#123; return event ? event : window.event; &#125;, getTarget: function(event) &#123; return event.target || event.srcElement; &#125;, preventDefault: function(event) &#123; if (event.preventDefault) &#123; event.preventDefault(); &#125; else &#123; event.returnValue = false; &#125; &#125;, removeHandler: function(element, type, handler) &#123; if (element.removeEventListener) &#123; element.removeEventListener(type, handler, false); &#125; else if (element.detachEvent) &#123; element.detachEvent("on" + type, handler); &#125; else &#123; element["on" + type] = null; &#125; &#125;, stopPropagation: function(event) &#123; if (event.stopPropagation) &#123; event.stopPropagation(); &#125; else &#123; event.cancelBubble = true; &#125; &#125;, // 与mouseout，mouseover事件相关的属性，见下面 getRelatedTarget: function(event) &#123; if (event.relatedTarget) &#123; return event.relatedTarget; &#125; else if (event.toElement) &#123; // 兼容IE8 return event.toElement; &#125; else if (event.fromElement) &#123; return event.fromElement; &#125; else &#123; return null; &#125; &#125;, // 与mousedown，mouseout事件相关的鼠标属性 getButton: function(event) &#123; if (document.implementation.hasFeature("MouseEvents", "2.0")) &#123; return event.button; &#125; else &#123; switch(event.button) &#123; case 0: case 1: case 3: case 5: case 7: return 0; case 2: case 6: return 2; case 4: return 1; &#125; &#125; &#125;&#125;; 事件类型DOM3级事件规定了以下几类事件 UI事件：当用户与页面上的元素交互时触发； 焦点事件：当元素获得或失去焦点时触发； 鼠标事件：当用户通过鼠标在页面上执行操作时触发； 滚轮事件：当使用鼠标滚轮时触发； 文本事件：当在文档中输入文本时触发； 键盘事件：当用户通过键盘在页面上执行操作时触发； 合成事件：当为IME（输入法编辑器）输入字符时触发； 变动事件：当底层DOM结构发生变化时触发。 UI事件UI事件指的是那些不一定与用户操作有关的事件，有如下UI事件。 load：当页面完全加载后在window上触发，当所有框架都加载完毕时在框架集上触发，当图像加载完毕在&lt;img&gt;元素上触发，或者当嵌入的内容加载完毕时在&lt;object&gt;元素上触发。 unload：当页面完全卸载后在window上触发，当所有框架都卸载后在框架集上触发，或当嵌入的内容卸载后在&lt;object&gt;元素上触发。 abort：在用户停止下载过程时，如果浅入的内容没有加载完，则在&lt;object&gt;元素上触发。 error：当发生在JavaScript错误时在window上触发，当无法加载图像时在&lt;img&gt;上触发，当无法加载嵌入内容时在&lt;object&gt;上触发，或者当有一或多个框架无法加载时在框架集上触发。 select：当用户选择文本框（&lt;input&gt;或&lt;texterea&gt;）中的一或多个字符时触发。 resize：当窗口或框架大小变化时在window或框架上触发。 scroll：当用户滚动带滚动条的元素中的内容时，在该元素上触发。&lt;body&gt;元素中包含所加载页面的滚动条。 确定浏览器是否支持DOM2级事件规定的HTML事件，可以用如下代码 var isSupported = document.implementation.hasFeature(&quot;HTMLEvents&quot;, &quot;2.0&quot;); 确定浏览器是否支持DOM3级事件定义的事件，可以用如下代码 var isSupported = document.implementation.hasFeature(&quot;UIEvent&quot;, &quot;3.0&quot;); load事件当页面完全加载后（包括所有图像，JS文件，CSS等外部资源），就会触发window上的load事件。 有两种添加onload事件处理程序的方式，一个是使用上面的EventUtil，另一个就是给&lt;body&gt;元素添加onload特性。 123EventUtil.addHandler(window, "load", function(event) &#123; alert("loaded!");&#125;); &lt;body onload=&quot;alert(&#39;Loaded!&#39;)&quot;&gt;&lt;/body&gt; 一般来说，在window上面发生的任何事件都可以在&lt;body&gt;元素中通过相应的特性来指定。 对于&lt;img&gt;元素，可以为其指定一个事件处理程序，以便图像加载完毕后给出提示。此时，最重要的是要在指定的属性之前先加载指定事件。 123456789EventUtil.addHandler(window, "load", function(event) &#123; var image = document.createElement("img"); EventUtil.addHandler(image, "load", function(event) &#123; event = EventUtil.getEvent(event); alert(EventUtil.getTarget(event).src); &#125;); document.body.appendChild(image); image.src = "./a.jpg"; &#125;); 还有一些元素也以非标准方式支持load事件，&lt;script&gt;元素也会触发load事件，以便开发人员确定动态加载的JS文件是否加载完毕。 12345678EventUtil.addHandler(window, "load", function(event) &#123; var script = document.createElement("script"); EventUtil.addHandler(script, "load", function(event) &#123; alert("Loaded!"); &#125;); script.src = "example.js"; document.body.appendChild(script); &#125;); unload事件在文档被完全卸载后触发。只要用户从一个页面切换到另一个页面，就会发生unload事件。利用这个事件最多的情况就是清除引用，以避免内存泄漏。unload事件的对象同样是window。 resize事件当浏览器窗口被调整到一个新的高度或宽度的时候，就会触发resize事件。这个事件在window上触发。不同浏览器resize事件处理不同，有可能是变化了1像素就触发，然后随着变化不断重复触发，也有可能用户停止调整窗口大小的时候才触发。 scroll事件scroll事件同样是在window上发生的，尽管它实际表示的是页面中相应元素的变化。scroll事件在滚动期间重复被触发。 焦点事件焦点事件会在页面元素获得或失去焦点时触发。利用这些元素并与document.hasFocus()方法及document.activeElement属性配合，可以知晓用户在页面上的行踪。有以下6个焦点事件。 blur：在元素失去焦点时触发。这个事件不会冒泡。 focus：元素获得焦点的时候触发。不会冒泡。 focusin：元素获得焦点时触发，与HTML事件focus等价。 focusout：元素失去焦点时触发。 当焦点从页面中一个元素移动到另一个元素，会依次触发下列事件： focusout在失去焦点元素上触发。 focusin在获得焦点元素上触发。 blur focus 确定浏览器是否支持这些事件： var isSupported = document.implementation.hasFeature(&quot;FocusEvent&quot;, &quot;3.0&quot;); 鼠标与滚轮事件 click：用户单击主鼠标按钮或按下回车触发。 dblclick：用户双击主鼠标按钮触发。 mousedown：用户按下任意鼠标按钮触发。 mouseenter：鼠标光标从元素外部首次移动到元素范围之内时触发。这个事件不冒泡，在光标移动到后代元素上不会触发。 mouseleave：在位于元素上方的鼠标光标移动到元素范围之外时触发。这个事件不冒泡，光标移到后代元素上不会触发。 mousemove：鼠标指针在元素内部移动时重复触发。 mouseout：鼠标指针位于一个元素上方，然后用户将其移入到另一个元素时触发。另一个元素可以是该元素的外部元素或子元素。 mouseover：鼠标指针位于一个元素外部，首次移入另一个元素边界之内触发。 mouseup：用户释放鼠标按钮时触发。 检查是否支持上面事件可以使用如下代码 var isSupported = document.implementation.hasFeature(&quot;MouseEvent&quot;, &quot;3.0&quot;); alert(isSupported); 客户区坐标位置鼠标事件都是在浏览器视口中的特定位置上发生的，这个位置信息保存在事件对象的clientX和clientY属性中。视口坐标，页面坐标，屏幕坐标的区别可以看这个 12345var div = document.getElementById("myDiv");EventUtil.addHandler(div, "click", function(event) &#123; event = EventUtil.getEvent(event); alert("Client coordinates: " + event.clientX + "," + event.clientY);&#125;) 页面坐标位置通过客户区坐标位置能够知道鼠标是在视口中什么位置发生的，而页面坐标通过事件对象的pageX和pageY属性，告诉你事件是在页面中什么位置发生的。这两个属性表示鼠标光标在页面中的位置。坐标是从页面本身而非视口左边和顶边计算。 当页面没有滚动的的时候，页面坐标等于视口坐标，如果有滚动，页面坐标为滚动高度加上视口坐标。 12345var div = document.getElementById("myDiv");EventUtil.addHandler(div, "click", function(event) &#123; event = EventUtil.getEvent(event); alert("Page coordinates: " + event.pageX + "," + event.pageY);&#125;) 屏幕坐标位置屏幕坐标位置是相对于整个电脑屏幕的位置。属性为screenX和screenY。 12345var div = document.getElementById("myDiv");EventUtil.addHandler(div, "click", function(event) &#123; event = EventUtil.getEvent(event); alert("Screen coordinates: " + event.screenX + "," + event.screenY);&#125;) 修改键按下鼠标时键盘上的某些键的状态也可以影响到所要采取的操作。这些修改键是Shift，Ctrl，Alt和Meta（Windows的win键）。DOM为此规定了4个属性，表示这4个修改键的状态：shiftKey，ctrlKey，altKey和metaKey。这些属性中包含的都是布尔值，如果相应键按下，值为true，否则为false。 1234567891011121314151617181920212223var div = document.getElementById("myDiv");EventUtil.addHandler(div, "click", function(event) &#123; event = EventUtil.getEvent(event); var keys = new Array(); if (event.shiftKey) &#123; keys.push("shift"); &#125; if (event.ctrlKey) &#123; keys.push("ctrl"); &#125; if (event.altKey) &#123; keys.push("alt"); &#125; if (event.metaKey) &#123; keys.push("meta"); &#125; alert("Keys: " + keys.join(","));&#125;) 相关元素发生mouseover和mouseout事件时，还会涉及更多的元素。这两个事件都会涉及把鼠标指针从一个元素的边界之内移动到另一个元素的边界之内。对mouseover事件而言，事件的主目标是获得光标的元素，而相关元素是那个失去光标的元素。类似地，对mouseout事件而言，事件的主目标是失去光标的元素，而相关元素则是获得光标的元素。 DOM通过event对象的relatedTarget属性提供了相关元素的信息。这个属性只对mouseover和mouseout事件才包含值。 1234567var div = document.getElementById("myDiv");EventUtil.addHandler(div, "mouseout", function(event) &#123; event = EventUtil.getEvent(event); var target = EventUtil.getTarget(event); var relatedTarget = EventUtil.getRelatedTarget(event); alert("Mouse out of " + target.tagName + " to " + relatedTarget.tagName);&#125;); 鼠标按钮只有在主鼠标按钮被单击（或键盘回车被按下）的时候才会触发click事件，因此检测按钮的信息并不是必要的。但对于mousedown和mouseup事件来说，在其event对象内存在一个button属性，表示按下或释放的按钮。DOM的button属性可能有如下3个值：0表示主鼠标按钮，1表示中间鼠标按钮（滚轮按钮），2表示次鼠标按钮。IE8之前的button属性与DOM有很大差异，不做表述。具体的兼容鼠标检测见上面EventUtil 更多的事件信息DOM2级事件规范在event事件中还提供了detail属性，用于给出有关事件的更多信息。对于鼠标事件来说，detail中包含一个数值，表示在给定位置上发生了多少次单击。同一元素上相继发生一次mousedown和一次mouseup事件算一次单击。detail属性从1开始计数，每次单击后递增。如果鼠标在mouseup和mousedown之间移动了位置，detail会被重置为0. 鼠标滚轮事件mousewheel事件，当用户通过鼠标滚轮与页面发生交互，在垂直方向上滚动页面时（无论向上向下），就会触发mousewheel事件。这个事件可以在任何元素上触发，最终冒泡到window对象。mousewheel事件包含一个特殊的wheelDelta属性。当用户向前滚动鼠标滚轮，wheelDelta是120的倍数，当用户向后滚动滚轮，wheelDelta是-120的倍数。 1234EventUtil.addHandler(document, "mousewheel", function(event) &#123; event = EventUtil.getEvent(event); alert(event.wheelDelta);&#125;) 跨浏览器的解决方案 1234567getWheelDelta: function(event) &#123; if (event.wheelDelta) &#123; return (client.engine.opera &amp;&amp; client.engine.opera &lt; 9.5 ? -event.wheelDelta : event.wheelDelta); &#125; else &#123; return -event.detail * 40; //兼容Firefox &#125;&#125; 键盘与文本事件有三个键盘事件，如下： keydown：当用户按下键盘上的任意键时触发，如果按住不放，则重复触发。 keypress：当用户按下键盘上的字符键时触发，如果按住不放会重复触发。 keyup：当用户释放键盘上的键时触发。 用户按下一个字符键时，首先触发keydown，其次是keypress，最后是keyup。键盘事件同样也有shiftKey，ctrlKey，altKey和metaKey。 键码在发生keydown和keyup事件时，event对象的keyCode属性会包含一个代码。对数字字母字符键，keyCode属性的值与ASCII中对应小写字母或数字的编码相同。其他keyCode值在这里！ 字符编码charCode属性只有在发生keypress事件时才包含值，而且这个值是按下的那个键所代表的字符的ASCII编码。此时keyCode通常等于0或者也可能等于所按键的键码。对于IE8及其之前版本和Opera，则用keyCode来保存字符的ASCII编码，跨浏览器获取字符编码如下： 1234567getCharCode: function(event) &#123; if(typeof event.charCode == "number") &#123; return event.charCode; &#125; else &#123; return event.keyCode; &#125;&#125; 在DOM3级事件中，不再有charCode属性，而是key和char属性。key属性是一个字符串，当按下字符键，他的值是字符键的值（如”A”，”k”），当按下非字符键，他的值是相应键的名（如”Shift”，”Down”）。char属性按下字符键时显示字符键的值，按下非字符键，显示null。（存在跨浏览器的问题，所以不推荐使用上面两个值，以及Chorme和Safari 5的KeyIdentifier） textInput事件DOM3级事件规范引入的一个新事件，当用户在可编辑区域输入字符时，就会触发这个事件。任何可以获得焦点的元素都可以触发keypress事件，但只有可编辑区域才会触发textInput事件。textInput只会在用户按下能够输入实际字符的键时才会被触发，而keypress事件则在按下那些能够影响文本显示的键时也会触发（比如退格）。 textInput事件有一个data属性，表示用户输入的字符。 变动事件DOM2级的变动事件能在DOM中某一部分发生变化时给出提示。为XML或HTML DOM设计。DOM2级定义了如下变动事件。 DOMSubtreeModified：在DOM结构中发生任何变化时触发。这个事件在其他任何事件触发后都会触发。 DOMNodeInserted：在一个结点作为子节点被插入到另一个节点中触发。 DOMNodeRemoved：在结点从其父节点中被移除时触发。 var isSupported = document.implementation.hasFeature(&quot;MutationEvents&quot;, &quot;2.0&quot;);检查是否支持变动事件。 MDN的mutation事件 设备事件与触摸手势事件主要用于智能手机和平板电脑]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript事件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机网络之DNS服务]]></title>
    <url>%2F2019%2F04%2F10%2FDNS%2F</url>
    <content type="text"><![CDATA[DNSDNS是计算机网络应用层一个很重要的服务，了解它基本就了解了整个网络中域名到IP转换的过程。 DNS是什么在《计算机网络-自顶向下方法》中有这么一句话 DNS：因特网的目录服务 DNS（Domain Name System）其实就是一个目录，他的作用是通过用户给定域名，查出对应的IP地址。 而更为严格的定义就是：DNS是： 一个由分层的DNS服务器实现的分布式数据库 一个使得主机能够查询分布式数据库的应用层协议 或者说DNS是一个黑盒子，它提供了主机名到IP地址的转换，一个简便的DNS黑盒子过程如下： 同一台用户主机上运行着DNS应用的客户端 浏览器从URL中抽取出主机名，传给DNS应用的客户端 DNS客户向DNS服务器发送一个包含主机名的请求 DNS客户最终收到一份回答报文，其中含有对应该主机名的IP地址 一旦浏览器获得该地址，就可以向位于该IP地址的80端口的HTTP服务器进程发起一个TCP连接 DNS主要任务是主机名到IP地址转换的目录服务DNS除了有主机名到IP地址的转换服务外，还有如下服务： 主机别名 邮件服务器别名 负载分配 值得一提的是，DNS协议运行在UDP之上，使用53端口。 DNS分布式，层次数据库DNS是一个分布式，层次数据库，大致有三类：根DNS服务器，顶级域(TLD)DNS服务器和权威DNS服务器。还有一类是本地DNS服务器，每个ISP都有一台本地DNS服务器，本地DNS服务器起着代理的作用，将请求转发到DNS服务器的层次结构中。 在说服务器分层作用之前，先要说一下域名，常见的域名是例如www.example.com，但是它真正的域名是www.example.com.root，只是省略了后面的.root。.root称为根域名，.com，.net等等称为顶级域名(TLD)，.example称为次级域名，这个域名是用户可以注册的，再下一级是主机名(host)，比如www，又称为三级域名。 总结一下，域名的层级结构如下： 主机名(三级域名).次级域名.顶级域名.根域名 即host.sld.tld.root 根DNS服务器它将返回顶级域名的TLD服务器的IP地址，根域名服务器的NS记录和IP地址一般是不会变化的 顶级域DNS服务器它返回权威服务器的IP地址 权威DNS服务器它返回主机名(如www.amazon.com)的IP地址 本地DNS服务器严格上来说它不属于DNS层次结构，但它也很重要。本地DNS服务器由ISP提供，当主机发出DNS请求时，通常被发往到本地DNS服务器，由本地DNS服务器代理转发到DNS服务器层次结构 工作机理 以主机cis.poly.edu请求gaia.cs.umass.ude的IP地址为例，假设cis.poly.edu的本地DNS为dns.poly.edu，并且gaia.cs.umass.edu的权威DNS服务器为dns.umass.edu 主机cis.poly.edu首先向它的本地DNS服务器dns.poly.edu发送一个DNS查询报文 本地DNS服务器dns.poly.edu将报文转发到根DNS服务器，根DNS服务器注意到edu前缀并向本地DNS服务器返回负责edu的TLD的IP地址列表 该本地DNS服务器则再次向这些TLD服务器之一发送查询报文 该TLD服务器注意到umass.edu前缀，并用权威DNS服务器的IP地址进行响应 最后，本地DNS服务器直接向dns.umass.edu重发查询报文，dns.umass.edu将gaia.cs.umass.edu的IP地址进行响应 从请求主机到本地DNS服务器的查询是递归的，其余的查询是迭代的 DNS缓存为了改善时延性能并减少在因特网上到处传输的DNS报文数量，DNS广泛采用了缓存技术 它能够把回答中的信息缓存在本地存储器中，但该缓存不是永久的，由于主机和主机名与IP地址间的映射并不是永久的，所以DNS服务器一般在一段时间后（通常为2天）将丢弃缓存的信息。 DNS报文和记录DNS记录共同实现DNS分布式数据库的所有DNS服务器存储了资源记录（Resource Record，RR），RR提供了主机名到IP地址的映射。 RR是一个包含了下列字段的4元组：(Name, Value, Type, TTL) TTL是该记录的生存时间，它决定了资源记录应当从缓存中删除的时间 如果Type=A，则Name是主机名，Value是该主机名对应的IP地址 如果Type=NS，则Name是个域（如foo.com），Value是个知道如何获得该域中主机IP地址的权威DNS服务器的主机名。这个记录用于沿着查询链来路由DNS查询。（如(foo.com, dns.foo.com, NS)就是一个NS记录） 如果Type=CNAME，则Value是别名为Name的主机对应的规范主机名 如果Type=MX，则Value是个别名为Name的邮件服务器的规范主机名 如果一台DNS服务器是用于某特定主机名的权威DNS服务器，那么该DNS服务器会有一条包含该主机名的类型A记录如果服务器不是用于某主机名的权威服务器，那么该服务器将包含一条类型NS记录，该记录对应包含主机名的域；它还包括一条类型A记录，提供在NS记录的Value字段中的DNS的IP地址（比如edu TLD服务器不是主机gaia.cs.umass.edu的权威DNS服务器，则该服务器将包含一条包括主机cs.umass.edu的域记录，如(umass.edu, dns.umass.edu, NS)，该TLD服务器还将包含一条类型A记录，如(dns.umass.edu, 128.199.40.111, A)，该记录将名字dns.umass.edu映射为一个IP地址） DNS报文 对分级查询的进一步解释所谓”分级查询”，就是从根域名开始，依次查询每一级域名的NS记录，直到查到最终的IP地址，见下面的DNS记录可知 从”根域名服务器”查到”顶级域名服务器”的NS记录和A记录（IP地址） 从”顶级域名服务器”查到”次级域名服务器”的NS记录和A记录（IP地址） 从”次级域名服务器”查出”主机名”的IP地址 （根域名服务器的NS记录和IP地址一般是不会变化的，所以内置在DNS服务器中）]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[源码剖析-对String,StringBuilder,StringBuffer的区分]]></title>
    <url>%2F2019%2F03%2F25%2F%E5%AF%B9String%2CStringBuilder%2CStringBuffer%E7%9A%84%E5%8C%BA%E5%88%86(%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90)%2F</url>
    <content type="text"><![CDATA[源码剖析-对String,StringBuilder,StringBuffer的区分首先观察他们继承的类和接口 String：public final class String implements java.io.Serializable, Comparable&lt;String&gt;, CharSequence {}StringBuilder：public final class StringBuilder extends AbstractStringBuilder implements java.io.Serializable, CharSequence {}StringBuffer：public final class StringBuffer extends AbstractStringBuilder implements java.io.Serializable, CharSequence {} 可以观察到，String对象继承了Serializable，Comparable，CharSequence接口StringBuilder与StringBuffer均继承自AbstractStringBuilder父类，Serializable，CharSequence接口 Serializable是序列化接口，它的作用是： Serializability of a class is enabled by the class implementing the java.io.Serializable interface. String 源码剖析123456789@Stableprivate final byte[] value;private final byte coder;public String() &#123; this.value = &quot;&quot;.value; this.coder = &quot;&quot;.coder;&#125; String由value和coder组成，coder应该是它的编码格式，value就是它的值了，注意value是final类型的，即String对象是不可变的 Comparable接口String实现了Comparable接口，即String对象可以通过调用compareTo()方法进行比较，这是String与StringBuilder和StringBuffer的第一个区别 12345678910public int compareTo(String anotherString) &#123; byte v1[] = value; byte v2[] = anotherString.value; if (coder() == anotherString.coder()) &#123; return isLatin1() ? StringLatin1.compareTo(v1, v2) : StringUTF16.compareTo(v1, v2); &#125; return isLatin1() ? StringLatin1.compareToUTF16(v1, v2) : StringUTF16.compareToLatin1(v1, v2); &#125; 他主要实现了在当前字符编码上对字符串的比较，判断字符串是否相等 StringBuilder与StringBufferAbstractStringBuilder注意到在这个抽象类中定义了 123byte[] value;byte coder;int count; 但注意到value不是final类型，即他是可变的，这个是与String的第二个区别 他主要有扩容方法和添加方法，添加方法的参数类型有很多，比如String类型的，AbstactStringBuilder的，StringBuffer的，CharSequence的等等，下面是其中一个例子 12345678910public AbstractStringBuilder append(String str) &#123; if (str == null) &#123; return appendNull(); &#125; int len = str.length(); ensureCapacityInternal(count + len); putStringAt(count, str); count += len; return this;&#125; 扩容方法如下 123456789101112131415161718192021private void ensureCapacityInternal(int minimumCapacity) &#123; // overflow-conscious code int oldCapacity = value.length &gt;&gt; coder; if (minimumCapacity - oldCapacity &gt; 0) &#123; value = Arrays.copyOf(value, newCapacity(minimumCapacity) &lt;&lt; coder); &#125;&#125;private int newCapacity(int minCapacity) &#123; // overflow-conscious code int oldCapacity = value.length &gt;&gt; coder; int newCapacity = (oldCapacity &lt;&lt; 1) + 2; if (newCapacity - minCapacity &lt; 0) &#123; newCapacity = minCapacity; &#125; int SAFE_BOUND = MAX_ARRAY_SIZE &gt;&gt; coder; return (newCapacity &lt;= 0 || SAFE_BOUND - newCapacity &lt; 0) ? hugeCapacity(minCapacity) : newCapacity;&#125; 上面代码大概是若为utf16编码，则容量*2再+2，若为latin1编码，则容量+2，且设置了安全上限保护 CharSequence StringBuilderStringBuilder继承自AbstractStringBuilder，大部分代码都已经由其实现，StringBuilder只需要在构造器中调用super()方法即可，包括append()方法，delete()方法，replace()方法，insert()方法，indexOf()方法，lastIndexOf()方法，reverse()方法也都是调用super()方法即可。 StringBuffer而StringBuffer则是在AbstractStringBuilder的方法上添加了synchronized的关键字，即它是线程安全的 总结 String是可以比较的，通过compareTo()方法，而StringBuilder和StringBuffer只能通过toString()方法后再调用compareTo()方法来比较。 String对象是不可变的，其值是final类型，而StringBuilder和StringBuffer对象可变，并没有final修饰。 String 中的对象是不可变的，也就可以理解为常量，线程安全。AbstractStringBuilder 是 StringBuilder 与 StringBuffer 的公共父类，定义了一些字符串的基本操作，如 expandCapacity、append、insert、indexOf 等公共方法。StringBuffer 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。StringBuilder 并没有对方法进行加同步锁，所以是非线程安全的。 对他们的使用，应该遵循下面原则： 操作少量的数据 = String 单线程操作字符串缓冲区下操作大量数据 = StringBuilder 多线程操作字符串缓冲区下操作大量数据 = StringBuffer]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>StringBuilder</tag>
        <tag>StringBuffer</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git快速入门]]></title>
    <url>%2F2019%2F03%2F17%2Fgit%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[Git本地仓库创建版本库通过git init把当前目录变为Git可以管理的仓库 把文件放到Git仓库-add指令第一步,编写一个文件,放到该仓库目录下第二步,用命令git add yourFileName告诉git把文件添加到仓库 可以添加多个文件git add file1.txt file2.txt 提交到仓库-commit指令git add -m &quot;提本次提交的说明&quot;,用参数-m输入本次提交的说明 查看暂存区状态-status指令可以使用git status查看当前git状态 版本回退查看历史记录-log指令git log可以查看历史提交记录如果输出信息太多,可以加上--pretty=oneline参数 版本回退-reset指令git的当前版本用HEAD表示,上一个版本是HEAD^,上上个版本是HEAD^^,如果是上100个版本,可以表示为HEAD~100 git reset --hard HEAD^表示回退到上一个版本 如果后悔了,可以找到上面的命令行窗口,找到未来版本的commit id,比如当前版本最新ID为1094adb...,可以通过git reset --hard 1094a回到未来(可以不指定完整的id,git会自动寻找) 记录命令-reflog指令可以通过git reflog查询执行过的命令,并依此找到版本号,这样就可以通过git reset --hard 版本号回到任何版本 工作区和暂存区工作区就是电脑可以看到的目录工作区有一个目录.git，是Git的版本库，里面存了很多东西，其中有称为stage(或者叫index)的暂存区，还有Git自动创建的第一个分支master，以及指向master的一个指针叫HEAD。git add实际是把文件修改添加到暂存区 git commit实际是把暂存区的所有内容提交到当前分支 查看工作区和版本库区别-diff指令git diff HEAD -- youFile.txt：可以查看工作区和版本库最新版本的区别 撤销修改丢弃工作区的修改-checkout可以使用git checkout -- &lt;file&gt;把工作区中file的修改全部撤销 把暂存区的修改放回到工作区-resetgit reset HEAD &lt;file&gt;把暂存区的修改撤销掉,重新放回工作区，然后使用git checkout -- &lt;file&gt;即可撤销修改 删除文件在Git中,删除文件也是一个修改操作 删除暂存区文件-rm在Linux中,对于已经通过add添加到暂存区的文件，如果使用rm删除了文件,删错的情况下,可以git checkout -- &lt;file&gt;恢复文件如果确定删除，git rm &lt;file&gt;删掉，然后git commit提交对于在工作区的文件，使用rm删除无法恢复。 远程仓库添加远程仓库1.在GitHub上create a new repo新建一个仓库，填写仓库名后其他默认（不要生成readme，生成后不是空远程库了，手动在本地库添加上传即可）2.本地仓库与之关联，关联后远程库的名字是origin3.把本地库内容推送到远程（实际是把master分支推送到远程） 远程库关联本地库-remote add根据GitHub上的提示，在本地git bash上git remote add origin https://github.com/youGithubName/youRepo.git 即可关联，若取消关联git remote remove origin 本地库推送到远程-push第一次推送的时候git push -u origin master-u不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。 后续推送只需要git push origin master 从远程库克隆克隆远程库到本地-clonegit clone git@github.com:otherName/otherRepo.git 使用ssh克隆git clone https://github.com/otherName/otherRepo.git 使用https克隆 分支管理创建与合并分支每次提交时，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。 一开始的时候，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点： 每次提交时，master分支都会向前移动一步。 当我们创建分支的时候，例如dev时，Git会新建一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上： 从现在开始，对工作区任何修改和提交都是针对dev分支了，新提交一次后，dev和HEAD往前一步，master不变： 假如我们在dev上的工作完成了，就可以把dev合并到master上，把master指向dev当前的提交即可： 合并完分支后，甚至可以删除dev分支： 创建分支-branchgit branch dev创建dev分支 切换分支-checkoutgit checkout dev切换到dev分支 创建并切换分支-checkout -bgit checkout -b dev可以新建dev分支并切换到dev分支它相当于下面两条指令git branch dev创建dev分支git checkout dev切换到dev分支 现在，对git进行add和commit操作都是针对dev分支而言 修改完后git checkout master可以切换回master分支，此时，所有针对dev分支进行的改变都是不可见的 注意！暂存区对所有分支来说都是可见的！ 查看所有分支-branchgit branch可以查看所有分支，当前分支前会有 * 指示出来 合并分支-mergegit merge dev把dev分支合并到当前分支上 删除分支-branch -dgit branch -d dev可以删除分支dev，删除前提是当前分支不是dev（即HEAD指针不是指向dev） 解决冲突当两个分支修改的地方有冲突的时候，执行merge就会报错合并冲突，可以使用git stauts查看。冲突发生时分支如下： 打开冲突的文件，可以看到大概类似下面的东西 12345&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEADxxxxxx=============XXXXXX&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1 这里xxxxxx是HEAD分支修改的内容，XXXXXX是dev分支修改的内容 只要把这一部分修改成想要的内容，再git add xxx.txtgit commit -m &quot;conflict fixed即可 此时分支如下：（使用下一小节的命令可以查看图形化的分支） (P.S:对这样的分支树进行版本回退，他会退回到master的上一个版本而不是feature1） 然后删除feature1分支即可 也可以选择git merge --abort放弃合并 查看分支合并情况-log –graphgit log --graph --pretty=oneline --abbrev-commit可以以图形的信息查看分支情况 分支策略管理通常，合并分支的时候，Git会用Fast forward模式，在这种模式下，删除分支后，会丢掉分支信息。 如果强制禁用Fast forward，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。 禁用fast forward-merge –no-ffe.g.1.创建一个分支git checkout -b dev2.修改readme.txt并提交一个commitgit add readme.txt，git commit -m &quot;add merge&quot;3.切换到master，git checkout master4.合并dev分支，git merge --no-ff -m &quot;merge with no-ff&quot; dev 然后用git log可以看到merge的信息，使用 在fast forward模式下，log里是看不到merge的信息的，即 禁用fast forward的图示执行git merge --no-ff -m &quot;merge with no-ff&quot; dev合并后，禁用fast forward时，在合并分支后，git log的图示如下 可以看到是有一条merge的log的。 删除dev分支之前的git log --graph --pretty=oneline --abbrev-commit 此时虽然执行了merge操作，但dev和master并不指向同一目标，此时master指向的是在master分支下执行merge操作的log，而不是在dev分支下执行commit操作的log 对比下面是执行git merge dev的图示 git log如下： git log --graph --pretty=oneline --abbrev-commit如下： 可以看到并没有merge操作的log，而只有commit操作的log，非fast forward下的合并，仅仅是把master指针指向dev 分支策略实际开发应该遵循下面的基本原则进行分支管理：首先，master分支是非常稳定的，仅仅用来发布新版本，平时不能在上面干活；干活都在dev分支上，dev分支是不稳定的，到某个时候，比如发布1.0版本时，再把dev分支合并到master分支上，在master分支上发布1.0版本多人开发时，每个人都有自己的分支，时不时往dev分支上合并就可以，如下图所示 Bug分支每次出现Bug的时候，都可以新建一个临时分支来修复，修复后合并分支，然后删除临时分支，但如果出现BUG的时候当前手头工作未完成时，Git可以把当前工作现场保存，然后去修改BUG，再恢复现场继续工作 保存工作现场-stashgit stash可以保存当前工作现场，它大概就是，在工作区修改的文件，还没上传到暂存区，则保存工作区修改过的文件，或者已经上传到暂存区的文件，但还没有commit，则保存该文件，然后把工作区置干净(git status查看是干净的)，此时就可以放心创建分支来修复bug。如果没有stash，切换到master分支上修改bug的时候，会发现在dev分支修改的东西还存在，但因为还没写完，所以修改完bug之后commit的话，没写完的东西也会commit上去，这明显是错误的，stash就是为此而生，它把工作区暂存区的东西保存下来，然后让工作区干净，这样在dev上正在工作的，未完成的东西就不会出现了，也不会因为修改bug而提交到master了，然后创建分支修改完bug之后再切换回dev分支恢复现场即可。 注意！！，如果要在master分支上修复bug，则必须先切换到master分支，再新建一个分支！修改完分支后，切换回master分支并合并，然后删除bug分支即可 此时修复完bug，切换回工作分支，然后恢复刚刚stash的内容 查看stash内容-stash listgit stash list可以查看stash内容 恢复工作现场-stash applygit stash apply恢复工作现场，然后git stash drop删除stash内容 多次stash的时候，先用git stash list查看，然后恢复指定的stashgit stash apply stash@{0} 恢复工作现场-stash popgit stash pop恢复工作现场同时把stash内容删除 Feature分支软件开发中，当要添加新功能时，可以新建一个feature分支来实现。 强制删除分支—branch -D如果新功能要舍弃，分支还没合并就要删除，可以通过git branch -D &lt;name&gt;来删除参数-D是强制删除 多人协作当从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin 查看远程库的信息-remotegit remote可以查看远程库的信息git remote -v可以显示更详细的信息，显示了可以抓取和推送的origin地址，如果没有推送权限，则看不到push地址 推送分支git push origin master 如果要推送其他分支，比如dev，就改成git push origin dev 下面是分支的简介 master分支是主分支，时刻与远程同步 dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步 bug分支只用于本地修复bug，一般不需要推送到远程 feature分支是否推送到远程，取决于是否合作开发 抓取分支当另外一个人从远程库克隆的时候，默认情况下，他只能看到本地的master分支，如果要在dev分支上开发，就必须创建远程origin的dev分支到本地。 创建远程分支到本地git checkout -b dev origin/dev pullgit pull命令用于从另一个存储库或本地分支获取并集成，它的作用是：取回远程主机某个分支的更新，再与本地指定分支合并。 常见格式是git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;若与当前分支合并，则冒号和之后的内容不需要 多人协作的工作模式 首先，可以试图用git push origin &lt;branch-name&gt;推送自己的修改； 如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并； 如果合并有冲突，则解决冲突，并在本地提交； 没有冲突或者解决掉冲突后，再用git push origin &lt;branch-name&gt;推送就能成功！ 如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;。 Rebasegit rebase：把分叉的提交历史“整理”成一条直线，看上去更直观。缺点是本地的分叉提交已经被修改过了 标签管理它是版本的一个快照，发布一个版本时，先在版本库中打一个标签，然后将来某个时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。 实质上标签就是指向某个commit的指针（和分支很像，但它不能移动） 创建标签创建标签-tag首先切换到需要打标签的分支上然后输入git tag v1.0即可打上v1.0的标签 可以用命令git tag查看所有标签 默认标签是打在最新提交的commit上的，如果要打历史版本的标签，只需要找到历史提交的commit id，然后打上即可git tag v0.9 &lt;commit ID&gt; 还可以指定带有说明的标签，参数-a表示标签名，-m表示说明文字git tag -a v0.1 -m &quot;version 0.1 released&quot; &lt;commit ID&gt; git show &lt;tagname&gt;可以看到说明文字 操作标签删除标签-tag -dgit tag -d v0.1可以删除这个标签 推送标签到远程git push origin &lt;tagname&gt; 一次性推送全部标签git push origin --tags 删除远程标签 git tag -d &lt;tagname&gt;删除本地标签 git push origin :refs/tags/&lt;tagname&gt;删除远程标签 使用GitHub 点击Fork可以在自己账号下的远程仓库克隆一个别人的远程仓库 从自己账号下clone：git clone git@github.com:makloao/xxx.git，一定要克隆自己远程仓库到本地仓库，否则不能推送修改 如果想把自己的修改推送到官方，可以在GitHub上发起一个pull request 自定义Gitgit config --global.user.name &quot;Your name&quot;git config --global user.email &quot;email@example.com&quot;指定用户名和Email git config --global color.ui true让Git显示颜色 忽略特殊文件有些时候要把某些文件放到Git工作目录但又不能提交它们，比如保存了数据密码的配置文件等等只需要在Git工作区的目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去即可，如何写可以看GitHub的.gitignore文件写法 忽略文件的原则 忽略操作系统自动生成的文件，比如缩略图等； 忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件； 忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。 如果想强行添加被.gitignore忽略的文件git add -f xxx.class即可 .gitignore本身要放到版本库中，并且可以对其做版本管理 配置别名可以给命令配置别名git config --global alias.st status：把git status配置别名成git st，同理可以配置其他 一些比较推荐的别名1234567git config --global alias.st statusgit config --global alias.co checkoutgit config --global alias.ci commitgit config --global alias.br branchgit config --global alias.unstage &apos;reset HEAD&apos;git config --global alias.last &apos;log -1&apos; 显示最后一次提交git config --global alias.lg &quot;log --color --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit&quot; 设置log的显示颜色 配置文件配置文件都放在.git/config文件中 而当前用户的Git配置文件放在用户主目录的.gitconfig中 搭建Git服务器如果不想公开代码，又不想给GitHub交保护费 教程在这]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构03-排序基础]]></title>
    <url>%2F2018%2F11%2F29%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%8403-%E6%8E%92%E5%BA%8F%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[数据结构03-排序基础本章主要讲了几种基本的排序方法，分别为直接插入排序，希尔排序和基数排序，快排和归并排序由于用到了递归的思想，所以放在了后面递归章节来说。 排序的概念与分类含有多个数据项的数据元素称为记录。用作记录唯一标识的数据项称为关键字域，其值为关键字。若关键字唯一标识一个记录，则称为主关键字，否则为次关键字，记录类型定义如下： 12345typedef int KeyType;typedef struct &#123; KeyType key; ...&#125; RecordType, RcdType; 排序就是将无序的记录按关键字调整为有序记录序列的一种操作。一般排序都是对存储记录的顺序表排序。顺序表的0号单元留作它用。记录顺序表类型定义如下： 12345typedef struct &#123; RcdType *rcd; int length; int size;&#125; RcdSqList; 直接插入排序直接插入排序的思想是：每次将无序区的第一个记录按关键字插入到有序区的合适位置，并将有序区长度加1。 具体代码如下： 123456789101112void InsertSort(RcdSqList &amp;L) &#123; int i, j; for (i = 1; i &lt; L.length; i++) &#123; if (L.rcd[i+1].key &lt; L.rcd[i].key) &#123; // 需将L.rcd[i+1]插入到有序序列 L.rcd[0] = L.rcd[i+1]; // 把记录L.rcd[i+1]保存在空闲的0号单元 j = i+1; // j为要后移的记录后移之前的位置 do &#123; j--; L.rcd[j+1] = L.rcd[j] // 记录后移 &#125; while (L.rcd[0].key &lt; L.rcd[j-1].key) // 判断是否需要继续移动 L.rcd[j] = L.rcd[0]; &#125; &#125;&#125; 代码分析这里的插排的做法是：无序区的第一个记录是i+1号记录，把它放到0号位置（即哨兵），然后依次比较0号记录与有序区记录的大小，对有序区中比0号位置记录要大的元素依次后移（第i个位置的记录为有序区的最大记录，若比无序区第一个记录i+1对应的值要大，就把它的值直接放到i+1的位置，然后依次后移），并用 j 记录要后移的记录后移之前的位置，最后把0号位置的记录放到j号位置即可。 插入排序最好情况下比较次数n-1次，移动记录次数为0。最坏情况下，需要比较(n+2)(n-1)/2次，移动记录(n+4)(n-1)/2次，事件复杂度为O(n^2)，空间复杂度为O(1)。 希尔排序希尔排序的思想是：把整个待排记录序列(R1,R2,R3,…,Rn)按增量d划分为d个子序列，其中第i(1&lt;=i&lt;=d)个子序列为(Ri,R(i+d),R(i+2d),…,R(i+kd)，并分别对各子序列进行直接插入排序，不断减小增量d，直到d减小到1，对整个序列进行一次直接插入排序。 插入排序每次只对相邻记录进行比较，记录最多只移动一个位置，希尔排序每次对相隔较远距离的记录进行比较，使得记录移动时能跨过多个记录，实现宏观上的调整。 具体实现如下： 1234567891011121314151617void ShellInsert(RcdSqList &amp;L, int dk) &#123; // 对顺序表L进行一次希尔排序，增量为dk int i, j; for (i = 1; i &lt;= L.length-dk; ++i) if (L.rcd[i+dk].key &lt; L.rcd[i].dk) &#123; // 需将L.rcd[i+dk]插入有序序列 L.rcd[0] = L.rcd[i+dk]; j = i + dk; do &#123;j -= dkl L.rcd[j+dk] = L.rcd[j]; &#125; while (j - dk &gt; 0 &amp;&amp; L.rcd[0].key &lt; L.rcd[j-dk].key); L.rcd[j] = L.rcd[0]; &#125;&#125;void ShellSort(RcdSqList &amp;L, int d[], int t) &#123; // 按增量序列d[0..t-1]对顺序表L作希尔排序 int k; for (k = 0; k &lt; t; k++) ShellInsert(L, d[k]);&#125; 代码分析代码解释这里希尔排序的做法是：给定一个增量序列（该序列应该是递减的，并且最后的一个值是1），依次取值作为增量dk，把记录按增量dk划分为dk个序列，依次对每个序列进行插入排序 时间复杂度希尔排序的时间复杂度是所取增量序列的函数。当增量序列为d[k]=2^(t-k+1)-1时（t为排序趟数，1&lt;=k&lt;=t&lt;=log2(n+1)），事件复杂度为O(n^1.5)。 稳定性若待排序列存在两个或以上关键字相等的记录，则排序结果不唯一。假设ki = kj（1&lt;=i&lt;=n,1&lt;=j&lt;=n,i≠j），且在排序前序列ki领先于kj，若在排序后序列ki仍领先于kj，则该排序方法稳定，反之不稳定。希尔排序是不稳定的排序方法。 基数排序前面2种排序都是基于关键字比较，而基数排序不需要比较关键字，它借鉴了多关键字排序的思想，把单一关键字看成是多个关键字复合而成。 一般情况下，多关键字排序的定义为，假设含有n个记录的序列为(r1,r2,…,rn)。每个记录ri中含有m个关键字(ki(0),ki(1),…,ki(m-1))，如果对序列中任意两个记录ri和rj(1&lt;=i&lt;=j&lt;=n)都满足下列有序关系:(ki(0),ki(1),…,ki(m-1))&lt;(kj(0),kj(1),…,kj(m-1))则称记录对这m个关键字有序。其中k0被称为最主位关键字，k(m-1)被称为最次位关键字。 实现多关键字排序有两种策略，MSD(高位优先排序)和LSD(低位优先排序)。 MSD的思路为先按最主位关键字k0进行排序，得到若干子序列，其中每个子序列中的记录都含有相同个k0值，之后分别对每个子序列按关键字k1进行排序，使得k1值相同的记录构成长度更短的子序列，依次重复直到对每个子序列按k(m-1)从小到大排序，最后所得序列就是排序结果 LSD的思路为先按最低位关键字进行排序，接着按依次低位关键字实施排序，最后按最主位关键字进行排序，与MSD不同，其排序过程不产生子序列，每次都是对整个序列排序。 基数排序基本思路：先将所有关键字统一为相同的位数，位数少的前面补0，然后从最低位开始依次进行排序，直到按最高位排序完成。 下面说的是以顺序存储的基数排序的LSD实现 基数排序定义的数据类型123456789101112typedef struct &#123; KeysType *keys; // 关键字 ... // 其他数据项&#125; KeysRcdType;typedef struct &#123; KeysRcdType *rcd; // 0号位置作为哨兵 int length; // 顺序表长度 int size; // 顺序表容量 int digitNum; // 关键字位数，即rcd.keys每个值的长度 int radix; // 关键字基数，即关键字取值范围的长度，十进制为10，字母为26&#125; KeysSqList; 实现基数排序，需要引入3个数组，其中，数组count用于统计关键字的r种取值，pos数组用于确定各子序列的起始位置，rcd1数组与rcd一样，各趟收集中，第一趟从数组rcd收集到数组rcd1，第二趟从rcd1收集到rcd，如此交替进行，若总趟数为奇数，最后要排序结果从rcd1复制回rcd。 基数排序的过程与关键步骤基数排序有3个关键步骤，分别为计数，计算位置和收集。如下 计数计数是统计第i个关键字中取值范围内每个数的个数 12for(j = 0; j &lt; L.radix; ++j) count[j] = 0;for(k = 1; k &lt;= n; k++) count[rcd[k].keys[i]]++; 计算位置计算位置是计算第i个关键字中取值范围内每个值应该存放(收集)的位置。 12pos[0] = 1;for(j = 1; j &lt; radix; j++) pos[j] = count[j-1] + pos[j-1]; 收集收集是把依次把k(k=1直到n)个记录存放到正确的位置。 1234for(k = 1; k &lt;= n; k++) &#123; j = rcd[k].keys[i]; rcd1[pos[j]++] = rcd[k];&#125; 完整的基数排序代码1234567891011121314151617181920212223242526272829303132333435Status RadixSort(KeysSqList &amp;L) &#123; KeysRcdType *rcd1; int i = 0, j; int *count, *pos; count = (int*)malloc(sizeof(int)*L.radix); pos = (int*)malloc(sizeof(int)*L.radix); rcd1 = (KeysRcdType*)malloc(sizeof(KeysRcdType)*(L.length+1)); if(NULL == count || NULL == pos || NULL == rcd1) return OVERFLOW; while(i &lt; L.digitNum) &#123; for(j = 0; j &lt; L.radix; ++j) count[j] = 0; if(0 == i%2) RadixPass(L.rcd, rcd1, L.length, i++, count, pos, L.radix); else RadixPass(rcd1, L.rcd, L.length, i++, count, pos, L.radix); &#125; if(1 == L.digitNum%2) for(j = 1; j &lt;= L.length; ++j) L.rcd[j] = rcd1[j]; free(count); free(pos); free(rcd1); return OK;&#125;void RadixPass(KeysRcdType rcd[], KeysRcdType rcd1[], int n, int i, int count[], int pos[], int radix) &#123; int k, j; for(k = 1; k &lt;= n; k++) count[rcd[k].keys[i]]++; // count键为关键字基数，值为该基数的个数 pos[0] = 1; // 第j个关键字的起始位置为第j-1个关键字的起始位置加上j-1个关键字的个数 for(j = 1; j &lt; radix; j++) pos[j] = count[j-1] + pos[j-1]; for(k = 1; k &lt;= n; k++) &#123; // 收集过程 // k为第k个记录，j为第k个记录的第i个关键字的值 j = rcd[k].keys[i]; // pos[j]的定义是：关键字j的起始位置，这里把位置k的记录放到位置pos[j]处 // 并令pos[j]++，使下一个关键字收集到正确的位置 rcd1[pos[j]++] = rcd[k]; &#125;&#125;]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>插入排序</tag>
        <tag>希尔排序</tag>
        <tag>基数排序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构02-线性数据结构]]></title>
    <url>%2F2018%2F11%2F22%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%8402-%E7%BA%BF%E6%80%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F</url>
    <content type="text"><![CDATA[数据结构02-线性数据结构栈栈是一种后入先出的数据结构 顺序栈顺序栈类型定义如下 123456typedef struct &#123; ElemType *elem; // 存储空间基址 int top; // 栈顶元素下一位标 int size; // 当前分配的存储容量 int increment; // 扩容时，增加的存储容量&#125; SqStack; 顺序栈常用操作如下 1234567Status InitStack_Sq(SqStack &amp;S, int size, int inc);Status DestroyStack_Sq(SqStack &amp;S);Status StackEmpty_Sq(SqStack S);void ClearStack_Sq(SqStack &amp;S);Status Push_Sq(SqStack &amp;S, ElemType e);Status Pop_Sq(SqStack &amp;S, ElemType &amp;e);Status GetTop_Sq(SqStack S, ElemType &amp;e); 顺序栈的部分操作初始化123456789Status InitStack_Sq(SqStack &amp;S, int size, int inc)&#123; S = (ElemType*)malloc(size*sizeof(ElemType)); if(S == NULL) return OVERFLOW; S.top = 0; S.size = size; S.increment = inc; return OK;&#125; 入栈123456789101112Status Push_Sq(SqStack &amp;S, ElemType e)&#123; ElemType* newbase; if(S.top &gt;= S.size) &#123; newbase = (ElemType*)realloc(S.elem, (S.size+S.increment)*sizeof(ElemType)); if(NULL == newbase) return OVERFLOW; S.elem = newbase; S.size += S.increment; &#125; S.elem[S.top++] = e; return OK;&#125; 出栈123456789101112Status Pop_Sq(SqStack &amp;S, ElemType e) &#123; if(S.top &gt; 0) &#123; e = S.elem[--S.top]; return OK; &#125; else &#123; return ERROR; &#125;&#125; 判空12345Status StackEmpty_Sq(SqStack S)&#123; if(S.top == 0) return TRUE; return FALSE;&#125; 取栈顶元素123456789101112Status GetTop(SqStack S, ElemType &amp;e)&#123; if (S.top &gt; 0) &#123; e = S.elem(S.top - 1); return OK; &#125; else &#123; return ERROR; &#125;&#125; 顺序栈的部分习题123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119/**********【题目】若顺序栈的类型重新定义如下。试编写算法，构建初始容量和扩容增量分别为size和inc的空顺序栈S。typedef struct &#123; ElemType *elem; // 存储空间的基址 ElemType *top; // 栈顶元素的下一个位置 int size; // 当前分配的存储容量 int increment; // 扩容时，增加的存储容量&#125; SqStack2;***********/Status InitStack_Sq2(SqStack2 &amp;S, int size, int inc)/* 构建初始容量和扩容增量分别为size和inc的空顺序栈S。*/ /* 若成功，则返回OK；否则返回ERROR。 */&#123; S.elem = (ElemType*)malloc(size * sizeof(ElemType)); if(NULL == S.elem) return OVERFLOW; if (size &lt;= 0 || inc &lt;= 0) return ERROR; S.top = S.elem+1; S.size = size; S.increment = inc; return OK;&#125;/**********【题目】若顺序栈的类型重新定义如下。试编写算法，实现顺序栈的判空操作。typedef struct &#123; ElemType *elem; // 存储空间的基址 ElemType *top; // 栈顶元素的下一个位置 int size; // 当前分配的存储容量 int increment; // 扩容时，增加的存储容量&#125; SqStack2;***********/Status StackEmpty_Sq2(SqStack2 S)/* 对顺序栈S判空。 */ /* 若S是空栈，则返回TRUE；否则返回FALSE */&#123; if (S.top == S.elem) return TRUE; return FALSE;&#125;/**********【题目】若顺序栈的类型重新定义如下。试编写算法，实现顺序栈的入栈操作。typedef struct &#123; ElemType *elem; // 存储空间的基址 ElemType *top; // 栈顶元素的下一个位置 int size; // 当前分配的存储容量 int increment; // 扩容时，增加的存储容量&#125; SqStack2;***********/Status Push_Sq2(SqStack2 &amp;S, ElemType e)/* 若顺序栈S是满的，则扩容，若失败则返回ERROR。*//* 将e压入S，返回OK。 */&#123; ElemType* newbase; if((S.top - S.elem) / sizeof(ElemType) &gt; S.size) &#123; newbase = (ElemType*)realloc(S.elem, (S.size+S.increment)*sizeof(ElemType)); if(NULL == newbase) return OVERFLOW; S.elem = newbase; S.size += S.increment; &#125; *S.top++ = e; return OK; &#125;/**********【题目】若顺序栈的类型重新定义如下。试编写算法，实现顺序栈的入栈操作。typedef struct &#123; ElemType *elem; // 存储空间的基址 ElemType *top; // 栈顶元素的下一个位置 int size; // 当前分配的存储容量 int increment; // 扩容时，增加的存储容量&#125; SqStack2;***********/Status Push_Sq2(SqStack2 &amp;S, ElemType e)/* 若顺序栈S是满的，则扩容，若失败则返回ERROR。*//* 将e压入S，返回OK。 */&#123; ElemType* newbase; if((S.top - S.elem) / sizeof(ElemType) &gt; S.size) &#123; newbase = (ElemType*)realloc(S.elem, (S.size+S.increment)*sizeof(ElemType)); if(NULL == newbase) return OVERFLOW; S.elem = newbase; S.size += S.increment; &#125; *S.top++ = e; return OK; &#125;/**********【题目】试写一算法，借助辅助栈，复制顺序栈S1得到S2。顺序栈的类型定义为：typedef struct &#123; ElemType *elem; // 存储空间的基址 int top; // 栈顶元素的下一个位置，简称栈顶位标 int size; // 当前分配的存储容量 int increment; // 扩容时，增加的存储容量&#125; SqStack; // 顺序栈可调用顺序栈接口中下列函数：Status InitStack_Sq(SqStack &amp;S, int size, int inc); // 初始化顺序栈SStatus DestroyStack_Sq(SqStack &amp;S); // 销毁顺序栈SStatus StackEmpty_Sq(SqStack S); // 栈S判空，若空则返回TRUE，否则FALSEStatus Push_Sq(SqStack &amp;S, ElemType e); // 将元素e压入栈SStatus Pop_Sq(SqStack &amp;S, ElemType &amp;e); // 栈S的栈顶元素出栈到e***********/Status CopyStack_Sq(SqStack S1, SqStack &amp;S2) /* 借助辅助栈，复制顺序栈S1得到S2。 */ /* 若复制成功，则返回TRUE；否则FALSE。 */&#123; InitStack_Sq(S2, S1.size, S1.increment); if(NULL == S2.elem) return FALSE; for(int i = 0; i &lt; S1.top; i++) &#123; Push_Sq(S2, S1.elem[i]); &#125; return TRUE;&#125; 链栈链栈类型定义如下： 1234typedef struct LSNode &#123; ElemType data; struct LSNode *next;&#125; LSNode, *LStack; 接口定义如下： 123456void InitStack_LS(LStack &amp;S);void DestroyStack_LS(LStack &amp;S);Status StackEmpty_LS(LStack S);Status Push_LS(LStack &amp;S, ElemType e);Status Pop_LS(LStack &amp;S, &amp;ElemType e);Status GetTop_LS(LStack S, ElemType &amp;e); 入栈操作123456789Status Push_LS(LStack &amp;S, ElemType e) &#123; LSNode *t; t = (LSNode*)malloc(sizeof(LSNode)); if (NULL == t) return OVERFLOW; t-&gt;data = e; t-&gt;next = S; S = t; return OK;&#125; 出栈操作12345678Status Pop_LS(LStack &amp;S, ElemType &amp;e) &#123; LSNode *t = S; if (NULL == S) return ERROR; e = S-&gt;data; S = S-&gt;next; free(t); return OK;&#125; 部分习题12345678910111213141516171819202122232425262728293031/**********【题目】试写一算法，实现链栈的判空操作。链栈的类型定义为：typedef struct LSNode &#123; ElemType data; // 数据域 struct LSNode *next; // 指针域&#125; LSNode, *LStack; // 结点和链栈类型***********/Status StackEmpty_L(LStack S)/* 对链栈S判空。若S是空栈，则返回TRUE；否则返回FALSE */&#123; if(S == NULL) return TRUE; return FALSE;&#125;/**********【题目】试写一算法，实现链栈的取栈顶元素操作。链栈的类型定义为：typedef struct LSNode &#123; ElemType data; // 数据域 struct LSNode *next; // 指针域&#125; LSNode, *LStack; // 结点和链栈类型***********/Status GetTop_L(LStack S, ElemType &amp;e) /* 取链栈S的栈顶元素到e，并返回OK; *//* 若S是空栈，则失败，返回ERROR。 */&#123; if(S == NULL) return ERROR; e = S-&gt;data; return OK;&#125; 队列循环队列定义如下 123456typedef struct &#123; ElemType *elem; int front; int rear; // 队尾位标，表示队尾元素的下一位置 int maxSize;&#125; SqQueue; 循环队列是把队列看成首尾相连的顺序队列。有如下基本操作接口 12345678Status InitQueue_Sq(SqQueue &amp;Q);Status DestroyQueue_Sq(SqQueue &amp;Q);void ClearQueue_Sq(SqQueue &amp;Q);Status QueueEmpty_Sq(SqQueue Q)int QueueLength_Sq(SqQueue Q);Status GetHead_Sq(SqQueue Q, ElemType &amp;e); Status EnQueue_Sq(SqQueue &amp;Q, ElemType e);Status DeQueue_Sq(SqQueue &amp;Q, ElemType &amp;e); 循环队列的实现入队时，对队尾循环加一，如下 Q.rear = (Q.rear+1)%Q.maxSize; 出队时同样操作 对于队空队满的判断可以有如下判断方法 设一标志域标识队列的空或满 设一长度域记录队列中元素的个数 少用一个元素空间，一旦Q.front==(Q.rear+1)%Q.maxSize则队满 循环队列部分操作初始化操作1234567Status InitQueue_Sq(SqQueue &amp;Q, int size) &#123; Q.elem = (ElemType*)malloc(size*sizeof(ElemType)) if (Q.elem == NULL) return OVERFLOW; Q.maxSize = size; Q.front = Q.rear = 0; return OK;&#125; 出队操作123456Status DeQueue_Sq(SqQueue &amp;Q, ElemType &amp;e) &#123; if (Q.front == Q.rear) return ERROR; e = Q.elem[Q.front]; Q.front = (Q.front + 1) % Q.maxSize; return OK;&#125; 入队操作123456Status EnQueue_Sq(SqQueue &amp;Q, ElemType e) &#123; if (Q.front == (Q.rear + 1) % Q.maxSize) return ERROR; Q.elem[Q.rear] = e; Q.rear = (Q.rear + 1) % Q.maxSize; return OK;&#125; 循环队列的部分习题123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151/**********【题目】试写一算法，求循环队列的长度。循环队列的类型定义为：typedef struct &#123; ElemType *base; // 存储空间的基址 int front; // 队头位标 int rear; // 队尾位标，指示队尾元素的下一位置 int maxSize; // 最大长度&#125; SqQueue;***********/int QueueLength_Sq(SqQueue Q)/* 返回队列Q中元素个数，即队列的长度。 */ &#123; if(Q.front &lt;= Q.rear) return Q.rear - Q.front; else return Q.maxSize + Q.rear - Q.front;&#125;/**********【题目】如果希望循环队列中的元素都能得到利用，则可设置一个标志域tag，并以tag值为0或1来区分尾指针和头指针值相同时的队列状态是"空"还是"满"。试编写与此结构相应的入队列和出队列的算法。本题的循环队列CTagQueue的类型定义如下：typedef struct &#123; ElemType elem[MAXQSIZE]; int tag; int front; int rear;&#125; CTagQueue;**********/Status EnCQueue(CTagQueue &amp;Q, ElemType x)/* 将元素x加入队列Q，并返回OK；*//* 若失败，则返回ERROR。 */&#123; if(Q.front == Q.rear &amp;&amp; Q.tag == 1) return ERROR; Q.elem[Q.rear] = x; Q.rear = (Q.rear+1)%MAXQSIZE; if(Q.rear == Q.front) Q.tag = 1; return OK; &#125;Status DeCQueue(CTagQueue &amp;Q, ElemType &amp;x)/* 将队列Q的队头元素退队到x，并返回OK；*//* 若失败，则返回ERROR。 */&#123; if(Q.front == Q.rear &amp;&amp; Q.tag == 0) return ERROR; x = Q.elem[Q.front]; Q.front=(Q.front+1)%MAXQSIZE; if(Q.front == Q.rear) Q.tag = 0; return OK;&#125;/**********【题目】假设将循环队列定义为：以域变量rear和length分别指示循环队列中队尾元素的位置和内含元素的个数。试给出此循环队列的队满条件，并写出相应的入队列和出队列的算法（在出队列的算法中要返回队头元素）。本题的循环队列CLenQueue的类型定义如下：typedef struct &#123; ElemType elem[MAXQSIZE]; int length; int rear;&#125; CLenQueue;**********/Status EnCQueue(CLenQueue &amp;Q, ElemType x) /* 将元素x加入队列Q，并返回OK；*/ /* 若失败，则返回ERROR。 */&#123; if (Q.length == MAXQSIZE) return ERROR; Q.rear = (Q.rear+1)%MAXQSIZE; Q.elem[Q.rear] = x; Q.length++; return OK;&#125;Status DeCQueue(CLenQueue &amp;Q, ElemType &amp;x) /* 将队列Q的队头元素退队到x，并返回OK；*/ /* 若失败，则返回ERROR。 */&#123; if (Q.length == 0) return ERROR; x = Q.elem[(MAXQSIZE + Q.rear - Q.length + 1)%MAXQSIZE]; Q.length--; return OK;&#125;/**********【题目】已知k阶斐波那契序列的定义为: f0=0, f1=0, …, fk-2=0, fk-1=1; fn=fn-1+fn-2+…+fn-k, n=k,k+1,…试利用循环队列编写求k阶斐波那契序列中第n+1项fn的算法。本题的循环队列的类型定义如下：typedef struct &#123; ElemType *base; // 存储空间的基址 int front; // 队头位标 int rear; // 队尾位标，指示队尾元素的下一位置 int maxSize; // 最大长度&#125; SqQueue;**********/// 想着构造一个maxSize为n+1的循环队列来计算，但是没做出来。。。long Fib(int k, int n)/* 求k阶斐波那契序列的第n+1项fn */&#123; struct SqQueue q; q.front = 0; q.rear = 0; q.maxSize = n+1; q.base = (ElemType*)malloc((n+1)*sizeof(ElemType)); if(q.base == NULL) return OVERFLOW; int i, j, t; for(i = 0; i &lt; k - 1; i++) &#123; q.base[i] = 0; &#125; q.base[i++] = 1; for(t = i; t &lt; n+1; t++) &#123; for(j = t-1; j &gt;= t-k; j--) &#123; q.base[t] += q.base[j]; &#125; &#125; return q.base[n]; &#125;// 下面这种做法时间复杂度O(n2)，空间复杂度O(n)/* struct SqQueue q; q.front = 0; q.rear = 0; q.maxSize = n+1; q.base = (ElemType*)malloc((n+1)*sizeof(ElemType)); if(q.base == NULL) return OVERFLOW; int i, j, t; for(i = 0; i &lt; k - 1; i++) &#123; q.base[i] = 0; &#125; q.base[i++] = 1; for(t = i; t &lt; n+1; t++) &#123; for(j = t-1; j &gt;= t-k; j--) &#123; q.base[t] += q.base[j]; &#125; &#125; return q.base[n]; */ 链队列类型定义如下： 123456789typedef struct LQNode &#123; ElemType data; struct LQNode *next;&#125; LQNode, *QueuePtr;typedef struct &#123; QueuePtr front; QueuePtr rear;&#125; LQueue; 接口如下 1234567void InitQueue_LQ(LQueue &amp;Q);void DestroyQueue_LQ(LQueue &amp;Q);Status QueueEmpty_LQ(LQueue Q);int QueueLength_LQ(LQueue Q);Status GetHead_LQ(LQueue Q, ElemType &amp;e);Status EnQueue_LQ(LQueue &amp;Q, ElemType e);Status DeQueue_LQ(LQueue &amp;Q, ElemType &amp;e); 入队操作1234567891011Status EnQueue_LQ(LQueue &amp;Q, ElemType e) &#123; LQNode *p; p = (LQNode*)malloc(sizeof(LQNode)); if (NULL == p) return OVERFLOW; p-&gt;data = e; p-&gt;next = NULL; if (NULL == Q.front) Q.front = p; else Q.rear-&gt;next = p; Q.rear = p; return OK;&#125; 出队操作12345678910Status DeQuquq_LQ(LQueue &amp;Q, ElemType &amp;e) &#123; LQNode *p; if (NULL == Q.front) return ERROR; p = Q.front; e = p-&gt;data; Q.front = p-&gt;next; if (Q.rear == p) Q.rear = NULL; free(p); return OK;&#125; 部分习题1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586/**********【题目】试写一算法，实现链队列的判空操作。链队列的类型定义为：typedef struct LQNode &#123; ElemType data; struct LQNode *next; &#125; LQNode, *QueuePtr; // 结点和结点指针类型typedef struct &#123; QueuePtr front; // 队头指针 QueuePtr rear; // 队尾指针&#125; LQueue; // 链队列类型***********/Status QueueEmpty_LQ(LQueue Q)/* 判定链队列Q是否为空队列。 *//* 若Q是空队列，则返回TRUE，否则FALSE。*/&#123; if(Q.front == NULL &amp;&amp; Q.rear == NULL) return TRUE; return FALSE;&#125;/**********【题目】试写一算法，实现链队列的求队列长度操作。链队列的类型定义为：typedef struct LQNode &#123; ElemType data; struct LQNode *next; &#125; LQNode, *QueuePtr; // 结点和结点指针类型typedef struct &#123; QueuePtr front; // 队头指针 QueuePtr rear; // 队尾指针&#125; LQueue; // 链队列类型***********/int QueueLength_LQ(LQueue Q)/* 求链队列Q的长度并返回其值 */&#123; int length=0; LQNode *pt; pt=Q.front; while(pt != Q.rear-&gt;next)&#123; length++; pt=pt-&gt;next; &#125; free(pt); return length;&#125;/**********【题目】假设以带头结点的循环链表表示队列，并且只设一个指针指向队尾元素结点(注意不设头指针)，试编写相应的队列初始化、入队列和出队列的算法。带头结点循环链队列CLQueue的类型定义为：typedef struct LQNode &#123; ElemType data; struct LQNode *next;&#125; LQNode, *CLQueue;**********/Status InitCLQueue(CLQueue &amp;rear) // 初始化空队列&#123; if(NULL==(rear=(LQNode*)malloc(sizeof(LQNode)))) return OVERFLOW; rear-&gt;next = rear; return OK;&#125;Status EnCLQueue(CLQueue &amp;rear, ElemType x) // 入队&#123; LQNode* oldRear = rear; LQNode* head=rear-&gt;next; if(NULL==(rear=(LQNode*)malloc(sizeof(LQNode)))) return OVERFLOW; rear-&gt;next = head; rear-&gt;data = x; oldRear-&gt;next = rear; return OK;&#125;Status DeCLQueue(CLQueue &amp;rear, ElemType &amp;x) // 出队&#123; if(rear-&gt;next == rear) return ERROR; LQNode* head = rear-&gt;next; LQNode* headNext = head-&gt;next; x = headNext-&gt;data; head-&gt;next = headNext-&gt;next; free(headNext); return OK;&#125; 线性表顺序表采用顺序存储结构表示的线性表为顺序表。存储位置相邻表示位序相继的两个元素之间的前驱和后继关系。因顺序表的结构，在表中插入或删除元素不方便，所以只考虑表尾插入和删除元素，这样的顺序表也可称为栈表，类型定义如下。 123456typedef struct &#123; ElemType *elem; int length; int size; int increment;&#125; SqList; 基本接口如下 1234567891011Status InitList_Sq(SqList &amp;L, int size, int inc);Status DestroyList_Sq(SqList &amp;L);Status ClearList_Sq(SqList &amp;L);Status ListEmpty_Sq(SqList L);int ListLength_Sq(SqList L);Status GetElem_Sq(SqList L, int i, ElemType &amp;e);int Search_Sq(SqList L, ElemType e); // 顺序表中查找元素e，返回e出现第一个的位置，否则返回-1Status ListTraverse_Sq(SqList L, Status (*visit)(ElemType e)); // 遍历顺序表L，依次对每个元素调用visit()Status PutElem_Sq(SqList &amp;L, int i, ElemType e);Status Append_Sq(SqList &amp;L, ElemType e);Status DeleteLast_Sq(SqList &amp;L, ElemType &amp;e); 删除表尾元素12345Status DeleteLast_Sq(SqList &amp;L, ElemType &amp;e) &#123; if (L.length == 0) return ERROR; e = L.elem[--L.length]; return OK;&#125; 顺序查找123456int Search_Sq(SqList L, ElemType e) &#123; int i = 0; while(i&lt;L.length &amp;&amp; L.elem[i] != e) i++; if(i &lt; L.length) return i; else return -1;&#125; 有序顺序表的归并123456789101112131415161718192021222324252627void MergeList_Sq(SqList La, SqList Lb, SqList &amp;Lc) &#123; // 已知有序顺序表La和Lb中的数据元素按值非递减排序 // 归并La和Lb得到新的有序顺序表Lc，Lc的数据元素也按值非递减排列 int i = 0, j = 0, size, increment = 10; ElemType ai, bj; size = La.length + Lb.length; InitList_Sq(Lc, size, increment); while (i &lt; La.length &amp;&amp; j &lt; Lb.length) &#123; GetElem_Sq(La, i, ai); GetElem_Sq(Lb, j, bj); if (ai &lt;= bj) &#123; Append_Sq(Lc, ai); i++; &#125; else &#123; Append_Sq(Lc, bj); j++; &#125; &#125; while (i &lt; La.length) &#123; GetElem_Sq(La, i++, ai); Append_Sq(Lc, ai); &#125; while (j &lt; Lb.length) &#123; GetElem_Sq(Lb, j++, bj); Append_Sq(Lc, bj); &#125;&#125; 部分习题123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126/**********【题目】设A=(a1,…,am)和B=(b1,…,bn)均为有序顺序表，A'和B'分别为A和B中除去最大共同前缀后的子表（例如，A=(x,y,y,z,x,z)，B=(x,y,y,z,y,x,x,z)，则两者中最大的共同前缀为(x,y,y,z)， 在两表中除去最大共同前缀后的子表分别为A'=(x,z)和B'=(y,x,x,z)）。若A'=B'=空表，则A=B；若A'=空表，而B'≠ 空表，或者两者均不为空表，且A'的首元小于B'的首元，则A&lt;B；否则A&gt;B。试写一个比较A和B大小的算法。（注意：在算法中，不要破坏原表A和B，也不一定先求得A'和B'才进行比较）。顺序表类型定义如下：typedef struct &#123; ElemType *elem; int length; int size; int increment;&#125; SqList;**********/char Compare(SqList A, SqList B)/* 比较顺序表A和B, *//* 返回'&lt;', 若A&lt;B; *//* '=', 若A=B; *//* '&gt;', 若A&gt;B */&#123; int min = (A.length&lt;=B.length)?A.length:B.length; int i; for(i = 0; i &lt; min; i++) &#123; if(A.elem[i] == B.elem[i]) continue; else if(A.elem[i] &lt; B.elem[i]) return '&lt;'; else if(A.elem[i] &gt; B.elem[i]) return '&gt;'; &#125; if(i == A.length &amp;&amp; i == B.length) return '='; else if(i == A.length) return '&lt;'; else return '&gt;';&#125;/**********【题目】试写一算法，实现顺序表的就地逆置，即利用原表的存储空间将线性表(a1,a2,…,an)逆置为(an,an-1,…,a1)。顺序表类型定义如下：typedef struct &#123; ElemType *elem; int length; int size; int increment;&#125; SqList;**********/void Inverse(SqList &amp;L)&#123; ElemType temp; for(int i = 0; i &lt; L.length/2; i++) &#123; temp = L.elem[i]; L.elem[i] = L.elem[L.length-i-1]; L.elem[L.length-i-1] = temp; &#125;&#125;/**********【题目】试对一元稀疏多项式Pn(x)采用存储量同多项式项数m成正比的顺序存储结构，编写求Pn(x0)的算法（x0为给定值）。一元稀疏多项式的顺序存储结构:typedef struct &#123; int coef; // 系数 int exp; // 指数&#125; Term;typedef struct &#123; Term *elem; // 存储空间基址 int length; // 长度（项数）&#125; Poly;**********/float Evaluate(Poly P, float x)/* P.elem[i].coef 存放ai， *//* P.elem[i].exp存放ei (i=1,2,...,m) *//* 本算法计算并返回多项式的值。不判别溢出。 *//* 入口时要求0≤e1&lt;e2&lt;...&lt;em，算法内不对此再作验证 */&#123; float temp = 1.0; float result = 0; int exexp = 0; int j; for(int i = 0;i &lt; P.length; i++) &#123; for(j = exexp; j &lt; P.elem[i].exp; j++) temp *= x; result += temp * P.elem[i].coef; exexp = P.elem[i].exp; &#125; return result;&#125;/**********【题目】假设有两个集合A和B分别用两个线性表LA和LB表示(即：线性表中的数据元素即为集合中的成员），试写一算法，求并集A＝A∪B。顺序表类型定义如下typedef struct &#123; ElemType *elem; // 存储空间的基址 int length; // 当前长度 int size; // 存储容量 int increment; // 空间不够增加空间大小&#125; SqList; // 顺序表可调用顺序表的以下接口函数： Status InitList_Sq(SqList &amp;L, int size, int inc); // 初始化顺序表Lint ListLength_Sq(SqList L); // 返回顺序表L中元素个数Status GetElem_Sq(SqList L, int i, ElemType &amp;e); // 用e返回顺序表L中第i个元素的值int Search_Sq(SqList L, ElemType e); // 在顺序表L顺序查找元素e，成功时返回该元素在表中第一次出现的位置，否则返回-1Status Append_Sq(SqList &amp;L, ElemType e); // 在顺序表L表尾添加元素e**********/void Union(SqList &amp;La, SqList Lb)&#123; ElemType data; for(int i = 1; i &lt;= ListLength_Sq(Lb); i++) &#123; GetElem_Sq(Lb, i, data); if(Search_Sq(La, data) == -1) Append_Sq(La, data); &#125;&#125; 单链表链表和单链栈的结构体定义是一样的，它们的区别是性质和操作，链栈是一个栈，它的操作接口有入栈，出栈，取栈顶元素等，而链表是一个表，是有结构的数据的集合，它的操作有插入，删除，遍历等。 1234typedef struct LNode &#123; ElemType data; struct LNode *next;&#125; LNode, *LinkList; 基本操作接口如下： 1234567891011Status InitList_L(LinkList &amp;L);Status DestroyList_L(LinkList &amp;L);Status ClearList_L(LinkList &amp;L);Status ListEmpty_L(LinkList L);init ListLength_L(LinkList L);LNode* Search_L(LinkList L, ElemType e);LNode* NextElem_L(LNode *p); // 返回p结点的直接后继LNode* MakeNode_L(ElemType e); // 构造元素e的结点，返回指向该结点指针Status InsertAfter_L(LNode *p, LNode *q); // 结点p后插入结点qStatus DeleteAfter_L(LNode *p, ElemType &amp;e); // 删除p结点的直接后继结点，用e返回结点值void ListTraverse_L(LinkList L, Status (*visit)(ElemType e)); // 遍历单链表L 单链表初始化123456Status InitList_L(LinkList &amp;L) &#123; if(NULL==(LNode*)malloc(sizeof(LNode))) return OVERFLOW; L-&gt;next = NULL; return OK;&#125; 查找元素操作12345678LNode* Search_L(LinkList L, ElemType e) &#123; LNode *p; if (NULL == L) return ERROR; p = L-&gt;next; // 带头结点 while(p-&gt;data != e &amp;&amp; p != NULL) p = p-&gt;next; return p;&#125; 求直接后继操作1234LNode* NextElem_L(LNode *p) &#123; if (p == NULL) return NULL; return p-&gt;next;&#125; 构造结点操作123456789LNode *MakeNode_L(ElemType e) &#123; LNode *p; p = (LNode*)malloc(sizeof(LNode)); if (NULL != p) &#123; p-&gt;next = NULL; p-&gt;data = e; &#125; return p;&#125; 插入直接后继结点操作123456Status InsertAfter_L(LNode *p, LNode *q) &#123; if (NULL == p || NULL == q) return ERROR; q-&gt;next = p-&gt;next; p-&gt;next = q; return OK;&#125; 删除直接后继结点操作123456789Status DeleteAfter_L(LNode *p, ElemType &amp;e) &#123; LNode *q; if (p == NULL || p-&gt;next == NULL) return ERROR; q = p-&gt;next; p-&gt;next = q-&gt;next; e = q-&gt;data; free(q); return OK;&#125; 单链表的逆置1234567891011void InverseList(LinkList L) &#123; LNode *q, *p; if(NULL == L-&gt;next || NULL == L-&gt;next-&gt;next) return; p = L-&gt;next; L-&gt;next = NULL; while(p != NULL) &#123; q = p-&gt;next; InsertAfter_L(L, p); p = q; &#125;&#125; 部分习题123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319/**********【题目】试写一算法，实现带头结点单链表的判空操作。单链表的类型定义为：typedef struct LNode &#123; ElemType data; struct LNode *next; &#125; LNode, *LinkList; // 结点和结点指针类型***********/Status ListEmpty_L(LinkList L)/* 判定带头结点单链表L是否为空链表。 *//* 若L是空链表，则返回TRUE，否则FALSE。*/&#123; if(L-&gt;next == NULL) return TRUE; // 带头结点，头结点保存了一些信息 return FALSE;&#125;/**********【题目】试写一算法，实现带头结点单链表的销毁操作。单链表的类型定义为：typedef struct LNode &#123; ElemType data; struct LNode *next; &#125; LNode, *LinkList; // 结点和结点指针类型***********/Status DestroyList_L(LinkList &amp;L)/* 销毁带头结点单链表L，并返回OK。*/&#123; LNode* n = L; while((n=n-&gt;next) != NULL) free(n); free(L); return OK;&#125;/**********【题目】试写一算法，实现带头结点单链表的清空操作。单链表的类型定义为：typedef struct LNode &#123; ElemType data; struct LNode *next; &#125; LNode, *LinkList; // 结点和结点指针类型***********/Status ClearList_L(LinkList &amp;L)/* 将带头结点单链表L置为空表，并返回OK。*//* 若L不是带头结点单链表，则返回ERROR。 */&#123; if(L == NULL) return ERROR; LNode* n = L; while((n=n-&gt;next)!=NULL) free(n); L-&gt;next = NULL; // 释放完内存后，L-&gt;next仍然指向之前分配的，尽管那片空间已经被释放 return OK; &#125;/**********【题目】试写一算法，实现带头结点单链表的求表长度操作。单链表的类型定义为：typedef struct LNode &#123; ElemType data; struct LNode *next; &#125; LNode, *LinkList; // 结点和结点指针类型***********/int ListLength_L(LinkList L)/* 求带头结点单链表L的长度，并返回长度值。*//* 若L不是带头结点单链表，则返回-1。 */&#123; if(L == NULL) return -1; int length = 0; LNode* p = L; while((p=p-&gt;next)!=NULL) length++; return length; &#125;/**********【题目】试写一算法，在带头结点单链表L插入第i元素e。带头结点单链表的类型定义为：typedef struct LNode &#123; ElemType data; struct LNode *next;&#125; LNode, *LinkList;**********/Status Insert_L(LinkList L, int i, ElemType e)/* 在带头结点单链表L插入第i元素e，并返回OK。*//* 若参数不合理，则返回ERROR。 */&#123; // i为第i个位置 // 不能插入到0号位置头结点处 int c; LNode *p=L, *q; if(i&lt;=0) return ERROR; if(L==NULL) return ERROR; if((q=(LNode*)malloc(sizeof(LNode)))==NULL) return OVERFLOW; for(c=1,p=L; c&lt;i; c++) &#123; p = p-&gt;next; if(p == NULL) return ERROR; &#125; q-&gt;data = e; q-&gt;next = p-&gt;next; p-&gt;next = q; return OK;&#125;/**********【题目】试写一算法，在带头结点单链表删除第i元素到e。带头结点单链表的类型定义为：typedef struct LNode &#123; ElemType data; struct LNode *next;&#125; LNode, *LinkList;**********/Status Delete_L(LinkList L, int i, ElemType &amp;e)/* 在带头结点单链表L删除第i元素到e，并返回OK。*//* 若参数不合理，则返回ERROR。 */&#123; // p是第i个结点的前一个结点，q是第i个结点 // 执行删除操作，要确保q结点不是NULL int c; LNode *p=L, *q; if(L==NULL || p-&gt;next == NULL) return ERROR; if(i &lt;= 0) return ERROR; for(c=1,p=L; c&lt;i; c++) &#123; p = p-&gt;next; if(p-&gt;next == NULL) return ERROR; &#125; q = p-&gt;next; e = q-&gt;data; p-&gt;next = q-&gt;next; p-&gt;next = q-&gt;next; free(q); return OK;&#125;/**********【题目】试写一算法，在带头结点单链表的第i元素起的所有元素从链表移除，并构成一个带头结点的新链表。带头结点单链表的类型定义为：typedef struct LNode &#123; ElemType data; struct LNode *next;&#125; LNode, *LinkList;**********/Status Split_L(LinkList L, LinkList &amp;Li, int i)/* 在带头结点单链表L的第i元素起的所有元素 *//* 移除，并构成带头结点链表Li，返回OK。 *//* 若参数不合理，则Li为NULL，返回ERROR。 */&#123; if(i &lt;= 0) &#123; Li = NULL; return ERROR; &#125; LNode* p = L; LNode *t1, *t2; Li = (LNode*)malloc(sizeof(LNode)); // 到最后的时候，t2为L的尾指针，t3为Li的尾指针 int c; for(c = 0; c &lt; i-1; c++) p = p-&gt;next; // 此时p为i-1个元素 t2 = p; p = p-&gt;next; // 此时p为Li的头指针 if(p == NULL) &#123; Li = NULL; return ERROR; &#125; Li-&gt;next = p; t2-&gt;next = NULL; return OK;&#125;/**********【题目】试写一算法，在带头结点单链表删除第i元素起的所有元素。带头结点单链表的类型定义为：typedef struct LNode &#123; ElemType data; struct LNode *next;&#125; LNode, *LinkList;**********/Status Cut_L(LinkList L, int i)/* 在带头结点单链表L删除第i元素起的所有元素，并返回OK。*//* 若参数不合理，则返回ERROR。 */&#123; if(i &lt;= 0) return ERROR; LNode* p = L; LNode* t1; // 用于释放内存 LNode* t2; // 用于保存第i-1个元素，删除后继节点后，使它的next为NULL int c; for(c = 0; c &lt; i-1; c++) p = p-&gt;next; // 此时p为i-1个元素 t2 = p; p = p-&gt;next; if(p == NULL) return ERROR; while(p) &#123; t1 = p; p = p-&gt;next; free(t1); &#125; t2-&gt;next = NULL; return OK; &#125;/**********【题目】试写一算法，删除带头结点单链表中所有值为x的元素，并释放被删结点空间。单链表类型定义如下：typedef struct LNode &#123; ElemType data; struct LNode *next;&#125; LNode, *LinkList;**********/Status DeleteX_L(LinkList L, ElemType x)/* 删除带头结点单链表L中所有值为x的元素， *//* 并释放被删结点空间，返回实际删除的元素个数。*/&#123; /*LNode* p = L; LNode* temp; int count=0; while(p-&gt;next != NULL) &#123; while(p-&gt;next-&gt;data == x) &#123; temp = p-&gt;next; p-&gt;next = p-&gt;next-&gt;next; free(temp); count++; &#125; p = p-&gt;next; &#125; return count; */ LNode *p1, *p2, *p3; int j = 0; p1=p2=L; if(NULL==p1) return j; while(p2!=NULL) &#123; p2=p1-&gt;next; if(p2-&gt;data == x &amp;&amp; p2 != NULL) &#123; p3 = p2; p2 = p3-&gt;next; p1-&gt;next = p2; free(p3); j++; &#125; else if(p2-&gt;data != x) &#123; p1 = p2; p2 = p1-&gt;next; &#125; &#125; return j;&#125;/**********【题目】试写一算法，删除带头结点单链表中所有值小于x的元素，并释放被删结点空间。单链表类型定义如下：typedef struct LNode &#123; ElemType data; struct LNode *next;&#125; LNode, *LinkList;**********/Status DeleteSome_L(LinkList L, ElemType x)/* 删除带头结点单链表L中所有值小于x的元素， *//* 并释放被删结点空间，返回实际删除的元素个数。*/&#123; LNode* p = L; LNode* temp; int count = 0; while(p-&gt;next != NULL) &#123; /* 下面的while如果不加p-&gt;next!=NULL就报错 * 到底为什么会这样我也不清楚，写blog的时候就用下面注释的代码吧 * 猜测是p-&gt;next = p-&gt;next-&gt;next; p = p-&gt;next; * 当p-&gt;next-&gt;next为NULL的时候，p=p-&gt;next就为NULL了，但此时p-&gt;next不为NULL */ while(p-&gt;next-&gt;data &lt; x &amp;&amp; p-&gt;next != NULL) &#123; temp = p-&gt;next; p-&gt;next = p-&gt;next-&gt;next; free(temp); count++; &#125; p = p-&gt;next; &#125; return count; /* LNode *p1, *p2, *p3; int j = 0; p1=p2=L; if(NULL==p1) return j; while(p2!=NULL) &#123; p2=p1-&gt;next; if(p2-&gt;data &lt; x &amp;&amp; p2 != NULL) &#123; p3 = p2; p2 = p3-&gt;next; p1-&gt;next = p2; free(p3); j++; &#125; else if(p2-&gt;data &gt;= x) &#123; p1 = p2; p2 = p1-&gt;next; &#125; &#125; return j;*/&#125; 双向链表双向链表可以访问结点的直接前驱，定义如下： 1234typedef struct DuLNode &#123; ElemType data; struct DuLNode *prior, *next;&#125; DuLNode, *DuLinkList; 操作接口如下： 12345678910111213Status InitList_DuL(DuLinkList &amp;L);Status DestroyList_DuL(DuLinkList &amp;L);Status ClearList_DuL(DuLinkList &amp;L);Status ListEmpty_DuL(DuLinkList L);int ListLength_DuL(DuLinkList L);DuLNode* Search_DuL(DuLinkList L, ElemType e);DuLNode* PriorElem_DuL(DuLNode *p); // 返回p结点的直接前驱结点指针DuLNode* NextElem_DuL(DuLNode *p);DuLNode* MakeNode_DuL(ElemType e);Status InsertBefore_DuL(DuLNode *p, DuLNode *q);Status InsertAfter_DuL(DuLNode *p, DuLNode *q);Status Delete_DuL(DuLNode *p, ElemType &amp;e);void ListTraverse_DuL(DuLinkList L, Status (*visit)(ElemType e)); 插入前驱结点操作123456789Status InsertBefore_DuL(DuLNode *p, DuLNode *q) &#123; if (NULL == p || NULL == q || NULL == p-&gt;prior) return ERROR; q-&gt;prior = p-&gt;prior; q-&gt;next = p; q-&gt;prior-&gt;next = q; p-&gt;prior = q; return OK;&#125; 删除结点操作12345678Status Delete_DuL(DuLNode *p, ElemType &amp;e) &#123; if (NULL == p || NULL == p-&gt;prior) return ERROR; if (p-&gt;next != NULL) p-&gt;next-&gt;prior = p-&gt;prior; p-&gt;prior-&gt;next = p-&gt;next; e = p-&gt;data; free(p); return OK;&#125; 循环链表单循环链表单循环链表特点是尾元结点指针域指向头结点，类型和接口定义与单链表相似。 1typedef LinkList CirLinkList; 双向循环链表双向链表中，若令尾元结点next指针域指向头结点，头结点prior指针域指向尾元结点，就构成双向循环链表。 1typedef DuLinkList DuCirLinkList;]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>栈</tag>
        <tag>队列</tag>
        <tag>链表</tag>
        <tag>顺序表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript08-DOM扩展]]></title>
    <url>%2F2018%2F11%2F09%2FJavaScript08-DOM%E6%89%A9%E5%B1%95%2F</url>
    <content type="text"><![CDATA[JavaScript08-DOM扩展对JavaScript的两个主要扩展主要是Selectors API和HTML5 选择符API根据CSS选择符选择与某个模式匹配的DOM元素。jQuery的核心就是通过CSS选择符查询DOM文档取得元素的引用，从而抛开了getElementById()和getElementsByTagName()，它有两个核心方法：querySelector()和querySelectorAll()，可以通过Document及Element类型的实例调用它们。 querySelector()方法它接收一个CSS选择符，返回与该模式匹配的第一个元素，如果没有就返回null。 1234567891011// 取得body元素var body = document.querySelector("body");// 取得ID为myDiv的元素var myDiv = document.querySelector("#myDiv");// 取得类为"selected"的第一个元素var selected = document.querySelector(".selected");// 取得类为"button"的第一个图像元素var img = document.body.querySelector("img.button"); querySelectorAll()方法querySelectorAll()方法接收的参数和上面一样，都是一个CSS选择符，但返回的是所有匹配的元素，是一个NodeList实例。 元素遍历Chrome Version 70.0.3538.77不支持 Element Travelsal API为DOM元素添加以下5个属性，用于预防元素间空格造成的childNodes和firstChild等属性不一致的差异。 childElementCount：返回子元素（不包括文本节点和注释）的个数 firstElementChild：指向第一个元素 lastElementChild：指向最后一个元素 previousElementSibling：指向前一个同辈元素 nextElementSibling：指向后一个同辈元素 HTML5与类相关的扩充getElementsByClassName()方法可以通过document对象以及所有HTML元素调用该方法，它接收一个参数，即一个包含一个或多个类名的字符串，返回带有指定类的所有元素的NodeList。 取得所有类中包含”username”和”current”的元素，类先后无所谓var allCurrentUsernames = document.getElementByClassName(&quot;username current&quot;); 取得ID为myDiv的元素中带有类名”selected”的所有元素var selected = document.getElementById(&quot;myDiv&quot;).getElementsByClassName(&quot;selected&quot;); classList属性操作类名的时候，可以使用classList属性，classList属性是DOMTokenList的实例，他有一个表示自己包含多少元素的length属性，要取得每个元素，可以使用item()方法，也可以使用方括号。如下： &lt;div class=&quot;bd user disabled&quot;&gt;&lt;/div&gt; classList属性有三个值分别是bd user和disabled。 这个属性还定义了下面方法 add(value)：将给定的字符串值添加到列表中。 contains(value)：表示列表中是否存在给定的值，存在返回true。 remove(value)：删除value toggle(value)：如果列表中存在给定值，就删除它，如果不存在，就添加它。 这样，就可以通过上述方法操控className了，如下 div.classList.remove(&quot;user&quot;); // 删除user类 焦点管理HTML5添加了辅助管理DOM焦点的功能。document.activeElement属性始终会引用DOM中当前获得焦点的元素。元素获得焦点方式有页面加载，用户输入和在代码中调用focus()方法 123456&lt;body&gt; &lt;button type="button" id="myButton"&gt;Click Me!&lt;/button&gt; &lt;p&gt;&lt;/p&gt; &lt;button type="button" onclick="focusMethod()"&gt;Click me to focus on the button!&lt;/button&gt; &lt;script type="text/javascript" src="./aha.js"&gt;&lt;/script&gt; &lt;/body&gt; 1234focusMethod = function getFocus() &#123; document.getElementById("myButton").focus(); alert(document.activeElement == document.getElementById("myButton")); &#125; 文档刚刚加载完，document.activeElement中保存的是document.body元素的引用。 document.hasFocus()用于确定文档是否获得了焦点。 HTMLDocument的变化HTML5扩展了HTMLDocument，增加了新功能。 readyState属性Document的readyState属性可能有两个值 loading：正在加载文档 complete：已经加载完文档 基本用法如下 123if(document.readyState == "complete") &#123; // 执行操作&#125; head属性作为对document.body引用文档&lt;body&gt;元素的补充，HTML5新增了document.head属性，引用文档的&lt;head&gt;元素。 var head = document.head || document.getElementsByTagName(&quot;head&quot;)[0]; 字符集属性charset属性表示文档中实际使用的字符集，也可以用来指定新字符集，可以通过&lt;meta&gt;元素，响应头部或直接设置charset属性修改这个值。 document.charset = &quot;UTF-8&quot;; 自定义数据属性HTML5可以为元素添加非标准的属性，但要添加前缀data-，目的是为元素提供与渲染无关的信息，或提供语义信息。可以通过元素dataset属性访问这些自定义属性的值。dataset是一个DOMStringMap的实例，键为非标准属性名减去data-前缀（比如自定义属性是data-myname，映射对应属性就是myname） &lt;div id=&quot;myDiv&quot; data-appid=&quot;12345&quot; data-myname=&quot;Nicholas&quot;&gt;&lt;/div&gt; 123456var div = document.getElementById("myDiv");var appId = div.dataset.appid;var myName = div.dataset.myname;alert(appId); 插入标记innerHTML属性在读模式下，innerHTML属性返回与调用元素的所有子节点（包括元素，注释和文本节点）对应的HTML标记。写模式下，innerHTML会根据指定的值创建新的DOM树，然后用这个DOM树完全替换调用元素原先的所有子节点。 写模式下，innerHTML的值会被解析为DOM子树，替换调用元素原来的所有子节点。因为它的值被认为是HTML，所以其中的所有标签都会按照浏览器处理HTML的标准方式转换为元素。设置了innerHTML之后，可以像访问文档中其他节点一样访问新创建的节点。 对下面代码的div块调用innerHTML，会返回其内部子元素（字符串形式） 12345678&lt;div id="content"&gt; &lt;p&gt;This is a &lt;strong&gt;paragraph&lt;/strong&gt; with a list following it.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Item 1&lt;/li&gt; &lt;li&gt;Item 2&lt;/li&gt; &lt;li&gt;Item 3&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; 下面元素不支持innerHTML属性：&lt;col&gt;,&lt;colgroup&gt;,&lt;frameset&gt;,&lt;head&gt;,&lt;html&gt;,&lt;style&gt;,&lt;table&gt;,&lt;tbody&gt;,&lt;thead&gt;,&lt;tfoot&gt;和&lt;tr&gt; outerHTML属性在读模式下，outerHTML返回调用它的元素及所有子节点的HTML标签。写模式下，outerHTML会根据指定的HTML字符串创建新的DOM子树，然后用这个DOM子树完全替换调用元素。 对上面代码div块调用outerHTML，会返回上面相同的代码，包括div本身。 div.outerHTML = &quot;&lt;p&gt;This is a paragraph.&lt;/p&gt;&quot;; 对上面代码的调用，等价于下面的代码 123var p = document.createElement("p");p.appendChild(document.createTextNode("This is a paragraph."));div.parentNode.replaceChild(p, div); insertAdjacentHTML()方法它接收两个参数，插入位置和要插入的HTML文本。第一个参数必须是下列值之一： beforebegin：当前元素之前插入一个紧邻的同辈元素 afterbegin：当前元素之下插入一个新的子元素或在第一个子元素之前再插入新的子元素 beforeend：当前元素之下插入一个新的子元素或再最后一个子元素之后再插入一个新的子元素 afterend：当前元素之后插入一个紧邻的同辈元素 内存与性能问题使用上面2个属性1个方法之前，最好先手工删除要被替换的元素的所有时间处理程序和JavaScript对象属性。 对上面2个属性，最佳做法是单独构建一个字符串，然后一次性把结果字符串赋值给innerHTML（或outerHTML），这样可以减少访问属性的开支。 scrollIntoView()方法可以在所有HTML元素上调用，通过滚动浏览器窗口或某个容器元素，调用元素就可以出现在视口中，传入true作为参数，或者不传入参数，则窗口滚动之后会让调用元素的顶部与视口顶部尽可能平齐。传入false，调用元素会尽可能出现在视口中（可能的话，调用元素底部会与视口底部平齐） Chrome不支持。。。 专有扩展children属性这个属性是HTMLCollection的实例，只包含元素中同样还是元素的子节点。children属性与childNodes没什么区别 contains()方法调用contains()方法的应该是祖先节点，这个方法接收一个参数，就是要检测的后代节点。如果被检测的节点是后代节点，就返回true。 插入文本innerText属性通过这个属性可以操作元素中包含的所有文本内容，包括子文档树中的文本。在通过innerText读取值时，它会按照由浅入深顺序将子文档中所有文本拼接起来。在通过innerText写值时，结果会删除元素的所有子节点。插入包含相应文本值的文本节点。 outerText属性作用范围扩大到了包含调用它的节点，写操作下会替换整个元素（包括子节点）。 滚动 scrollIntoViewIfNeeded(alignCenter)：只在当前元素在视口中不可见的情况下，才滚动浏览器窗口或容器元素，最终让它可见。如果参数为true，尽量让元素显示在视口中部。 scrollByLines(lineCount)：元素内容滚动指定的行高，可以正或负值。 scrollByPages(pageCount)：元素内容滚动指定的页面高度。]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>DOM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构01-前言]]></title>
    <url>%2F2018%2F11%2F06%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%8401-%E5%89%8D%E8%A8%80%2F</url>
    <content type="text"><![CDATA[数据结构01-前言一些预定义123456#define TRUE 1#define FALSE 0#define OK 1#define ERROR 0#define OVERFLOW -1typedef int Status; // 用作函数值类型，表示函数结果状态 ElemType代表数值的类型。一般是int，可以作下面定义typedef int ElemType; 时间复杂度T(n) = O(f(n)) 常见时间复杂度 类 符号 举例 常数 O(1) 返回数组第一个元素 对数 O(logn) 对有序数组折半查找 线性 O(n) 对数组顺序查找 nlogn O(nlogn) 归并排序 平方 O(n²) 选择排序 立方 O(n^3) 传统矩阵相乘 指数 O(2n) 汉诺塔 空间复杂度S(n) = O(f(n))]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaSCript07-DOM]]></title>
    <url>%2F2018%2F11%2F01%2FJavaScript07-DOM%2F</url>
    <content type="text"><![CDATA[JavaScript07-DOM节点层次DOM将任何HTML文档描绘成一个多层节点构成的结构。根节点为文档节点，文档节点下一般有一个子节点&lt;html&gt;元素，称为文档元素。 Node类型DOM定义了一个Node接口，由DOM中所有节点类型实现。每个节点都有一个nodeType属性，用于表明节点的类型，该属性有如下12个数值常量 Node.ELEMENT_NODE(1); Node.ATTRIBUTE_NODE(2); Node.TEXT_NODE(3); Node.CDATA_SECTION_NODE(4); Node.ENTITY_REFERENCE_NODE(5); Node.ENTITY_NODE(6); Node.PROCESSING_INSTRUCTION_NODE(7); Node.COMMENT_NODE(8); Node.DOCUMENT_NODE(9); Node.DOCUMENT_TYPE_NODE(10); Node.DOCUMENT_FRAGMENT_NODE(11); Node.NOTATION_NODE(12); nodeName和nodeValue属性要了解节点具体信息，可以使用这两个属性。 if (someNode.nodeType==1){ value = someNode.nodeName; } 对于元素节点，nodeName始终保存元素标签名，nodeValue始终为null 节点关系每个节点都有一个childNodes属性，其中保存着一个NodeList对象，它是一个类数组对象，用于保存一组有序的节点，也有length属性，但它是基于DOM结构动态执行查询的结果，因此DOM结构的变化能够自动反映在NodeList对象中。 可以通过下面方法访问保存在NodeList中的节点 123var firstChild = someNode.childNodes[0];var secondChild = someNode.childNodes.item(1);var count = somNode.childNodes.length; 每个节点都有一个parentNode属性，该属性指向文档树中的父节点。包含在childNodes列表中的所有节点都具有相同的父节点。此外，包含在childNodes列表中的每个节点相互之间都是同胞节点。使用列表中每个节点的previousSibling和nextSibling属性，可以访问同一列表的其他节点。父节点与其第一个和最后一个子节点之间也有关系，使用父节点的firstChild和lastChild属性分别指向childNodes列表的抵押给和最后一个节点。 所有节点都有最后一个属性是ownerDocument，该属性指向表示整个文档的文档节点。 操作节点appendChild()可以通过appendChild()方法向childNodes列表末尾添加一个节点，如下 1var returndNode = someNode.appendChild(newNode); 如果传入到appendChild()的节点已经是文档的一部分，那结果是将该节点从原来位置转移到新位置。DOM树可以看成是一系列指针连接起来的，但任何DOM节点不能同时出现在文档中的多个位置上。 insertBefore()可以使用insertBefore()方法把节点放在childNodes的某个特定位置上，接收两个参数，要插入的节点和作为参考的节点。插入节点后，被插入的节点会变成参考节点的前一个同胞节点，然后被该方法返回。 1returnedNode = someNode.insertBefore(newNode, null); // 插入到最后 replaceChild()它接收两个参数：要插入的节点和要替换的节点，然后把插入的节点返回。 removeChild()接收一个参数：要移除的节点。然后该节点被该方法返回。 其他方法#####cloneNode() cloneNode()接收一个布尔值参数，表示是否执行深复制。如果为true，则复制节点及其整个子节点树，如果为false，只复制节点本身。 Document类型Document类型表示文档，在浏览器中，document对象是HTMLDocument的一个实例，表示整个HTML页面。而且document类型是window对象的一个属性，有下列特征： nodeType为9； nodeName为”#document”； nodeValue为null； parentNode为null； ownerDucument为null; 文档的子节点有一个documentElement属性，始终指向HTML页面的&lt;html&gt;元素，另外还有一个childNodes列表访问文档元素。 document还提供了body，doctype属性访问对于的标签var body = document.body; 文档信息titledocument对象作为HTMLDocument的一个实例，还有一些其他属性表现网页的一些信息，其中一个是title属性 1234// 一个修改title的例子var originalTitle = document.title;document.title = "New page title"; URL,domain和referrerURL属性包含页面完整的URL，domain属性只包含域名，而referrer属性中则保存链接到当前页面的那个页面的URL，这些属性都保存在HTTP头部，JS提供了这些属性访问它们。 这三个属性中只有domain可以设置，但只能设置成URL包含的域，否则报错，这个属性可以用于跨页面通信，比如一个页面加载自www.wrox.com，包含一个内嵌框架加载自p2p.wrox.com。只需要把它们的document.domain都设置成wrox.com，就可以实现两者的通信。注意一旦设置为wrox.com后，就不能设置回p2p.wrox.com了 查找元素Document类型提供了两个方法查找元素，分别为getElementById()和getElementByTagName()。 getElementById()getElementById()接收一个参数：要取得的元素的ID，区分大小写,返回该元素。 &lt;div id=&quot;myDiv&quot;&gt;&lt;/div&gt;var div = document.getElementById(&quot;myDiv&quot;); getElementsByTagName()getElementByTagName()接收一个参数：要取得的元素的标签名，返回的是包含零个或多个元素的NodeList。在HTML文档中，这个方法返回一个HTMLCollection对象，作为一个动态集合。 var images = document.getElementsByTagName(&quot;img&quot;); 可以通过images.item(i).src取得第i个images对象的src属性 HTMLCollection对象还有一个方法nameItem()，可以通过元素的name特性取得集合中的项。 &lt;img src=&quot;xxx.gif&quot; name=&quot;myImage&quot;&gt;var myImage = images.namedItem(&quot;myImage&quot;);这与直接用方括号语法等效var myImage = images[&quot;myImage&quot;]; 要取得文档所有元素，可以传入参数”*” var allElements = document.getElementsByTagName(&quot;*&quot;); getElementsByName()这是只有HTMLDocument类型才有的方法，它返回带有给定name特性的所有元素。通常用于取得单选按钮，如下 1234567891011&lt;fieldset&gt; &lt;legend&gt;Which color do you prefer?&lt;/legend&gt; &lt;ul&gt; &lt;li&gt;&lt;input type="radio" value="red" name="color" id="colorRed"&gt; &lt;label for="colorRed"&gt;Red&lt;/label&gt;&lt;/li&gt; &lt;li&gt;&lt;input type="radio" value="green" name="color" id="colorGreen"&gt; &lt;label for="colorGreen"&gt;Green&lt;/label&gt;&lt;/li&gt; &lt;li&gt;&lt;input type="radio" value="blue" name="color" id="colorBlue"&gt; &lt;label for="colorBlue"&gt;Blue&lt;/label&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/fieldset&gt; 在这里，所有单选按钮的name属性都是”color”，但他们的ID可以不同，ID的作用是把&lt;label&gt;元素应用到每个单选按钮，而name特性则用以确保三个值中只有一个被发送到浏览器，这样就可以用下面代码取得所有单选按钮 var radios = document.getElementByName(&quot;color&quot;); 特殊集合document对象还有一些特殊的集合。这些集合都是HTMLCollection对象。 document.anchors,包含文档中所有带name特性的&lt;a&gt;元素 document.forms,包含所有&lt;form&gt;元素 documents.images,包含所有&lt;img&gt;元素 document.links,包含所有带href的&lt;a&gt;元素 文档写入document有四个方法可以写入:write(),writeln(),open()和close() 123&lt;script type="text/javascript"&gt; document.write((new Date()).toString()); &lt;/script&gt; Element类型Element类型提供了对元素标签名，子节点以及特性的访问。有如下特征： nodeType值为1 nodeName值为元素的标签名 nodeValue值为null parentNode可能是Document或Element 其子结点可能是Element,Text,Comment等等 要访问元素的标签名，可以使用nodeName属性也可以使用tagName属性。 HTML元素所有HTML元素都由HTMLElement类型及其子类型表示，HTMLElement类型直接继承Element并添加了一些属性 id:元素在文档中的唯一标识符 className:元素的class特性对应，即为元素指定的CSS类 这些属性都是可修改的，直接复制即可 取得特性操作特性有三个方法，分别为getAttribute(),setAttribute()和removeAttribute()。这三个方法可以针对任何特性使用。 getAttribute()也可以取得自定义特性（HTML5中，自定义特性应该加上data-前缀） 123var div = document.getElementById(&quot;myDiv&quot;);alert(div.getAttribute(&quot;class&quot;));alert(div.getAttribute(&quot;data-yourData&quot;); 通常更建议直接使用对象的属性，只有在取得自定义特性的情况下才使用getAttribute()方法 设置特性setAttribute()接收两个参数：要设置的特性名和值，如果特性已经存在，他就会替换现有的值，若不存在，就创建该属性并设置值。 attributes属性Element类型是使用attributes属性的唯一一个DOM节点类型。attributes属性中包含一个NamedNodeMap，与NodeList类似，也是一个动态集合。元素的每一个特性都由一个Attr节点表示，每个节点都保存在NamedNodeMap对象中。它有下列方法： getNamedItem(name):返回nodeName属性等于name的节点 removeNamedItem(name):从列表中移除nodeName属性等于name的节点 setNamedItem(node):向列表中添加节点，以节点的nodeName属性为索引 item(pos):返回数字pos位置的节点 attributes包含一系列节点，每个节点的nodeName是特性名，nodeValue为特性值 var id = element.attributes.getNamedItem(&quot;id&quot;).nodeValue; // 取得element节点特性id的值 等效于 var id = element.attributes[&quot;id&quot;].nodeValue; 创建元素使用document.createElement()方法可以创建新元素 var div = document.createElement(&quot;div&quot;); 创建的同时也指定了其ownerDocument属性。 新创建的元素还没加入文档树 document.body.appendChild(div); 可以把它加入到body元素中 元素的子节点childNodes属性包含了它的所有子节点，这些子节点可能是元素，文本节点，注释或处理指令，可以通过element.childNodes[i].nodeType == 1来作检测 Text类型文本节点可以是字面解释的纯文本内容，也可以是包含转义后的HTML字符，但不能包含HTML代码。 nodeType=3 nodeName=”#text” nodeValue为节点所包含的文本 parentNode是一个Element 不支持子节点 可以通过nodeValue属性或data属性访问节点中包含的文本。使用下列方法可以操作节点中的文本 appendData(text)：把text添加到节点末尾 deleteData(offset, count)：从offset指定的位置开始删除count个字符 insertData(offset, text)：在offset指定位置插入text replaceData(offset, count, text)：用text替换从offset指定的位置开始到offset+count位置的文本 splitText(offset)：从offset指定的位置将当前文本分开两个文本节点 substringData(offset, count)：提取从offset指定的位置开始到offset+count为止处的字符串 &lt;div&gt;Hello World!&lt;/div&gt; 上述文本子节点可以通过var textNode = div.firstChild访问 创建文本节点可以使用document.createTextNode()创建新文本节点，接收一个参数：要插入节点的文本。 一个创建新节点并插入创建文本的例子 1234567var element = document.createElement("div");element.className = "message";var textNode = document.createTextNode("Hello World!");element.appendChild(textNode);document.body.appendChild(element); 一般情况下每个元素只有一个文本子节点，但也可以同时有多个文本子节点，当他们是相邻的同胞节点，那么这两个节点就会连起来显示，中间不会有空格。 规范化文本节点DOM文档中存在相邻的同胞文本节点很容易导致混乱，因为分不清哪个文本节点表示哪个字符串。DOM文档中出现相邻文本节点的情况也不在少数，于是催生了一个能够将相邻文本节点合并的方法，为normalize()，它把所有文本节点合并成一个子节点，结果节点的nodeValue为合并前每个文本节点nodeValue拼接起来的值。 分割文本节点splitText()可以用于分割文本节点。 Comment类型注释在DOM中是通过Comment类型来表示的，有如下特征： nodeType值为8 nodeName值为”#comment” nodeValue值为注释的内容 parentNode可能是Document或Element 不支持子节点 Comment类型与Text类型继承自相同的基类，因此它拥有除splitText()之外的所有字符串操作方法，也可以通过nodeValue或data属性来取得注释的内容。 注释节点可以通过其父节点来访问 1234567&lt;div id="myDiv"&gt;&lt;!-- TODO: do what? --&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt; var div = document.getElementById("myDiv"); var comment = div.firstChild; alert(comment.data); &lt;/script&gt; 另外，使用createComment()方法也可以创建注释节点 CDATASection类型只针对基于XML的文档，表示的CDATA区域 DocumentType类型DocumentFragment类型Attr类型元素的特性在DOM中以Attr类型来表示，在所有浏览器中都可以访问Attr类型的构造函数和原型，有下列特征 nodeType=2 nodeName是特性的名称 nodeValue是特性的值 parentNode是null HTML中不支持子节点 要取得特性，通常用getAttribute(),setAttribute()和removeAttribute()方法，很少直接引用特性节点 Attr有三个属性，name，value和specified，其中specified是一个布尔值，用于区分特性是在代码中指定还是默认的。 可以使用document.createAttribute()方法并传入特性的名称来创建新的特性节点。 DOM操作技术动态脚本页面加载时不存在，但将来某一时刻通过修改DOM动态添加的脚本。 动态加载外部JS文件123456function loadScript(url) &#123; var script = document.createElement("script"); script.type = "text/javascript"; script.src = url; document.body.appendChild(script);&#125; 动态添加行内JS代码123456789101112function loadScriptString(code) &#123; var script = document.createElement("script"); script.type = "text/javascript"; try &#123; script.appendChild(document.createTextNode(code)); &#125; catch (ex) &#123; script.text = code; &#125; document.body.appendChild(script);&#125;loadScriptString("function sayHi()&#123; alert('hi'); &#125;"); 动态样式加载外部CSS 12345678function loadStyles(url) &#123; var link = document.createElement("link"); link.rel = "stylesheet"; link.type = "text/css"; link.href = url; var head = document.getElementsByTagName("head")[0]; head.appendChild(link);&#125; 操作表格对于一个表格 123456789101112&lt;table border="1" width="100%"&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;Cell 1,1&lt;/td&gt; &lt;td&gt;Cell 2,1&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Cell 1,2&lt;/td&gt; &lt;td&gt;Cell 2,2&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt; 要创建的节点太多了，所以DOM为&lt;table&gt;,&lt;tbody&gt;和&lt;tr&gt;元素添加了一些属性和方法 &lt;table&gt;的属性和方法如下： caption：保存对&lt;caption&gt;元素的指针 tBodies：是一个&lt;tbody&gt;元素的HTMLCollection tFoot：保存对&lt;tfoot&gt;元素的指针 tHead：保存对&lt;thead&gt;元素的指针 rows：一个表格中所有行的HTMLCollection createTHead()：创建&lt;thead&gt;元素，将其放到表格中，返回引用 createTFoot()：创建&lt;tfoot&gt;元素，同上 createCaption()：创建&lt;caption&gt;元素，同上 deleteCaption() deleteTHead() deleteCaption() deleteRow(pos)：删除指定位置的行 insertRow(pos)：向rows集合中指定位置插入一行 &lt;tbody&gt;元素的属性和方法如下： rows：保存&lt;tbody&gt;元素中行的HTMLCollection deleteRow(pos)：删除指定位置的行 insertRow(pos)：向rows集合中的指定位置插入一行，返回对新插入行的引用 &lt;tr&gt;元素添加的属性和方法如下： cells：保存&lt;tr&gt;元素中单元格的HTMLCollection deleteCell(pos)：删除指定位置的单元格 insertCell(pos)：向cells集合中指定位置插入一个单元格，返回对新插入单元格的引用 1234567891011121314151617181920var table = document.createElement("table");table.border = 1;table.width = "100%";var tbody = document.createElement("tbody");table.appendChild(tbody);tbody.insertRow(0);tbody.rows[0].insertCell(0);tbody.rows[0].cells[0].appendChild(document.createTextNode("Cell 1,1"));tbody.rows[0].insertCell(1);tbody.rows[0].cells[1].appendChild(document.createTextNode("Cell 2,1"));tbody.insertRow(1);tbody.rows[1].insertCell(0);tbody.rows[1].cells[0].appendChild(document.createTextNode("Cell 1,2"));tbody.rows[1].insertCell(1);tbody.rows[1].cells[1].appendChild(document.createTextNode("Cell 2,2"));document.body.appendChild(table);]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>DOM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaSCript05-函数表达式]]></title>
    <url>%2F2018%2F10%2F26%2FJavaScript05-%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[JavaScript函数表达式递归递归更好的建议是使用arguments.callee，这是一个指向正在执行的函数的指针 12345678function factorial(num) &#123; if (num &lt;= 1) &#123; return 1; &#125; else &#123; return num * arguments.callee(num-1); &#125;&#125; 通过arguments.callee代替函数名，可以确保无论怎么样调用函数都不会出问题。 闭包闭包是指有权访问另一个函数作用域中的变量的函数，创建闭包常见方法，就是在一个函数内部创建另一个函数 1234567891011121314function createComparisonFunction(propertyName) &#123; return function(object1, object2) &#123; var value1 = object1[propertyName]; var value2 = object2[propertyName]; if (value1 &lt; value2) &#123; return -1; &#125; else if (value1 &gt; value2) &#123; return 1; &#125; else &#123; return 0; &#125; &#125;&#125; 注意到在内部函数访问了外部函数中的变量propertyName，即使这个内部函数被返回了，而且在其他地方被调用了，它仍然可以访问变量propertyName。 在另一个函数内部定义的函数会将包含函数的活动对象添加到它的作用域链中，这样，匿名函数就可以访问其包含函数中定义的所有变量。即使包含函数被执行完毕后，其活动对象也不会被销毁，因为匿名函数的作用域链仍然在引用这个活动对象。换句话说，包含函数返回后，其执行环境的作用域链会被销毁，但它的活动对象仍然会留在内存中，直到匿名函数被销毁。 闭包与变量上述作用域链的机制引出了一个副作用，就是闭包只能取得包含函数中任何变量的最后一个值，闭包所保存的是整个变量对象，而不是某个特殊的变量。 12345678910function createFunctions() &#123; var result = new Array(); for(var i = 0; i &lt; 10; i++) &#123; result[i] = function() &#123; return i; &#125;; &#125; return result;&#125; 这里的结果是每个函数都返回10，因为每个匿名函数都引用了外部变量i，而i最后的值为10. 可以作如下调整 123456789101112function createFunctions() &#123; var result = new Array(); for(var i = 0; i &lt; 10; i++) &#123; result[i] = function(num) &#123; return function() &#123; return num; &#125;; &#125;(i); &#125; return result;&#125; 关于this对象闭包中使用this，需要注意匿名函数的执行环境具有全局性，因此其this对象通常指向window。 12345678910111213var name = "Thie Window";var object = &#123; name : "My Object", getNameFunc : function() &#123; return function() &#123; return this.name; &#125;; &#125;&#125;;alert(object.getNameFunc()()); // "The Window" 可以作如下修改 1234567891011121314var name = "Thie Window";var object = &#123; name : "My Object", getNameFunc : function() &#123; var that = this; return function() &#123; return that.name; &#125;; &#125;&#125;;alert(object.getNameFunc()()); // "My Object" 模仿块级作用域在JavaScript中没有块级作用域的概念。这意味着在块语句中定义的变量，实际上是在包含语句中而非语句中创建的。 123456function outputNumbers(count) &#123; for(var i = 0; i &lt; count; i++) &#123; alert(i); &#125; alert(i);&#125; 在这里，JS仍然可以访问i，而不同于Java，C++。 可以用匿名函数来模仿块级作用域，语法如下(function(){ //code here })();以上代码定义并立即调用了一个匿名函数 私有变量JavaScript中没有私有成员的概念，所有对象属性都是公有的。不过有一个私有变量的概念，任何在函数中定义的变量，都可以认为是私有变量。如果在函数内部创建一个闭包，那么闭包通过自己的作用域链可以访问这些变量，利用这一点就可以创建用于访问私有变量的公有方法，这种方法成为特权方法。 123456789101112131415function Person(name) &#123; this.getName = function() &#123; return name; &#125;; this.setName = function(value) &#123; name = value; &#125;;&#125;var person = new Person("Nicholas");alert(person.getName());person.setName("Greg");alert(person.getName()); 静态私有变量123456789101112131415161718192021(function() &#123; // 私有变量和私有函数 var name = ""; // 构造函数 Person = function(value) &#123; name = value; &#125; Person.prototype.getName = function() &#123; return name; &#125;; Person.prototype.setName = function(value) &#123; name = value; &#125;;&#125;)();var person1 = new Person("Nicholas");// 测试代码 注意name是静态变量，是所有实例共享的。 模块模式模块模式用于只有一个实例的对象，JS用对象字面量方式创建单例对象，如下 1234567891011121314151617181920var application = function() &#123; //私有 var components = new Array(); //初始化 components.push(new BaseComponent()); //公有 return &#123; getComponentCount : function() &#123; return components.length; &#125;; registerComponent : function(component) &#123; if (typeof component == "object") &#123; components.push(component); &#125; &#125; &#125;&#125; 增强的模块模式增强模块模式适合单例必须是某种类型的实例，同时还必须添加某些属性和方法对其加以增强的情况 12345678910111213141516171819202122var application = function() &#123; //私有 var components = new Array(); //初始化 components.push(new BaseComponent()); //创建application的一个局部副本 var app = new BaseComponent(); //公有 app.getComponentCount : function() &#123; return components.length; &#125;; app.registerComponent : function(component) &#123; if (typeof component == "object") &#123; components.push(component); &#125; &#125;; return app;&#125;]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>JS函数表达式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaSCript06-BOM]]></title>
    <url>%2F2018%2F10%2F26%2FJavaScript06-BOM%2F</url>
    <content type="text"><![CDATA[JavaScript06-BOMBOM是浏览器对象模型，它提供了很多用于访问浏览器的功能。 window对象window对象表示浏览器的一个实例，它既是通过JavaScript访问浏览器的一个接口，又是ECMAScript规定的Global对象。这意味着在网页中定义的任何一个对象，变量和函数，都以window作为其Global对象，因此有权访问parseInt等方法。 全局作用域所有在全局作用域中声明的变量，函数都会变成window对象的属性和方法，但注意，定义全局变量与在window对象直接定义还是有一点差别：全局变量不能通过delete操作符删除，而直接在window对象上定义的属性可以 123456var age = 29;window.color = "red";delete window.age; // return falsedelete window.color; // return true 可以通过window对象查询变量是否存在 123var newValue = oldValue; // error,oldValue not definedvar newValue = window.oldValue; // OK,newValue is undefined 窗口位置IE，Safari，Opera，Chrome提供了screenLeft，screenTop属性表示窗口相对于屏幕左边和上边的位置。Firefox提供了screenX和screenY属性。 123// 获取窗口左边和上边的位置var leftPos = (typeof window.screenLeft == "number")?window.screenLeft:window.screenX;var topPos = (typeof winodw.screenTop == "number")?window.screenTop:window.screenY; 可以使用moveTo()和moveBy()将窗口精确移动到某个位置moveTo()接收的是新位置的x和y坐标，而moveBy()接收的是在水平和锤石方向上移动的像素数 12345// 将窗口移动到屏幕左上角window.moveTo(0,0);// 将窗口向左移动50像素window.moveBy(-50,0); 需要注意这两个方法可能会被浏览器禁用 窗口大小IE9+,Firefox,Safari,Opera和Chrome提供4个属性：innerWidth,innerHeight,outerWidth,outerHeight。在Chrome中，outer和inner返回的是相同的值，都是viewport大小而非浏览器窗口大小。在Firefox中，outer返回的是浏览器窗口本身的尺寸，inner返回的是该容器中页面视图区的大小（减去边框宽度）。 下面方法可以获得viewport大小 123456789101112var pageWidth = window.innerWidth, pageHeight = window.innerHeight;if(typeof pageWidth != "number") &#123; if(document.compatMode == "CSS1Compat") &#123; pageWidth = document.documentElement.clientWidth; pageHeight = document.documentElement.clientHeight; &#125; else &#123; pageWidth = document.body.clientWidth; pageHeight = document.body.clientHeight; &#125;&#125; 可以使用resizeTo()和resizeBy()方法来调整浏览器窗口大小。 12345// 调整到100*100window.resizeTo(100,100); // 调整到200*150window.resizeBy(100,50); 同样的，部分浏览器可能禁用这两个方法 导航和打开窗口使用window.open()方法既可以导航到一个特定的URL，也可以打开一个新的浏览器窗口。这个方法接收4个参数：要加载的URL，窗口目标，一个特性字符串以及一个表示新页面是否取代浏览器历史纪录中当前加载页面的布尔值。如果传递第二个参数，而且该参数是已有窗口或框架的名称，那么就会在具有该名称的窗口或框架中加载第一个参数指定的URL。看下面例子 12// 等同于&lt;a href="http://www.wrox.com" target="topFrame"&gt;&lt;/a&gt;window.open("http://www.wrox.com", "topFrame"); 如果有topFrame的窗口，就会在该窗口加载URL，否则创建一个新窗口并命名为topFrame,第二个参数也可以是下列特殊名称:_self,_parent,_top或_blank。 弹出窗口若第二个参数并不是一个已经存在的窗口或框架，那么该方法就会根据在第三个参数位置上传入的参数创建一个新窗口或新标签页。第三个参数是一个逗号分隔的设置字符串，表示在新窗口中都显示哪些特性。 设置 值 说明 height num 窗口高度，不能小于100 left num 窗口左坐标，不能小于0 location yes or no 显示地址栏，不同浏览器默认值不同 menubar yes or no 默认no，显示菜单栏 resizable yes or no 是否可以通过拖动浏览器窗口边框改变其大小 scrollbars yes or no 内容在视口显示不下，是否运训滚动，默认no status yes or no 状态栏，默认no toolbar yes or no 工具栏，默认no top num 上坐标 width num 新窗口宽度 window.open(&quot;http://www.wrox.com/&quot;,&quot;wroxWindow&quot;,&quot;height=400,width=400,top=10,resizable=yes&quot;); 通过window.open()新创建的窗口可以使用resizeTo或moveTo等方法，并且其有一个属性opener保存着打开它的原始窗口对象chrome会在独立进程中运行每个标签页，当一个标签页打开另一个标签页时，如果两个window对象之间需要彼此通信，那么新标签页就不能运行在独立的进程中。在chrome中，把新创建的标签页的opener属性设置为null，即表示在单独的进程中运行新标签页，即告诉浏览器新创建的标签页不需要与打开它的标签页通信，因此可以在独立进程中运行。 弹出窗口屏蔽程序大多数浏览器都内置弹出窗口屏蔽程序，如下所示可以检测是否被屏蔽 1234567891011121314var blocked = false;try &#123; var wroxWin = window.open("http://www.wrox.com", "_blank"); if(wroxWin == null) &#123; blocked = true; &#125;&#125; catch (ex）&#123; blocked = true;&#125;if (blocked) &#123; alert("The popup was blocked!");&#125; 间歇调用和超时调用JS是单线程语言，但它允许通过设置超时值和间歇时间来调度代码在特定时刻执行。 超时调用超时调用需要使用window对象的setTimeout()方法，它接收两个参数，要运行的代码和毫秒表示的时间（执行代码之前需要等待的毫秒数），第一个参数可以是包含JS代码的字符串，也可以是一个函数（更推荐用函数） 123setTimeout(function() &#123; alert("Hello World!");&#125;, 1000); 注意上述代码经过1000ms不一定会执行，因为JS是一个单线程的解释器。调用setTimeout后，该方法会返回一个数值ID，表示超时调用。可以通过这个ID取消超时调用，如下 12345var itmeoutId = setTimeout(function() &#123; alert("Hello World!");&#125;, 1000);clearTimeout(timeoutId); 间歇调用按照指定的时间间隔重复执行代码，调用的方法是setInterval()，调用方法与上面setTimeout差不多，只不过第二个参数为每次执行之前要等待的毫秒数，同样可以通过clearInterval()方法传入间歇调用ID取消间歇调用尽量不要使用间歇调用，因为后一个间歇调用可能在前一个间歇调用停止之前启动下面是一个用超时调用实现间歇调用的例子，不会出现上述问题 123456789101112var num = 0;var max = 10;function incrementNumber() &#123; if (num &lt; max) &#123; setTimeout(incrementNumber, 500); &#125; else &#123; alert("Done"); &#125;&#125;setTimeout(incrementNumber, 500); 系统对话框浏览器通过alert(),confirm()和prompt()方法可以调用系统对话框，注意系统对话框都是同步和拟态的，即显示这些对话框的时候代码回停止执行，直到关掉对话框 alert()alert()显示的对话框包括文本和一个OK按钮 confirm()confirm()除了文本和OK按钮，还有一个取消按钮，可以通过检查confirm()方法返回的布尔值来确定用户点了哪个按钮 prompt()prompt()方法除了显示OK和Cancel按钮，还会显示一个文本输入框，接收两个参数，要显示给用户的文本提示和和文本输入域的默认值（可以为空字符串）。如果点击OK，该方法返回输入域的值，点击Cancel或其他，该方法返回null location对象location提供了与当前窗口加载的文档有关的信息，它既是window对象的属性，也是document对象的属性，location对象有如下属性 属性名 例子 说明 hash “#contents” 返回URL中的hash（#号后跟0个或多个字符） host “www.wrox.com:80&quot; 返回服务器名称和端口号 hostname “www.wrox.com&quot; 返回不带端口号的服务器名称 href “http:/www.wrox.com&quot; 完整URL，与location.toString()方法返回值一样 pathname “/WileyCDA/“ URL中目录和文件名 port “8080” 端口号 protocol “http:” 页面协议 search “?q=javascript” URL的查询字符串，以问号开头 查询字符串参数一个查询字符串参数的例子，注意字符串参数是被编码过的，需要通过decodeURIComponent解码 1234567891011121314151617181920function getQueryStringArgs() &#123; var qs = (location.search.length &gt; 0 ? location.search.substring(1) : "" ), args = &#123;&#125;, items = qs.length ? qs.split("&amp;") : [], item = null, name = null, value = null, i = 0, length = items.length; for (i = 0; i &lt; len; i++) &#123; item = items[i].split("="); name = decodeURIComponent(item[0]); value = decodeURIComponent(item[1]); if (name.length) &#123; args[name] = value; &#125; &#125; &#125; 位置操作可以通过修改上面的属性（直接赋值）来改变当前加载的页面，也可以通过location.assign(&quot;http://www.wrox.com&quot;)来改变，这样的改变会在浏览器的历史记录中生成一条新纪录，用户通过后退按钮都会导航到前一个页面，如果不想在历史记录中生成新纪录，则可以通过调用location.replace(&quot;http://www.wrox.com/&quot;)reload()方法会重新加载当前页面，如果不传递参数，页面会以最有效的方式重新加载，有可能是从缓存中加载，如果强制从服务器加载，则传入参数true即可 navigator对象navigator对象主要用来检测客户端浏览器，其主要属性和方法可以参考w3c的navigator对象 检测插件对于非IE浏览器，可以使用plugins数组来达到检测插件的目的，该数组每一项都有下列属性 name:插件的名字 description:插件的描述 filename:插件的文件名 length:插件所处理的MIME类型数量 123456789101112function hasPlugin(name) &#123; name = name.toLowerCase(); for (var i = 0; i &lt; navigator.length; i++) &#123; if (navigator.plugins[i].name.toLowerCase().indexOf(name) &gt; -1) &#123; return true; &#125; &#125;&#125;alert(hasPlugin("Flash"));alert(hasPlugin("QucikTime")); history对象history对象保存用户的上网记录，无法得知具体的URL，但是可以通过go()方法来实现用户历史记录的任意跳转，这个方法接收一个参数，表示向后或向前的页面书的一个整数，也可以传入字符串参数，浏览器会跳转到历史纪录中包含该字符串的第一个位置，可能前进也可能后退。 12345history.go(-1); // 后退一页history.go(1); // 前进一页history("wrox.com"); 另外还可以用history.back()和history.forward()方法前进或后退此外还有一个length属性表示历史纪录数量。]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>BOM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Servlet06-JSTL-强大的定制标记]]></title>
    <url>%2F2018%2F10%2F09%2FServlet06-JSTL%2F</url>
    <content type="text"><![CDATA[Servlet06-JSTL-强大的定制标记有时只是EL或标准动作还不够，需要用到JSTL，使用JSTL之前，要把jstl.jar与standard.jar放在WEB应用的lib目录里 &lt;c:out&gt;显示表达式&lt;c:out&gt;作用与脚本的&lt;%=%&gt;作用相似，但是&lt;c:out&gt;可以直接通过”.”操作符来访问属性。 语法格式如下&lt;c:out value=&quot;&lt;string&gt;&quot; default=&quot;&lt;string&gt;&quot; escapeXml=&quot;&lt;true|false&gt;&quot;/&gt; 属性 描述 value 要输出的内容，必要，可以设置为${class:function}输出函数的结果 default 输出的默认值，非必要 escapeXml 设置是否忽略XML特殊字符，默认为true，设置为false则输出HTML内容 &lt;c:forEach&gt;实现循环可以在JSP中使用&lt;c:forEach&gt;实现循环，例子如下 e.g. 1234567&lt;table&gt; &lt;c:forEach var="movie" items="$&#123;movieList&#125;" &gt; &lt;tr&gt; &lt;td&gt;$&#123;movie&#125;&lt;/td&gt; &lt;/tr&gt; &lt;/c:forEach&gt;&lt;/table&gt; 对应脚本如下 12345String[] items = (String[]) request.getAttribute("movieList");for (int i = 0; i &lt; items.length; i++) &#123; String movie = items[i]; out.println(movie);&#125; &lt;c:forEach&gt;属性如下 属性 描述 items 要被循环的信息 begin 开始的元素，0为索引起点 end 最后一个元素 step 迭代的步长 var 代表当前条目的变量名称 varStatus 代表循环状态的变量名称 varStatus建立一个新变量，保存javax.servlet.jsp.jstl.core.LoopTagStatus的一个实例，可以通过在&lt;c:forEach ... varStatus=&quot;movieLoopCount&quot;&gt;内嵌中添加${movieLoopCount.count}得到一个循环计数器，每迭代一次就自增1并输出 嵌套&lt;c:forEach&gt;12345&lt;c:forEach var="listElement" ...&gt; &lt;c:forEach ... items="$&#123;listElement&#125;"&gt; ... &lt;/c:forEach&gt;&lt;/c:forEach&gt; &lt;c:if&gt;实现判断语法格式 123&lt;c:if test="&lt;boolean&gt;" var="&lt;string&gt;" scope="&lt;string&gt;"&gt; ...&lt;/c:if&gt; 属性 描述 test 条件，必要 var 用于存储条件结果的变量，不必要 scope var属性的作用域 e.g. 123&lt;c:if test="$&#123;userType eq 'member'&#125;" &gt; &lt;jsp:include page="xxx.jsp" /&gt;&lt;/c:if&gt; &lt;c:choose&gt;实现if-else效果&lt;c:choose&gt;是&lt;c:when&gt;与&lt;c:otherwise&gt;的父标签，通过这三个标签可以实现if-else或者switch效果 语法格式 12345678910111213&lt;c:choose&gt; &lt;c:when test="&lt;boolean&gt;"&gt; ... &lt;/c:when&gt; &lt;c:when test="&lt;boolean&gt;"&gt; ... &lt;/c:when&gt; ... ... &lt;c:otherwise&gt; ... &lt;/c:otherwise&gt;&lt;/c:choose&gt; &lt;c:set&gt;设置变量和对象属性语法格式 123456&lt;c:set var="&lt;string&gt;" value="&lt;string&gt;" target="&lt;string&gt;" property="&lt;string&gt;" scope="&lt;string&gt;"/&gt; 属性 描述 value 要存储的值 target 要修改的属性所属的对象 property 要修改的属性 var 存储信息的变量 scope var属性的作用域 使用&lt;c:set&gt;设置属性变量var1.没有体&lt;c:set var=&quot;userLevel&quot; scope=&quot;session&quot; value=&quot;Cowboy&quot; /&gt; 2.有体&lt;c:set var=&quot;userLevel&quot; scope=&quot;session&quot; &gt;Sheriff, Bartender, Cowgirl&lt;/c:set&gt; 有体的情况下，会计算体并作为变量的值，如果值计算为null，变量会被删除 对bean和Map使用&lt;c:set&gt;这一类&lt;c:set&gt;只能用来设置bean属性和Map值，不能用它来向列表或数组增加元素 1.没有体&lt;c:set target=&quot;${PetMap}&quot; property=&quot;dogName&quot; value=&quot;Clover&quot;&gt; 如果target是一个bean，则property为属性，如果target是一个Map，则property为键。 2.有体&lt;c:set target=&quot;${person}&quot; property=&quot;name&quot; &gt;${foo.name}&lt;/c:set&gt; 体可以是一个String或表达式 &lt;c:set&gt;要点和技巧 &lt;c:set&gt;不能同时有var和target属性 scope是可选的，默认为page作用域 如果value为null，var指定的属性将被删除 target必须放入一个能解析为实际对象的表达式，不能为String &lt;c:remove&gt;删除元素语法格式&lt;c:remove var=&quot;&lt;string&gt;&quot; scope=&quot;&lt;string&gt;&quot; var为要删除的变量名，scope为变量的作用域var属性必须是一个String直接量，不能是表达式 1&lt;c:remove var="userState" scoper="request" /&gt; &lt;c:import&gt;包含内容语法格式 1234567&lt;c:import url="&lt;string&gt;" var="&lt;string&gt;" scope="&lt;string&gt;" varReader="&lt;string&gt;" context="&lt;string&gt;" charEncoding="&lt;string&gt;"/&gt; 属性 描述 url 待导入资源的URL，可以是相对路径或绝对路径 context 当使用相对路径访问外部context时，context指定了这个资源的名字 charEncoding 所引入的数据的字符编码集 var 用于存储所引入的文本的变量 scope var属性的作用域 varReader 可选的用于提供java.io.Reader对象的变量 三种包含内容方法的区别1.include指令&nbsp;&nbsp;&nbsp;&nbsp;&lt;%@ include file=&quot;Header.html&quot; %&gt;&nbsp;&nbsp;&nbsp;&nbsp;静态导入，在转换时将file指定的文件内容加入到当前页面 2.&lt;jsp:include&gt;标准动作&nbsp;&nbsp;&nbsp;&nbsp;动态，在请求时将page属性指定的内容添加到当前页面 3.&lt;c:import&gt;JSTL标记&nbsp;&nbsp;&nbsp;&nbsp;动态，与标准动作相似但更强大更灵活。 引用WEB应用之外的内容&lt;c:import&gt;可以加载WEB应用之外的内容，只需指定url即可，如下 123456&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&gt;&lt;html&gt;&lt;body&gt; &lt;c:import url="http://www.wickedlysmart.com/skyler/horse.html" /&gt;&lt;/body&gt;&lt;/html&gt; 注意！导入的horse.html应该是一个HTML片段，而不是一个有开始和结束标记的完整页面！ &lt;c:param&gt;定制包含的内容语法格式 &lt;c:param name=&quot;&lt;string&gt;&quot; value=&quot;&lt;string&gt;&quot;/&gt; name：URL中要设置的参数的名称 value：参数的值 使用&lt;c:param&gt;实现子标题上一节中我们使用&lt;jsp:param&gt;实现了页眉的子标题，&lt;c:param&gt;也能实现同样的效果 使用&lt;jsp:import&gt;的JSP 1234567&lt;html&gt;&lt;body&gt; &lt;c:import url="Header.jsp" &gt; &lt;c:param name="subTitle" value="this is a subtitle name"/&gt; &lt;/c:import&gt;&lt;/body&gt;&lt;/html&gt; 所包含的文件Header.jsp 12&lt;!-- some html --&gt;&lt;p&gt;$&#123;param.subTitle&#125;&lt;/p&gt; &lt;c:url&gt;满足所有超链接需求语法格式 12345&lt;c:url var="&lt;string&gt;" scope="&lt;string&gt;" value="&lt;string&gt;" context="&lt;string&gt;"/&gt; value是基本url，context是本地网络应用名，var是代表URL的变量名，scope是var的作用域。 对URL编码，可以把用户的jsessionid追加到特定的 URL最后，具体编码方法如下 在servlet中 123public void doGet(...) &#123; out.println(response.encodeURL("/BeerTest.do"));&#125; 在JSP中 1&lt;a href="&lt;c:url value='/xxx.jsp' /&gt;"&gt;click here&lt;/a&gt; GET请求需要在URL中传入参数，而参数有时有空格的时候需要对URL编码 e.g. 1234&lt;c:set var="last" value="Hidden Cursor" /&gt;&lt;c:set var="first" value="Crouching Pixels" /&gt;&lt;c:url value="/inputComments.jsp?first=$&#123;first&#125;&amp;last=$&#123;last&#125;" var="inputURL" /&gt; 在&lt;c:url&gt;中使用&lt;c:param&gt;可以解决编码的问题 1234567&lt;c:set var="last" value="Hidden Cursor" /&gt;&lt;c:set var="first" value="Crouching Pixels" /&gt;&lt;c:url value="/inputComments.jsp" var="inputURL" &gt; &lt;c:param name="firstName" value="$&#123;first&#125;" /&gt; &lt;c:param name="lastName" value="$&#123;last&#125;" /&gt;&lt;/c:url&gt; 使用参数编码后，URL如下所示/inputComments.jsp?firstName=Crouching+Pixels&amp;lastName=Hidden+Cursor 建立自己的错误页面指定错误页面errorPage.jsp 1234567&lt;%@ page isErrorPage="true" %&gt;&lt;html&gt;&lt;body&gt; ...&lt;/body&gt;&lt;/html&gt; 抛出异常坏页面的普通页面 1&lt;%@ page errorPage="errorPage.jsp" %&gt; 使用&lt;error-page&gt;DD标记可以在DD中为整个WEB应用声明错误页面，甚至可以为不同异常或HTTP错误码类型（404,500等）配置不同的错误页面。如下： 声明一个普遍型错误页面，在DD中 1234&lt;error-page&gt; &lt;exception-type&gt;java.lang.Throwable&lt;/exception-type&gt; &lt;location&gt;/errorPage.jsp&lt;/location&gt;&lt;/error-page&gt; 为更明确的异常声明一个错误页面 1234&lt;error-page&gt; &lt;exception-type&gt;java.lang.ArithmeticExcption&lt;/exception-type&gt; &lt;location&gt;/arithmeticError.jsp&lt;/location&gt;&lt;/error-page&gt; 根据一个HTTP状态码声明错误页面 1234&lt;error-page&gt; &lt;error-code&gt;404&lt;/error-code&gt; &lt;location&gt;/notFoundError.jsp&lt;/location&gt;&lt;/error-page&gt; exception对象错误页面提供一个exception对象，可以使用隐式对象exception也可以使用${pageContext.exception}得到，这个对象的类型是java.lang.Throwable注意，该隐式对象仅对有声明isErrorPage=&quot;true&quot;的页面可用 &lt;c:catch&gt;实现try/catch&lt;c:catch&gt;&lt;/c:catch&gt;体内元素相当于JAVA的try/catch，可以使用属性var保存该异常放在页面作用域，并按var值命名 1234567&lt;c:catch var="myException"&gt; &lt;% int x = 10/0; %&gt;&lt;/c:catch&gt;&lt;c:if test="$&#123;myException != null&#125;"&gt; exception is $&#123;myException.message&#125;&lt;/c:if&gt; 理解TLDTLD配置文件TLD描述了两个主要内容：定制标记和EL函数，上一章曾经用过只有一个&lt;function&gt;元素的TLD，这节还要用到&lt;tag&gt;元素，如下 123456789101112131415161718&lt;tlib-version&gt;1.2&lt;/tlib-version&gt;&lt;short-name&gt;RandomTags&lt;/short-name&gt;&lt;uri&gt;randomThings&lt;/uri&gt;&lt;tag&gt; &lt;description&gt;random advice&lt;/description&gt; &lt;name&gt;advice&lt;/name&gt; &lt;tag-class&gt;foo.AdvisorTagHandler&lt;/tag-class&gt; &lt;body-content&gt;empty&lt;/body-content&gt; &lt;attribute&gt; &lt;name&gt;user&lt;/name&gt; &lt;required&gt;true&lt;/required&gt; &lt;rtexprvalue&gt;true&lt;/rtexprvalue&gt; &lt;/attribute&gt;&lt;/tag&gt; 解释TLDTLD解释如下:&lt;tlib-version&gt;必要，声明标记库版本&lt;short-name&gt;必要，主要由工具使用&lt;uri&gt;taglib指令使用的唯一名&lt;description&gt;不解释&lt;name&gt;必要，标记中使用的就是这个名（冒号右边）&lt;tag-class&gt;必要，在JSP使用这个标记要调用什么&lt;body-content&gt;必要，说明体内不可以有任何内容&lt;attribute&gt;用来设置属性，rtexprvalue指定该属性是否可以是一个表达式，如果设置为false或者没有设置，则不能使用类似&quot;${userName}&quot;这样的表达式 如何使用定制标记使用这个标记的JSP如下 123&lt;%@ taglib prefix="mine" uri="randomThings" %&gt;&lt;mine:advice user="$&#123;userName&#125;" /&gt;&gt; 定制标记处理器1234567891011public class AdvisorTagHandler extends SimpleTagSupport &#123; public void doTag() throws JspException, IOException &#123; ... &#125; // 这里的XXX对应的是标记的属性 public void setXXX(String xxx) &#123; ...; &#125;&#125; 容器对TLD的查找容器会在4个地方查找TLD WEB-INF WEB-INF的子目录 WEB-INF/lib下一个JAR文件的META-INF WEB-INF/lib下一个JAR文件的META-INF目录的子目录]]></content>
      <categories>
        <category>Servlet</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
        <tag>JSP</tag>
        <tag>JSTL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript03-引用类型]]></title>
    <url>%2F2018%2F09%2F03%2FJavaScript03-%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[JavaScript03-引用类型Object类型引用类型的值是引用类型的一个实例，注意引用类型虽然常被称为类，但它与传统面向对象语言的类不一样，ECMAScript没有类和接口等基本结构，ECMAScript的引用类型有时候也称为对象定义，因为它们描述的是一类对象所具有的属性和方法。 两种构造Object实例的方法构造函数123var person = new Object();person.name = "Nicholas";person.age = 29; 对面字面量表示法1234var person = &#123; name : "Nicholas", age : 29&#125;; 访问对象属性1234alert(person.name); // "Nicholas"alert(person["name"]); // "Nicholas"var propertyName = "name";alert(person[propertyName]); // "Nicholas" Array类型与其他语言不一样的是，ECMAScript数组的每一项可以保存任何类型的数据，而且ECMAScript的大小是可以动态调整的。 创建Array的基本方式Array构造函数1234var colors1 = new Array();var colors2 = new Array(20); // 指定Array的长度为20，注意，这里并不是让colors2的第一个元素是20，而是指定其长度20var colors3 = new Array("red", "blue", "green"); 字面量表示法12var colors = ["red", "blue", "green"];var names = []; Arrays.length由于ECMAScript的数组是可以动态调整的，因此其属性length不是只读的，可以为其赋值达到调整数组长度的效果，也可以12var colors = [ some colors ];colors[colors.length] = "other-color"; 为Array添加新元素 一些Array的属性检测数组Array.isArray(value)判断Array是否为数组 转换方法toLocaleString() 返回逗号分割开的字符串，但是调用的是toLocaleString()方法toString() 返回用逗号分割开的数组的每个元素valueOf() 返回数组本身join(param) 用param分割开数组的每个元素 栈方法push(param1,param2,...,paramn)可以接收任意数量参数，按顺序逐个入栈，并返回修改后数组的长度pop()出栈并返回 队列方法shift()删除第一个元素并返回push()同上栈方法的push()unshift(param)数组前端添加任意个项并返回数组的长度 重排序方法reverse()sort()默认的sort()会调用toString()然后比较其字符串的大小来排序，在很多情况下这样排序都不是最佳方案，如下123var values = [0, 1, 5, 10, 15];values.sort();alert(values); // 0,1,10,15,5 可以通过重排序方法接收一个比较函数作为参数来排序比较函数接收两个参数，如果第一个参数应位于第二个参数之前则返回一个负数，相等返回0,否则返回正数，以下为一个简单的比较函数123456789101112function compare(value1, value2) &#123; if(value1 &lt; value2) &#123; return -1; &#125; else if (value1 &gt; value2) &#123; return 1; &#125; else &#123; return 0; &#125;&#125;var values = [0, 1, 5, 10, 15];values.sort(compare);alert(values); // 0,1,5,10,15 对于数值类型或者valueOf()方法会返回数值的类型，只要123function compare(value1, value2) &#123; return value2-value1;&#125; 操作方法cancat()会创建当前数组的一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组，如果没有参数，则只是复制当前数组并返回副本slice()切片，接收1个或2个参数，即要返回项的起始和结束位置。 splice()： 删除：接收2个参数，删除的第一项的位置和要删除的项数 插入：三个参数，起始位置，0（要删除的项数），要插入的项，如果要插入多项，可以传递3个以上的参数 替换：三个参数，起始位置，要删除的项，要插入的任意数量的项 它始终返回一个数组，包含从原始数组中删除的项。 位置方法indexOf()lastIndexOf()接收2个参数，要查找的项和表示查找起点位置的索引，indexOf()从起点开始往后查找，lastIndexOf()从起点开始往前查找，返回要查找的项在数组中的位置，没找到则返回-1注意位置方法必须严格相等12345var person = &#123; name : "Nicholas" &#125;;var errPeople = [&#123; name : "Nicholas" &#125;];var corPeoole = [person];alert(errPeople.indexOf(person)); // -1alert(corPeople.indexOf(person)); // 0 迭代方法ECMAScript的迭代方法接收2个参数，要在每一项上运行的函数和（可选）运行该函数的作用域对象，传入的函数接收三个参数，数组项的值，该项在数组的位置和数组对象本身。every()对数组的每一项运行给定函数，如果该函数对每一项都返回true，则返回truefilter()对数组的每一项运行给定函数，返回该函数会返回true的项组成的数组forEach()对数组每一项运行给定函数，这个方法没有返回值map()对数组每一项运行给定函数，返回每次函数调用的结果组成的数组some()对数组每一项运行给定函数，如果该函数对任一项返回true，则返回true123456789var numbers = [1,2,3,4,5,4,3,2,1];var everyResult = numbers.every(function(item,index,array)&#123;return (item&gt;2)&#125;);alert(everyResule); // falsevar mapResult = numbers.map(function(item, index, array)&#123;return item * 2;&#125;);alert(mapResult); // [2,4,6,8,10,8,6,4,2]numbers.forEach(function(item, index, array)&#123; /* do something on item */ &#125;); 归并方法reduce()reduceRight()迭代数组的所有项，然后构建一个最终返回的值，reduce()从第一项开始迭代，reduceRight()从最后一项开始，接收两个参数，一个在每一项上调用的函数和（可选）作为归并基础的初始值，传入的函数接收4个参数，前一个值，当前值，项的索引和数组对象。这个函数返回的任何值都会作为第一个参数自动传给下一项1234// e.g. 求和var values = [1,2,3,4,5];var sum = values.reduce(function(prev, cur, index, array)&#123;return prev + cur;&#125;);alert(sum); // 15 Date类型ECMAScript的Date类型类似于java.util.Date类，使用自UTC 1970年1月1日午夜开始经过的毫秒数来保存日期创建一个日期对象可以var now = new Date()可以为构造函数传递毫秒来构建Date对象 Date.parse()接收一个表示日期的字符串参数，转换为毫秒数地区为美国的浏览器接收下列日期格式： “月/日/年”，如6/13/2004; “英文月名 日,年”，如January 12,2004 “英文星期几 英文月名 日 年 时:分:秒 时区”，如 Tue May 25 2004 00:00:00 GMT-0700 ISO 8601扩展格式 YYYY-MM-DDTHH:mm:ss.sssz(如2004-05-25T00:00:00) e.g. 构建2004/5/24的日期对象 var someDate = new Date(Date.parse(&quot;May 25, 2004&quot;));实际上var someDate = new Date(&quot;May 25, 2004&quot;);会自动调用parse Date.UTC()Date.UTC()参数为年份，基于0的月份，月中的日，小时，分钟，秒以及毫秒，年和月是必须的，其他可选，返回对应的毫秒数 e.g. var y2k = new Date(2000, 0);构建2000年1月1日0时的时间 Date.now()返回调用这个函数的时间的毫秒数 继承的方法toLocaleString()可能时间格式会有AM或PMtoString()带有时区信息的日期和时间valueOf()返回毫秒 日期格式化方法 toDateString()——以特定于实现的格式显示星期几，月，日，年 toTimeString()——以特定于实现的格式显示时，分，秒和时区 toLocaleDateString()——以特定于地区的格式显示 toLocaleTimeString()——同上 toUTCString()——以特定于实现的格式完整的UTC日期 其他日期/时间组件方法w3school列出的Date对象方法 RegExp类型ECMAScript通过RegExp类型来支持正则表达式,由于之前学Python的时候有认真的学过正则，但是一段时间没用就忘得差不多了，所以在没有用到的时候就先不学了，摆个链接在需要的时候再去看w3school RegExp对象 Function类型函数是对象，因此函数名实际上是一个指向函数对象的指针，不会与某个函数绑定由于函数名是指针,所以ECMAScript也没有函数重载的概念 函数声明与函数表达式看下面例子1234alert(sum(10, 10));function sum(num1, num2) &#123; return num1 + num2;&#125; 以上代码完全可以执行,因为在代码开始执行之前,解析器会通过一个名为函数声明提升的过程,读取并将函数声明添加到执行环境中,对代码求值时,JavaScript引擎在第一遍会声明函数并将它们放到源代码树的顶部,所以即使先调用函数再定义也不会出错,而像下面的例子就会报错1234alert(sum(10, 10));var sum = function(num1, num2) &#123; return num1 + num2;&#125; 原因在于函数位于一个初始化语句中,而不是一个函数声明 同样的,由于函数为对象,它可以作为另一个函数的参数或返回值. 函数内部属性arguments及其属性callee函数内部有两个特殊的对象:arguments和this,arguments保存传入函数中的所有参数,arguments还有一个属性名为callee,该属性是一个指针,指向拥有这个arguments对象的函数请看下面例子1234567function factorial(num) &#123; if (num &lt;= 1) &#123; return 1; &#125; else &#123; return num * factorial(num-1); &#125;&#125; 上面例子中,如果函数名字不会发生改变,那么这样定义是没有问题的,但如果函数名字改变了,则会发生错误,可以用下面的例子来解决1234567function factorial(num) &#123; if (num &lt;= 1) &#123; return 1; &#125; else &#123; return num * arguments.callee(num-1); &#125;&#125; thisthis与Java的this类似,引用的是函数执行的环境对象(当在网页的全局作用域中调用函数时,this对象引用的就是window)1234567891011window.color = "red";var o = &#123; color: "blue" &#125;;function sayColor() &#123; alert(this.color);&#125;sayColor(); // "red" 引用this对象为windowo.sayColor = sayColor;o.sayColor(); // "blue" caller这个属性保存调用当前函数的函数的引用,若在全局作用域中调用当前函数,则它的值为null123456789function outer() &#123; inner();&#125;function inner() &#123; alert(inner.caller); // 返回outer的源码&#125;outer(); 函数属性和方法lengthlength属性表示函数希望接收的命名参数的个数 prototype保存实例方法,不可枚举 call()与apply()在特定的作用域中调用函数,call()接收第一个参数为运行函数的作用域,后面多个参数为函数的参数,allpy()接收2个参数,第一个为运行函数的作用域,第二个为参数数组或arguments,它们可以用于扩充函数的作用域123456789101112window.color = "red";var o = &#123; color: "blue" &#125;;function sayColor() &#123; alert(this.color);&#125;sayColor(); //redsayColor.call(this); //redsayColor.call(window); //redsayColor.call(o); //blue bind()创建一个函数的实例,并将该实例的this绑定在bind()的参数上123456789window.color = "red";var o = &#123; color: "blue" &#125;;function sayColor() &#123; alert(this.color);&#125;var objectSayColor = sayColor.bind(o);objectSayColor(); //blue 基本包装类型–特殊的引用类型引用类型与基本包装类型最大的区别是对象的生命周期,使用new创建的引用类型的实例,在执行流离开当前作用域之前都一直保存在内存中,而自动创建的基本包装类型的对象,则只存在于一行代码的执行瞬间,然后就会销毁. Boolean建议不适用Boolean对象,而是使用布尔值 Number重写了valueOf(),toLocaleString()和toString(),toString()可以传入参数显示返回几进制数值,除了继承的方法,Number类型还提供了一些用于将数值格式化为字符串的方法num.toFixed(2) // 仅显示小数点后两位,四舍五入num.toExponential(1) // 小数位数为1的指数表示法(e表示法)num.toPrecision() // 返回自适应格式,参数为小数位显示 String字符方法stringValue.charAt(num);stringValue[num];stringValue.charCodeAt(num); // 返回num所在的字符的字符编码 字符串操作方法stringValue.concat(otherString);stringValue.substring();stringValue.slice();stringValue.substr(); // 第一个参数开始位置，第二个为字符串长传入负数后它们的行为不一样，不详述 字符串位置方法stringValue.indexOf()stringValue.lastIndexOf()stringValue.trim() // 删除前置后缀所有空格并返回 字符串大小写转换方法stringValue.toLocaleUpperCase(); // 和下面那个一样，不过一般用这个比较多stringValue.toUpperCase();stringValue.toLocaleLowerCase();stringValue.toLowerCase(); 字符串模式匹配方法stringValue.match()stringValue.search()涉及到正则，偷懒就不写了 localeCompare()比较两个字符串，根据结果返回-1,0,1 单体内置对象由ECMAScript实现提供的，不依赖于寄主环境的对象，在ECMAScript程序执行之前就已经存在了 Global对象偷懒，很多前面都有写，不重复了，书本P131 window对象同上 Math对象提供了数学公式和信息 Math.E 自然对数 Math.LN10 10为底的自然对数 Math.PI π Math.LOG10E 10为底e的对数 Math.SQRT2 2的平方根 等等其他值 舍入方法 Math.ceil() 向上舍入 Math.floor() 向下舍入 Math.round() 四舍五入 random()返回0-1的随机数 其他方法 Math.abs() Math.exp() Math.log() 等等]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>JS引用类型</tag>
        <tag>JS包装类型</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript02-变量，作用域和内存问题]]></title>
    <url>%2F2018%2F09%2F02%2FJavaScript02-%E5%8F%98%E9%87%8F-%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[JavaScript02-变量，作用域和内存问题变量JavaScript变量只是在特定时间用于保存特定值的一个名字，不存在定义某个变量就必须保存何种数据类型值的规则，变量的值及其数据类型可以在脚本的生命周期内改变。 基本类型和引用类型的值ECMAScript规定基本类型值指的是简单的数据段，而引用数据值指那些可能由多个值构成的对象，在JavaScript中，Undefined,Null,Boolean,Number,String都是基本数据类型，都是按值访问的。而引用类型的值是保存在内存中的对象，只有Object类型是引用数据类型。 动态的属性123var person = new Object();person.name = "PersonName";alert(person.name); // "PersonName" 以上代码我们创建了一个对象并将其值保存在person中，然后为该对象添加了一个名为name的属性，而对基本数据类型，虽然为其添加属性不会报错，但访问该属性的时候并不能成功访问。 复制变量值对于基本数据类型，12var num1 = 5;var num2 = num1; 两个变量之间不会相互影响。 而对于引用数据类型1234var obj1 = new Object();var obj2 = obj1;obj1.name = "objName";alert(obj2.name); // "objName" obj1和obj2引用的都是同一个对象 传递参数基本类型值的传递就如同基本类型变量的复制一样，而引用类型值的传递，也如同引用类型变量的复制一样。 执行环境及作用域执行环境定义了变量或函数有权访问的其他数据，决定了它们各自的行为，每个执行环境都有一个与之关联的变量对象，环境中定义的所有变量和函数都保存在这个对象中，解析器在处理数据时会在后台使用它。全局执行环境是最外围的一个执行环境。根据ECMAScript实现所在宿主环境不同，表示环境的对象也不同，在WEB浏览器中，全局执行环境被认为是window对象。每个函数都有自己的执行环境，当执行流进入一个函数的时候，函数的环境会进入环境栈，函数执行完毕后栈将其环境弹出，把控制权交还给之前的执行环境。当代码在一个环境中执行，会创建变量对象的一个作用域链。作用域链的作用是保证对执行环境有权访问的所有变量和函数的有序访问。作用域链的前段始终是当前执行代码所在环境的变量对象，如果这个环境是函数，则将其活动对象作为变量对象，该活动最开始时只有一个变量arguments对象。作用域链的下一对象来自包含的环境，再下一个变量对象来自下一个包含环境，一直到全局执行环境。标识符解析是沿着作用域链一级一级地搜索标识符的过程。搜索过程始终从作用域链的前端开始，逐级往后回溯，直至找到标识符为止。其实跟Java的作用域在表现上差不多。 延长作用域链以下两个语句都会在作用域链的前端添加一个变量对象。 try-catch语句的catch块 with语句 没有块级作用域123456789if (true) &#123; var color = "blue";&#125;alert(color); // "blue"for (var i = 0; i &lt; 10; i++) &#123; doSomeThing(i);&#125;alert(i); // 10 在JavaScript中，if和for中创建的变量依旧存在于外部的执行环境中。 垃圾收集JavaScript具有自动垃圾收集机制，执行环境会负责管理代码执行过程中使用的内存。 标记清除垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记，然后它会去掉环境中的变量以及被环境中的变量引用的变量的标记。而再次之后再被加上标记的变量将被视为准备删除的变量。 引用计数跟踪记录每个值被引用的次数，当引用次数变为0的时候，就回收其占用的内存空间，循环引用问题无法解决，很少使用。 管理内存对于全局变量，当确定不再使用的时候，可以为其赋值null，让值脱离执行环境，以便垃圾收集器下次运行时将其回收。]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>JS作用域链</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Servlet03-会话状态]]></title>
    <url>%2F2018%2F09%2F01%2FServlet03-%E4%BC%9A%E8%AF%9D%E7%8A%B6%E6%80%81%2F</url>
    <content type="text"><![CDATA[Servlet03-会话状态前言：这部分涉及到http cookie相关的知识，这里不再赘述 HttpSession一个HttpSession的例子代码摘自runoob，原网站为runoob的Session教程123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869@WebServlet("/SessionTrack")public class SessionTrack extends HttpServlet &#123; private static final long serialVersionUID = 1L; public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; // 如果不存在 session 会话，则创建一个 session 对象 HttpSession session = request.getSession(true); // 获取 session 创建时间 Date createTime = new Date(session.getCreationTime()); // 获取该网页的最后一次访问时间 Date lastAccessTime = new Date(session.getLastAccessedTime()); //设置日期输出的格式 SimpleDateFormat df=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); String title = "Servlet Session 实例 - 菜鸟教程"; Integer visitCount = new Integer(0); String visitCountKey = new String("visitCount"); String userIDKey = new String("userID"); String userID = new String("Runoob"); // 检查网页上是否有新的访问者 if (session.isNew())&#123; title = "Servlet Session 实例 - 菜鸟教程"; session.setAttribute(userIDKey, userID); &#125; else &#123; visitCount = (Integer)session.getAttribute(visitCountKey); visitCount = visitCount + 1; userID = (String)session.getAttribute(userIDKey); &#125; session.setAttribute(visitCountKey, visitCount); // 设置响应内容类型 response.setContentType("text/html;charset=UTF-8"); PrintWriter out = response.getWriter(); String docType = "&lt;!DOCTYPE html&gt;\n"; out.println(docType + "&lt;html&gt;\n" + "&lt;head&gt;&lt;title&gt;" + title + "&lt;/title&gt;&lt;/head&gt;\n" + "&lt;body bgcolor=\"#f0f0f0\"&gt;\n" + "&lt;h1 align=\"center\"&gt;" + title + "&lt;/h1&gt;\n" + "&lt;h2 align=\"center\"&gt;Session 信息&lt;/h2&gt;\n" + "&lt;table border=\"1\" align=\"center\"&gt;\n" + "&lt;tr bgcolor=\"#949494\"&gt;\n" + " &lt;th&gt;Session 信息&lt;/th&gt;&lt;th&gt;值&lt;/th&gt;&lt;/tr&gt;\n" + "&lt;tr&gt;\n" + " &lt;td&gt;id&lt;/td&gt;\n" + " &lt;td&gt;" + session.getId() + "&lt;/td&gt;&lt;/tr&gt;\n" + "&lt;tr&gt;\n" + " &lt;td&gt;创建时间&lt;/td&gt;\n" + " &lt;td&gt;" + df.format(createTime) + " &lt;/td&gt;&lt;/tr&gt;\n" + "&lt;tr&gt;\n" + " &lt;td&gt;最后访问时间&lt;/td&gt;\n" + " &lt;td&gt;" + df.format(lastAccessTime) + " &lt;/td&gt;&lt;/tr&gt;\n" + "&lt;tr&gt;\n" + " &lt;td&gt;用户 ID&lt;/td&gt;\n" + " &lt;td&gt;" + userID + " &lt;/td&gt;&lt;/tr&gt;\n" + "&lt;tr&gt;\n" + " &lt;td&gt;访问统计：&lt;/td&gt;\n" + " &lt;td&gt;" + visitCount + "&lt;/td&gt;&lt;/tr&gt;\n" + "&lt;/table&gt;\n" + "&lt;/body&gt;&lt;/html&gt;"); &#125;&#125; 配置好web.xml即可 对这段代码的解释以及补充request.getSession()以及其重构方法request.getSession(false)HttpSession session = request.getSession(boolean create)返回当前reqeust中的HttpSession，如果当前reqeust中的HttpSession为null，当create为true，就创建一个新的Session，否则返回null 当向Session中存取登录信息时，一般建议：HttpSession session =request.getSession(); 当从Session中获取登录信息时，一般建议：HttpSession session =request.getSession(false); session.isNew() - 判断是否为新的用户12345if(session.isNew()) &#123; // do something with new user&#125; else &#123; // do something&#125; session.getId() - 获取当前用户的sessionID其他HttpSession API 禁用cookie的解决方法-URL重写您可以在每个 URL 末尾追加一些额外的数据来标识 session 会话，服务器会把该 session 会话标识符与已存储的有关 session 会话的数据相关联。 例如，http://w3cschool.cc/file.htm;sessionid=12345，session 会话标识符被附加为 sessionid=12345，标识符可被 Web 服务器访问以识别客户端。 URL 重写是一种更好的维持 session 会话的方式，它在浏览器不支持 cookie 时能够很好地工作，但是它的缺点是会动态生成每个 URL 来为页面分配一个 session 会话 ID，即使是在很简单的静态HTML页面中也会如此。 对URL重写，必须要先对URL进行编码可以通过以下两种方法对URL进行编码 jsp中添加&lt;% response.encodeURL(&quot;hello.jsp&quot;); %&gt; Servlet中使用response.encodeRedirectURL()与sendRedirect()，见下面 12345678910@Overrideprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; HttpSession session = request.getSession(); //下面请求重定向的路径。 String path = response.encodeRedirectURL("/BeerTest.do"); String sessionId = request.getSession().getId(); request.setAttribute("sessionId",sessionId); response.sendRedirect(path);&#125; 设置会话超时在web.xml中配置,下面例子是设置15分钟超时 123456&lt;web-app ...&gt; &lt;servlet&gt; ... &lt;/servlet&gt; &lt;session-timeout&gt;15&lt;/session-timeout&gt;&lt;/web-app&gt; 设置特定会话的会话超时session.setMaxInactiveInterval(20*60); // 设置20分钟没有做任何请求就超时 Cookie创建一个新CookieCookie cookie = new Cookie(&quot;username&quot;, name);设置cookie在客户端存活时间cookie.setMaxAge(30*60); // 30min把cookie发送给客户response.addCookie(cookie);从客户请求得到cookie 123456789Cookie[] cookies = request.getCookies();for (int i = 0; i &lt; cookies.length; i++) &#123; Cookie cookie = cookies[i]; if (cookie.getName().equals("username")) &#123; String userName = cookie.getValue(); out.println("Hello " + userName); break; &#125; 简单的cookie示例login.jsp设置表单提交账号密码，如果账号为test，则点击index.jsp的提交按钮可以显示其密码可以在F12 Application Cookies可以看到cookie web.xml 1234567891011121314151617181920212223242526&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" version="4.0"&gt; &lt;servlet&gt; &lt;servlet-name&gt;cookieTest&lt;/servlet-name&gt; &lt;servlet-class&gt;ServletCookie&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;cookieTest&lt;/servlet-name&gt; &lt;url-pattern&gt;/sv.html&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;servlet&gt; &lt;servlet-name&gt;cookieTest2&lt;/servlet-name&gt; &lt;servlet-class&gt;CheckCookie&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;cookieTest2&lt;/servlet-name&gt; &lt;url-pattern&gt;/result.html&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;/web-app&gt; login.jsp 1234567891011121314&lt;%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%&gt;&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt; &lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form action="sv.html" method="post"&gt; &lt;input type="text" name="username" /&gt; &lt;input type="password" name="password" /&gt; &lt;input type="submit" value="提交" /&gt;&lt;/form&gt;&lt;/body&gt; index.jsp 1234567891011&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;$Title$&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;form action="result.html" method="post"&gt; &lt;input type="submit" value="提交" /&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html ServletCookie.java 12345678910111213141516171819202122232425import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.Cookie;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;@WebServlet(name = "ServletCookie")public class ServletCookie extends HttpServlet &#123; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; String username = request.getParameter("username"); String password = request.getParameter("password"); //定义一个名为username，值为Tom的cookie Cookie cookie = new Cookie(username, password); response.addCookie(cookie); request.getRequestDispatcher("index.jsp").forward(request, response); &#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; &#125;&#125; CheckCookie.java 1234567891011121314151617181920212223242526272829303132import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.Cookie;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.io.PrintWriter;@WebServlet(name = "CheckCookie")public class CheckCookie extends HttpServlet &#123; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; response.setContentType("text/html"); PrintWriter out = response.getWriter(); Cookie[] cookies = request.getCookies(); if (cookies != null) &#123; for (Cookie cookie : cookies) &#123; if(cookie.getName().equals("test")) &#123; String userName = cookie.getValue(); out.println(userName); break; &#125; &#125; &#125; &#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; &#125;&#125; HttpSessionBindingListener]]></content>
      <categories>
        <category>Servlet</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
        <tag>HttpSession</tag>
        <tag>Cookie</tag>
        <tag>HttpSessionBindingListener</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Servlet05-无脚本JSP]]></title>
    <url>%2F2018%2F09%2F01%2FServlet05-%E6%97%A0%E8%84%9A%E6%9C%ACJSP%2F</url>
    <content type="text"><![CDATA[Servlet05-无脚本JSPbean法则-使用bean的规范 必须有一个无参数的公共构造函数 必须按命名规范来命名公共的getter和setter setter的参数类型和getter的返回类型必须一致 性质名和类型是由setter和getter得出，而不得来自于类中的一个成员 结合JSP使用时，性质类型必须是String或其他基本类型 使用EL对于model Person，它是一个JavaBean，所以我们要使用与bean相关的标准动作 使用脚本： 123456&lt;html&gt;&lt;body&gt;&lt;% foo.Person p = (foo.Person) request.getAttribute("person"); %&gt;Person is : &lt;%= p.getName() %&gt;&lt;/body&gt;&lt;/html&gt; 使用标准动作： 123456&lt;html&gt;&lt;body&gt;&lt;jsp:useBean id="person" class="foo.Person" scope="request" /&gt;Person created by servlet: &lt;jsp:getProperty name="person" property="name" /&gt;&lt;/body&gt;&lt;/html&gt; 分析&lt;jsp:useBean&gt;和&lt;jsp:getProperty&gt;&lt;jsp:useBean&gt;用 &lt;jsp:useBean&gt; 声明和初始化一个bean属性，id为声明bean对象的标识符，对应于servlet的request.setAttribute(&quot;person&quot;, p)，class为声明的对象的类类型，scope标识这个bean对象的属性作用域 &lt;jsp:useBean&gt;还可以创建一个bean，如果它找不到一个名为”person”的属性对象，它就会建一个 &lt;jsp:getProperty&gt;用 &lt;jsp:getProperty&gt;得到bean属性的性质值，name标识具体的bean对象，与&lt;jsp:useBean&gt;的id属性相匹配，property标识属性中的性质名(也就是与bean类中getter和setter对应的性质) &lt;jsp:setProperty&gt;&lt;jsp:setProperty&gt;是第三个（也是最后一个）bean标准动作，具体使用如下 &lt;jsp:setProperty name=&quot;person&quot; property=&quot;name&quot; value=&quot;yourNameVal&quot; /&gt; &lt;jsp:useBean&gt;可以有体如果把设置方法代码&lt;jsp:setProperty&gt;放在&lt;jsp:useBean&gt;的体中，就可以有条件地设置性质，只有创建新bean时才设置性质值 123&lt;jsp:useBean id="person" class="foo.Person" scope="page" &gt; &lt;jsp:setProperty name="person" property="name" value="yourNameVal" /&gt;&lt;/jsp:useBean&gt; 多态bean引用 &lt;jsp:useBean&gt;的type属性可以用&lt;jsp:useBean&gt;的type属性实现引用类型不同于具体的对象类型，假设新对象的类型为Employee，引用类型是Person &lt;jsp:useBean id=&quot;person&quot; type=&quot;foo.Person&quot; class=&quot;foo.Employee&quot; scope=&quot;page&quot;&gt; 可以实现效果，生成的servlet代码大概如下 12345foo.Person person = null;// 得到person属性的代码if (person == null) &#123; person = new foo.Employee();&#125; type可以是class类型，抽象类型或者是一个接口，class必须是type的一个子类或具体实现，type是声明的类型，而class是要实例化的类 直接从表单请求到JSP - param属性可以通过设置name一致达到直接从请求到JSP的效果，不需要途中经过servlet 假设表单是这样的： 123456789&lt;html&gt; &lt;body&gt; &lt;form action="TestBean.jsp"&gt; name: &lt;input type="text" name="userName"&gt; ID#: &lt;input type="text" name="userID"&gt; &lt;input type="submit"&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; 在TestBean.jsp中 123&lt;jsp:useBean id="person" type="foo.Person" class="foo.Employee"&gt; &lt;jsp:setProperty name="person" property="name" param="userName" /&gt;&lt;/jsp:useBean&gt; 利用param属性，可以把bean的性质值设置为一个请求参数的值，只需指定请求参数 甚至不需要param属性只要把表单内的内容设置与bean的性质一致，甚至可以不需要param属性，如下 123456789&lt;html&gt; &lt;body&gt; &lt;form action="TestBean.jsp"&gt; name: &lt;input type="text" name="name"&gt; ID#: &lt;input type="text" name="userID"&gt; &lt;input type="submit"&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; 在TestBean.jsp中 123&lt;jsp:useBean id="person" type="foo.Person" class="foo.Employee"&gt; &lt;jsp:setProperty name="person" property="name" /&gt;&lt;/jsp:useBean&gt; 如果设置表单中所有请求参数名都与bean性质名匹配，那么甚至连property都可以省略 如下 123456789&lt;html&gt; &lt;body&gt; &lt;form action="TestBean.jsp"&gt; name: &lt;input type="text" name="name"&gt; ID#: &lt;input type="text" name="empID"&gt; &lt;input type="submit"&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; 在TestBean.jsp中 123&lt;jsp:useBean id="person" type="foo.Person" class="foo.Employee"&gt; &lt;jsp:setProperty name="*" property="name" /&gt;&lt;/jsp:useBean&gt; 性质是引用类型的情况假如Person有一个Dog “dog”性质，Dog有一个String “name”性质，如果想打印Person的dog的name，可以用到EL，如下 123&lt;html&gt;&lt;body&gt;Dog's name is : $&#123;person.dog.name&#125;&lt;/body&gt;&lt;/html&gt; 对${person.dog.name}的解释${person.dog.name} 等同于 &lt;%= ((foo.Person) request.getAttribute(&quot;person&quot;)).getDog().getName() %&gt; 使用点号(.)可以访问性质和映射值 使用中括号[]，更好的点号点号右边是一个bean性质或映射键的时候，点号操作符才能正常工作，但[]操作符就强大很多，它既可以完成点号操作符能完成的工作，也可以当左边变量是一个数组或者List或者右边不遵循正常的Java命名规范的时候仍然可以正常工作 EL中的隐式对象param与paramValuesHTML表单中 12345678&lt;form action="TestBean.jsp"&gt; name: &lt;input type="text" name="name"&gt; ID#: &lt;input type="text" name="empID"&gt; First food: &lt;input type="text" name="food"&gt; Second food: &lt;input type="text" name="food"&gt; &lt;input type="submit"&gt;&lt;/form&gt; 对于单个值，可以在JSP中${param.name}获取表单的name对于多个值，可以在JSP中${paramValues.food[0]}获取多个值中的一个 EL的其他隐式对象得到”host”首部${header[&quot;host&quot;]}或${header.host} 得到Cookie打印”userName” Cookie的值 使用脚本： 12345678&lt;% Cookie[] cookies = request.getCookies();for (int i = 0; i &lt; cookies.length; i++) &#123; if ((cookies[i].getName()).equals("userName")) &#123; out.println(cookies[i].getValue()); &#125;&#125;%&gt; 使用EL： ${cookie.uesrName.value} 上下文参数在web.xml中 1234&lt;context-param&gt; &lt;param-name&gt;mainEmail&lt;/param-name&gt; &lt;param-value&gt;12345@outlook.com&lt;/param-value&gt;&lt;/context-param&gt; 使用脚本：&lt;%= application.getInitParameter(&quot;mainEmail&quot;) %&gt; 使用EL：${initParam.mainEmail} EL函数使用EL函数有如下四步骤 编写一个有公共静态方法的Java类 编写一个标记库描述文件(.tld) 在JSP中放一个taglib指令 使用EL调用函数 编写一个有公共静态方法的Java类1234567package com.xhj.web;public class DiceRoller &#123; public static int rollDice() &#123; return (int) ((Math.random() * 6) + 1); &#125;&#125; 编写一个标记库描述文件IDEA中在web目录右键new -&gt; xml configuration file -&gt; JSP tag library descriptor 重命名为*.tld 123456789101112131415161718&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;&lt;taglib xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-jsptaglibrary_2_1.xsd" version="2.1"&gt; &lt;tlib-version&gt;1.0&lt;/tlib-version&gt; &lt;uri&gt;DiceFunctions&lt;/uri&gt; &lt;function&gt; &lt;name&gt;rollIt&lt;/name&gt; &lt;function-class&gt;com.xhj.web.DiceRoller&lt;/function-class&gt; &lt;function-signature&gt;int rollDice()&lt;/function-signature&gt; &lt;/function&gt; &lt;!-- Invoke 'Generate' action to add tags or functions --&gt;&lt;/taglib&gt; 在JSP中放一个taglib指令&lt;%@ taglib prefix=&quot;mine&quot; uri=&quot;DiceFunctions&quot; %&gt; 使用EL调用函数正文添加${mine:rollIt()} 对TLD文件的解释 TLD中的uri对应JSP中taglib指令的uri属性 TLD中function里的name标签的值对应EL表达式中冒号右边使用的函数 TLD中function-class标签对应.class TLD中function-signature标签的值对应.class里的公共静态方法及其返回值 taglib指令中的prefix属性的值对应EL表达式冒号左边的值 *.tld文件可以放在WEB-INF目录或者其某个子目录中 EL处理null对于找不到表达式中指定的属性/性质/键，也会显示页面，在算术表达式中，EL把null值看做是0，在逻辑表达式中，EL把null看做是false 可复用的模板部件对于网站上每个页面的页眉和页脚都一样的情况下，每个JSP反复编写同样的页眉页脚，会显得效率低下，这个时候可以使用include指令把相同的页面放在不同网页对应的位置上 &lt;include&gt;指令用法：&lt;%@ include file=&quot;*.jsp&quot; %&gt; &lt;jsp:include&gt;标准动作用法&lt;jsp:include page=&quot;*.jsp&quot; /&gt; &lt;include&gt;与&lt;jsp:include&gt;的区别include指令在转换时发生，&lt;jsp:include&gt;标准动作在运行时发生include指令相当于复制代码粘贴，标准动作则根据页面属性创建一个RequestDispatcher，并应用include()方法。 注意！不需要把&lt;html&gt;和&lt;body&gt;标签放到可复用部件中 &lt;jsp:param&gt;定制包含的内容假设我们已经有了一个页眉，但是如果我们想要定制页眉的某一部分，比如我希望在页眉上有一个与上下文相关的子标题，它要依页面而定，如下 在对应的jsp文件中 1234567&lt;html&gt;&lt;body&gt;&lt;jsp:include page="Header.jsp"&gt; &lt;jsp:param name="subTitle" value="aha!this is a sub title." /&gt;&lt;/jsp:include&gt;&lt;/body&gt;&lt;/html&gt; 在Header.jsp中 12&lt;img src="directory/images/xxx.png"&gt;&lt;em&gt;&lt;strong&gt;$&#123;param.subTitle&#125;&lt;/strong&gt;&lt;/em&gt; &lt;jsp:forward&gt;转发可以从一个JSP转发到另一个JSP，或者从一个JSP转发到一个servlet，还可以从一个JSP转发到WEB应用中任何其他资源。比如客户访问页面，如果没有登录，就转向另一个页面 123&lt;% if (request.getParameter("userName") == null) &#123; &gt; &lt;jsp:forward page="xx.jsp" /&gt;&lt;% &#125; %&gt;]]></content>
      <categories>
        <category>Servlet</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
        <tag>JSP</tag>
        <tag>EL</tag>
        <tag>bean</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Servlet之WEB应用体系与MVC]]></title>
    <url>%2F2018%2F09%2F01%2FServlet01-WEB%E5%BA%94%E7%94%A8%E4%BD%93%E7%B3%BB%E4%B8%8E%E5%88%9D%E7%AA%A5MVC%2F</url>
    <content type="text"><![CDATA[#Servlet之WEB应用体系与MVC ##WEB应用体系 ###TOMCAT容器的作用 通信支持容器可以让servlet与WEB容器对话，创建ServerSocket，监听端口，创建流等生命周期管理容器控制着servlet的生命周期，负责加载类，实例化，初始化servlet，调用servlet方法，垃圾回收等多线程支持每次接收到用户servlet请求，就会创建一个新的Java线程，声明方式实现安全使用XML部署描述文件配置安全性JSP支持容器负责把JSP翻译成Java ###容器处理请求 用户点击一个链接，指向一个servlet 容器看出来这个请求要的是一个servlet，创建两个对象，分别为HttpServletResponse，HttpServletRequest 容器根据请求的URL找到对应的servlet，为这个请求分配一个线程，并把请求和响应对象传递给这个servlet线程 容器调用service的service()方法，根据请求的不同类型，service()方法会调用doGet()或doPost()方法 doGet()方法生成动态页面，塞到响应对象里 线程结束，容器把响应对象转换为一个HTTP响应，把它发回给客户，然后删除请求和响应对象 ###servlet的映射方式通过配置部署描述文件web.xml可以配置servlet名对应的URL路径一般的web.xml内容如下1234567891011121314151617&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" version="4.0"&gt; &lt;servlet&gt; &lt;servlet-name&gt;yourDefinedName&lt;/servlet-name&gt; &lt;servlet-class&gt;yourServletClassName&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;yourDefinedName&lt;/servlet-name&gt; &lt;url-pattern&gt;/yourUrl&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;/web-app&gt; &lt;servlet&gt;元素告诉容器有哪个类文件&lt;servlet-name&gt;元素用于把一个&lt;servlet&gt;元素与一个特定的&lt;servlet-mapping&gt;元素绑定，最终用户看不到这个名字，这个名字只在这个部署文件的其他部分使用&lt;servlet-class&gt;类的完全限定名，但不要加上.class后缀&lt;servlet-mapping&gt;请求到来时，容器会在运行时使用这个元素，来调用对应的servlet&lt;url-pattern&gt;URL的路径 客户知道的URL名对应的是&lt;url-pattern&gt;的值，部署人员知道的秘密的内部名对应的是&lt;servlet-name&gt;的值，实际的文件名对应的是&lt;servlet-class&gt;的值 ##初窥MVCMVC分别为model，view，controller，MVC的关键是业务逻辑与表示分离，实际上，业务逻辑甚至根本不知道有表示存在 ###Model实际的业务逻辑和状态放在模型中，系统中只有这部分与数据库通信 ###Controller从请求获得用户输入，并明确输入对模型的影响，告诉模型自行更新，并让视图得到新的模型状态，一个servlet实际上就是一个控制器 ###View负责表示，它从控制器得到模型的状态，还要获得用户输入，交给控制器，一个JSP文件其实就是一个View ##一个简单的MVC应用目录树如下其中，com.example.web.BeerSelect为控制器，com.example.model.BeerExpert为模型，result.jsp为view web.xml内容如下1234567891011121314151617&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" version="4.0"&gt; &lt;servlet&gt; &lt;servlet-name&gt;Ch3 Beer&lt;/servlet-name&gt; &lt;servlet-class&gt;com.example.web.BeerSelect&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;Ch3 Beer&lt;/servlet-name&gt; &lt;url-pattern&gt;/SelectBeer.do&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;/web-app&gt; form.html如下123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;form test&lt;/title&gt; &lt;link rel="stylesheet" type="text/css" href="css/form.css"&gt; &lt;/head&gt; &lt;body&gt; &lt;h1 align="center"&gt;Beer Selection Page&lt;/h1&gt; &lt;div id="formT"&gt; &lt;form method="POST" action="SelectBeer.do"&gt; &lt;p&gt;Color: &lt;select name="color"&gt; &lt;option name="light"&gt;light&lt;/option&gt; &lt;option name="dark"&gt;dark&lt;/option&gt; &lt;/select&gt; &lt;p&gt; &lt;input type="submit"&gt; &lt;/p&gt; &lt;/p&gt; &lt;/form&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; result.jsp123456789101112131415161718192021&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;%@ page import="java.util.*" %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1 align="center"&gt;Bear Recommendations JSP&lt;/h1&gt; &lt;p&gt; &lt;% List styles = (List)request.getAttribute("styles"); Iterator it = styles.iterator(); while (it.hasNext()) &#123; out.print("try: " + it.next()); &#125; %&gt; &lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 模型BeerExpert.java如下12345678910111213141516171819package com.example.model;import java.util.ArrayList;import java.util.List;public class BeerExpert &#123; public List getBrands(String color) &#123; List brands = new ArrayList(); if (color.equals("light")) &#123; brands.add("light a"); brands.add("light b"); &#125; else &#123; brands.add("dark1"); brands.add("dark2"); &#125; return brands; &#125;&#125; 控制器BeelSelect如下1234567891011121314151617181920212223242526272829package com.example.web;import com.example.model.BeerExpert;import javax.servlet.RequestDispatcher;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.util.List;@WebServlet(name = "BeerSelect")public class BeerSelect extends HttpServlet &#123; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; String c = request.getParameter("color"); BeerExpert be = new BeerExpert(); List result = be.getBrands(c); request.setAttribute("styles", result); RequestDispatcher view = request.getRequestDispatcher("result.jsp"); view.forward(request, response); &#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; &#125;&#125; ##作为Servlet在上述代码中，Servlet作为控制器有如下功能 获得html页面中参数color的值 创建一个模型，通过参数获得模型对应的属性 设置请求的属性并设置对应值为从模型得到的结果（键-值对应） 创建一个请求分派器对象，获得result.jsp页面 通过view.forward(request,response)把请求和响应发送给该view，view通过request.getAttribute(“key”)来得到模型发送来的结果 ###Servlet生命周期 WEB容器加载servlet类 实例化servlet（构造函数运行） init() service()调用doGet(),doPost()等等 destroy() ###HttpServletRequest API ###HttpServletResponse API ###输出字符或字节对于输出，可以选择输出字符或者字节输出字符的时候12PrintWriter writer = response.getWriter();writer.println("some text or HTML"); 输出字节的时候12ServletOutputStream out = response.getOutputStream();out.write(aByteArray); ####使用响应完成I/Oe.g.Servlet处理下载JAR文件1234567891011121314151617181920public class CodeReutrn extends HttpServlet &#123; public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException &#123; response.setContentType("application/jar"); // 对于这里的ContentType，还有很多其他的，具体可以自行Google ServletContext ctx = getServletContext(); InputStream is = ctx.getResourceAsStream("/directory/xxx.jar"); int read = 0; byte[] bytes = new byte[1024]; OutputStream os = response.getOutputStream(); while((read = is.read(bytes)) != -1) &#123; os.write(bytes, 0, read); &#125; os.flush(); os.close(); &#125;&#125;]]></content>
      <categories>
        <category>Servlet</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
        <tag>MVC</tag>
        <tag>TOMCAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaSCript04-面向对象的程序设计]]></title>
    <url>%2F2018%2F09%2F01%2FJavaScript04-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%2F</url>
    <content type="text"><![CDATA[JavaSCript04-面向对象的程序设计理解对象可以通过以下方式初始化一个对象 123456789var person = &#123; name: "Nicholas", age: 29, job: "Software Engineer", sayName: function() &#123; alert(this.name); &#125;&#125; 属性类型数据属性数据属性包含一个数据值的位置，在这个位置可以读取和写入值，数据属性有4个描述其行为的特性 Configurable: 表示能否通过delete删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性改为访问器属性，默认为true Enumerable: 表示能否通过for-in循环返回属性，默认为true Writable: 表示能否修改属性的值，默认为true Value: 包含这个属性的数据值，默认为undefined 可以通过Object.defineProperty()方法修改默认的特性，接收三个参数：属性所在的对象，属性名和一个描述符对象e.g. 12345678var person = &#123;&#125;;Object.defineProperty(person, "name", &#123; writable: false, value: "Nicholas"&#125;);alert(person.name); // "Nicholas"person.name = "Greg";alert(person.name); // "Nicholas" 在调用Object.defineProperty()方法修改同一个属性时，如果不指定，configurable、enumerable、writable特性的默认值都为false 访问器属性访问器属性不包含数据值，它们包含一对getter函数和setter函数，在读取访问器属性时会调用getter函数，这个函数负责返回有效的值，在写入访问器属性时调用setter函数，这个函数负责决定如何处理数据，访问器属性有如下4个特性 Configurable: 同上 Enumerable: 同上 Get: 在读取属性时调用的函数，默认为undefined Set: 在写入属性时调用的函数，默认为undefined 访问器属性不能直接定义，必须使用Object.defineProperty()来定义 e.g. 12345678910111213141516171819var book = &#123; _year: 2004, edition: 1&#125;;Object.defineProperty(book, "year" &#123; get: function() &#123; return this._year; &#125;, set: function(newValue) &#123; if (newValue &gt; 2004) &#123; this._year = newValue; this.edition += newValue - 2004; &#125; &#125;&#125;);book.year = 2005;alert(book.edition); // 2 若没有指定getter，则属性不能读，若没有指定setter，则属性不能写 定义多个属性ECMAScript5定义了一个Object.defineProperties()方法，可以通过描述符一次定义多个属性，这个方法接收2个对象参数，第一个对象是要添加和修改其属性的对象，第二个对象的属性与第一个对象中要添加或修改的属性一一对应 e.g. 123456789101112131415161718192021222324var book = &#123;&#125;;Object.defineProperties(book, &#123; _year: &#123; writable: true, value: 2004 &#125;, edition: &#123; writable: true, value: 1 &#125;, year: &#123; get: function() &#123; return this._year; &#125;, set: function() &#123; if (newValue &gt; 2004) &#123; this._year = newValue; this.edition += newValue - 2004; &#125; &#125; &#125;&#125;); 可以使用Object.getOwnPropertyDescriptor()来获取对象的特性值 123456789var descriptor = Object.getOwnPropertyDescriptor(book, "_year");alert(descriptor.value); // 2004alert(descriptor.configurable); // falsealert(typeof descriptor.get); // undefinedvar descriptor = Object.getOwnPropertyDescriptor(book, "year");alert(descriptor.value); // undefinedalert(descriptor.enumerable); // falsealert(typeof descriptor.get); // "function" 创建对象工厂模式工厂模式抽象了创建具体对象的过程e.g. 123456789101112function createPerson(name, age, job) &#123; var o = new Object(); o.name = name; o.age = age; o.job = job; o.sayName = function() &#123; alert(this.name); &#125; return o;&#125;var person1 = createPerson("Nicholas", 29, "Software Engineer"); 构造函数模式类似Object，Array都有原生的构造函数，此外还可以创建自定义构造函数，从而定义自定义对象类型的属性和方法e.g. 1234567891011function Person(name, age, job) &#123; this.name = name; this.age = age; this.job = job; o.sayName = function() &#123; alert(this.name); &#125;&#125;var person1 = new Person("Nicholas", 29, "Software Engineer");var person2 = new Person("Greg", 27, "Doctor"); 构造函数的问题使用构造函数模式的缺点就是每个方法都要在每个实例上重新创建一遍在前面例子中，person1和person2的sayName()方法不是同一个Function的实例。每个Person对象的实例都包含一个不同的Function实例alert(person1.sayName == person2.sayName); // false可以通过把函数定义转移到构造函数外部解决这个问题 1234567891011121314function Person(name, age, job) &#123; this.name = name; this.age = age; this.job = job; o.sayName = sayName; &#125;&#125;function sayName() &#123; alert(this.name);&#125;var person1 = new Person("Nicholas", 29, "Software Engineer");var person2 = new Person("Greg", 27, "Doctor"); 原型模式我们创建的每个函数都有一个prototype属性，这个属性是一个指针，指向一个对象，而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。按字面意思理解，prototype就是通过调用构造函数创建的那个对象实例的原型对象。使用原型对象好处是可以让所有对象实例共享它所包含的属性和方法。换句话说，不必在构造函数中定义对象实例的信息，而是可以将这些信息直接添加到原型对象中，如下例子 123456789101112131415function Person() &#123; &#125;Person.prototype.name = "Nicholas";Person.prototype.age = 29;Person.prototype.job = "Software Engineer";Person.prototype.sayName = function() &#123; alert(this.name);&#125;;var person1 = new Person();person1.sayName(); // "Nicholas"var person2 = new Person();alert(person1.sayName == person2.sayName); // true 与构造函数模式不同，新对象的这些属性和方法是由所有实例共享的。 虽然可以通过对象实例访问保存在原型中的值，但不能通过对象实例重写原型中的值，如果我们在实例中添加一个与原型中一个属性同名的属性，那我们就在实例中创建该属性，并屏蔽原型中的那个属性。通过delete可以重新获取来自原型的属性 1234var person1 = new Person();person1.name = "Greg";delete person1.name;alert(person1.name); // "Nicholas" 理解原型对象无论什么时候，只要创建了一个新函数，就会根据一组特定的规则为该函数创建一个prototype属性，这个属性指向函数的原型对象。默认情况下，所有原型对象都会自动获得一个constructor（构造函数）属性，这个属性是一个指向prototype属性所在函数的指针，关系如下图。 更简单的原型语法12345678910function Person() &#123; &#125;Person.prototype = &#123; name : "Nicholas", age : 29, job : "Software Engineer", sayName : function() &#123; alert(this.name); &#125;&#125;; 但是使用对象字面量重写prototype的问题是constructor属性不再指向Person了，可以通过Object.defineProperty()方法解决 1234Object.defineProperty(Person.prototype, "constructor", &#123; enumerable: false, value: Person&#125;); 原型的动态性尽管可以随时为原型添加属性和方法，并且修改能够立即在所有对象实例中反映出来，但如果是重写整个原型对象，那么情况就不一样了。把原型修改为另一个对象就等于切断了构造函数与最初原型之间的联系，看下面例子 1234567891011121314function Person() &#123; &#125;var friend = new Person();Person.prototype = &#123; constructor : Person, age : 29, job : "Software Engineer", sayName : function() &#123; alert(this.name); &#125;&#125;;friend.sayName(); // error!!! 下图揭示了上述代码整个过程的内幕 原型对象的问题原型对象最大的问题就是它共享的本性，对于包含引用类型值的属性来说，问题就比较突出了，见下面例子 1234567891011121314151617181920function Person() &#123; &#125;Person.prototype = &#123; constructor : Person, name : "Nicholas", age : 29, job : "Software Engineer", friends : ["Shelby", "Court"], sayName : function() &#123; alert(this.name); &#125;&#125;;var person1 = new Person();var person2 = new Person();person1.frineds.push("Van");alert(person2.friends); // "Shelby","Court","Van"alert(person1.friends == person2.friends) // true 组合使用构造函数模式和原型模式构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性。结果，每个实例都有自己的一份实例属性，同时又共享着对方法的引用，最大限度节省了内存。 123456789101112131415function Person(name ,age, job) &#123; this.name = name; this.job = hob; this.age = age; this.friends = ["Shelby", "Court"];&#125;Person.prototype = &#123; constructor : Person, sayName : function() &#123; alert(this.name); &#125;&#125;// 测试代码 动态原型模式它把所有信息都封装在构造函数中，而通过在构造函数中初始化原型，又保持了同时使用构造函数和原型的优点。 1234567891011function Person(name, age, job) &#123; this.name = name; this.age = age; this.job = job; if (typeof this.sayName != "function") &#123; Person.prototype.sayName = function() &#123; alert(this.name); &#125;; &#125;&#125; 判断语句if那里，只在sayName()不存在的情况下才将它添加到原型中。这段代码只会在初次调用构造函数时才会执行，其中，if语句检查的可以是初始化之后应该存在的任何属性和方法，不必用一大堆if语句检查每个属性和方法。 继承ECMAScript只支持实现继承，主要依靠原型链来实现的 原型链原型链的基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法。每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。假如我们让原型对象等于另一个类型的实例，此时的原型对象将包含一个指向另一个原型的指针，响应，另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立，如此层层递进，就构成了实例与原型的链条。这就是所谓的原型链的基本概念。 123456789101112131415161718192021function SuperType() &#123; this.property = true;&#125;SuperType.prototype.getSuperValue = function() &#123; return this.property;&#125;;function SubType() &#123; this.subproperty = false;&#125;// 继承SuperTypeSubType.prototype = new SuperType();SubType.prototype.getSubValue = function() &#123; return this.subproperty;&#125;;var instance = new SubType();alert(instance.getSuperType()); // true 别忘记默认的原型所有引用类型默认都继承了Object，这个继承也是通过原型链实现的，下图为完整的原型链 原型链要注意的事项 子类型有时候要覆盖超类型中的某个方法，或者需要添加超类型中不存在的某个方法，但不管怎么样，给原型添加方法的代码一定要放在替换原型的语句之后 通过原型链实现继承时，不能使用对象字面量创建原型方法，因为这样做会重写原型链 原型链的问题原型链主要的问题仍然是包含引用类型值的原型。通过原型来实现继承时，原型实际上会变成另一个类型的实例，于是，原先的实例属性也就变成现在的原型属性了。 1234567891011121314function SuperType() &#123; this.colors = ["red", "blue", "green"];&#125;function SubType() &#123; &#125;SubType.prototype = new SuperType();var instance1 = new SubType();instance1.colors.push("black");alert(instance1.colors); // "red","blue","green","black"var instance2 = new SubType();alert(instance2.colors); // "red","blue","green","black" 第二个问题是创建子类型的实例时，不能向超类型的构造函数传递参数。鉴于这两个问题，下面介绍的方法更加实用 借用构造函数在子类型的构造函数的内部调用超类型构造函数，如下 1234567function SuperType() &#123; this.colors = ["red", "blue", "green"];&#125;function SubType() &#123; SuperType.call(this);&#125; 传递参数12345678function SuperType(name) &#123; this.name = name;&#125;function SubType() &#123; SuperType.call(this, "Nicholas"); this.age = 29;&#125; 借用构造函数的问题 方法都在构造函数中定义，函数复用无从谈起 超类型的原型中定义的方法，对子类型而言不可见 组合继承（伪经典继承）把原型链和借用构造函数的技术组合到一起，使用原型链对原型属性和方法继承，借用构造函数对实例属性的继承。 123456789101112131415161718192021function SuperType(name) &#123; this.name = name; this.colors = ["red", "blue", "green"];&#125;SuperType.prototype.sayName = function() &#123; alert(this.name);&#125;function SubType(name, age) &#123; // 继承属性 SuperType.call(this.name); this.age = age;&#125;// 继承方法SubType.prototype = new SuperType();SubType.prototype.constructor = SubType;SubType.prototype.sayAge = function()&#123; alert(this.age);&#125;; 寄生组合式继承组合继承的问题就在于无论什么情况下，都会调用两次超类型构造函数，一次是在创建子类型原型的时候，另一次是在子类型构造函数内部，第一次调用的时候，SubType.prototype会得到两个属性：name和colors，当调用SubType构造函数的时候，又会调用一次SuperType构造函数，这一次又在新对象上创建了实例属性name和colors（与SubType原型一样的属性），于是这两个属性就屏蔽了原型中同名的两个属性。 所谓寄生组合式继承，就是通过借用构造函数来继承属性，通过原型链混成形式继承方法，其背后的基本思路是：不必为了指定子类型的原型而调用超类型的构造函数，我们所需要的无非就是超类型的原型的一个副本而已，这样，子类型的原型就不会有重复多余的超类型继承得来的属性了（因为超类型的原型没有这些属性）。 1234567891011121314151617181920212223242526272829303132function object(o) &#123; function F() &#123;&#125; F.prototype = o; return new F();&#125;function inheritPrototype(subType, superType) &#123; var prototype = object(superType.prototype); prototype.constructor = subType; subType.prototype = prototype;&#125;function SuperType(name) &#123; this.name = name; this.colors = ["red", "blue", "green"];&#125;SuperType.prototype.sayName = function() &#123; alert(this.name);&#125;function SubType(name, age) &#123; // 继承属性 SuperType.call(this.name); this.age = age;&#125;inheritPrototype(SubType, SuperType);SubType.prototype.sayAge = function() &#123; alert(this.age);&#125; 这种继承方法高效率体现在它只调用了一次SuperType构造函数，因此避免了在SubType.prototype上创建不必要的，多余的属性。]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>JS面向对象</tag>
        <tag>JS原型</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Servlet04-JSP]]></title>
    <url>%2F2018%2F09%2F01%2FServlet04-JSP%2F</url>
    <content type="text"><![CDATA[Servlet04-JSP基本指令page使用page指令导入包&lt;%@ page import=&quot;foo.*&quot; %&gt;&lt;%@ page import=&quot;foo.*,java.util.*&quot; %&gt; page指令的属性 taglibtaglib定义JSP可用的标记库&lt;%@ taglib tagdir=&quot;/WEB-INF/tags/cool&quot; prefix=&quot;cool&quot; %&gt; includeinclude定义在转换时增加到当前页面的文本和代码&lt;%@ include file=&quot;xxx.html&quot; %&gt;使用此指令允许你建立可重用的块（如标准页面标题或导航栏），这些可重用的块能增加到各个页面上，而不用每个JSP都重复写这些代码 表达式对于&lt;% out.println(Counter.getCount()); %&gt;可以用&lt;%= Counter.getCount() %&gt;代替，不需要分号，表达式内的内容为out.print的参数 声明&lt;%! int count = 0; %&gt;声明该JSP所生成的servlet类的成员 初始化JSP在配置文件中如下配置 12345678910&lt;web-app ...&gt; &lt;servlet&gt; &lt;servlet-name&gt;name&lt;/servlet-name&gt; &lt;jsp-file&gt;/directory/xxx.jsp&lt;/jsp-file&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;name&lt;/servlet-name&gt; &lt;url-pattern&gt;/xxx&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;/web-app&gt; 覆盖jspInit()只要在.jsp文件中实现了jspInit()方法，在JSP页面成为servlet的最开始容器就会调用这个方法，这个方法由servlet的init()方法调用，所以在运行jspInit()方法时，已经有一个ServletConfig和ServletContext可供servlet使用，可以在jspInit()中调用getServletConfig()和getServletContext() 123456&lt;%! public void jspInit() &#123; ServletConfig sConfig = getServletConfig(); // do something &#125;%&gt; 同理jspDestroy()也可以覆盖 JSP的属性除了Servlet拥有的请求，会话和上下文这三个属性，JSP还拥有页面作用域pageContext（隐式对象），常用于开发定制标记 使用PageContext得到属性可以在PageContext引用得到任意作用域的属性 同理使用&lt;% pageContext.setAttribute(&quot;foo&quot;, &quot;attr&quot;, PageContext.SESSION_SCOPE); %&gt;等同于&lt;% session.setAttribute(&quot;foo&quot;, &quot;attr&quot;); %&gt; 使用&lt;%= pageContext.findAttribute(&quot;foo&quot;) %&gt;可以在不知道作用域的情况下查找一个属性 EL预热EL(Expression Language)是无脚本JSP，可以允许开发人员在JSP中不适用Java也能达到同样的效果 为什么使用EL？ 不应该要求WEB页面设计人员必须懂Java JSP中的Java代码很难修改和维护 开启无脚本JSP在配置文件web.xml中 123456789101112&lt;web-app ...&gt; ... &lt;jsp-config&gt; &lt;jsp-property-group&gt; &lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt; &lt;scripting-invalid&gt; true &lt;/scripting-invalid&gt; &lt;/jsp-property-group&gt; &lt;/jsp-config&gt; ...&lt;/web-app&gt; 选择忽略EL123456789101112&lt;web-app ...&gt; ... &lt;jsp-config&gt; &lt;jsp-property-group&gt; &lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt; &lt;el-ignored&gt; true &lt;/el-ignored&gt; &lt;/jsp-property-group&gt; &lt;/jsp-config&gt; ...&lt;/web-app&gt;]]></content>
      <categories>
        <category>Servlet</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
        <tag>JSP</tag>
        <tag>EL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Servlet02-ServletConfig,ServletContext与监听器]]></title>
    <url>%2F2018%2F09%2F01%2FServlet02-ServletConfig%2CServletContext%E4%B8%8E%E7%9B%91%E5%90%AC%E5%99%A8%2F</url>
    <content type="text"><![CDATA[Servlet02-ServletConfig,ServletContext与监听器通过web.xml可以初始化参数，避免了硬编码改变了源码与重新编译的麻烦，如下：12345678&lt;servlet&gt; &lt;init-param&gt; &lt;param-name&gt;name&lt;/param-name&gt; &lt;param-value&gt;value&lt;/param-value&gt; &lt;/init-param&gt;&lt;/servlet-name&gt; 在servlet代码中通过1234567来获取该值或者通过下面例子处理```Java Enumeration e = getServletConfig().getInitParameterNames(); while(e.hasMoreElements()) &#123; // do something with e.nextElement(); &#125; 但ServletConfig仅仅能在该servlet中使用，对于想要在全局使用的参数实在不方便，ServletContext可以很好的解决这个问题 ServletContext在web.xml中添加1234&lt;context-param&gt; &lt;param-name&gt;adminEmail&lt;/param-name&gt; &lt;param-value&gt;231232@oaiw.com&lt;/param-value&gt;&lt;/context-param&gt; Servlet中通过getServletContext().getInitParameter(&quot;adminEmail&quot;);来获取 ServletConfig与ServletContext的区别 在部署文件中，上下文初始化参数是在&lt;web-app&gt;中的，而Servlet初始化参数是在servlet中的 ServletConfig的作用域为每个servlet，而ServletContext的作用域为整个WEB应用 ServletContextListener由于ServletContext在初始化的时候只能保存字符串，若要保存一个对象或在应用启动之前利用该字符串做一些准备工作（比如打开数据库），则需要监听器的帮助。ServletContextListener接口可以监听一个上下文初始化事件，得到上下文初始化参数，并在应用为客户提供服务之前运行一些代码，要实现该接口，就要实现下面两个方法public void contextInitialized(ServletContextEvent event)public void contextDestroyed(ServletContextEvent event) 建立一个上下文监听者 创建一个监听者类 把编译后的类*.class放入WEB-INF/classes 在web.xml部署描述文件放一个&lt;listener&gt;元素，如下12345&lt;listener&gt; &lt;listener-class&gt; com.example.MyServletContextListener &lt;/listener-class&gt;&lt;/listener&gt; 一个监听器的例子web.xml中先注册该Listener，然后设置好对应的servlet以及context-param，如下12345678910111213141516171819202122232425&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" version="4.0"&gt; &lt;servlet&gt; &lt;servlet-name&gt;ListenerTester&lt;/servlet-name&gt; &lt;servlet-class&gt;com.example.web.ListenerTester&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;ListenerTester&lt;/servlet-name&gt; &lt;url-pattern&gt;/listen.ht&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;context-param&gt; &lt;param-name&gt;breed&lt;/param-name&gt; &lt;param-value&gt;Great Dane&lt;/param-value&gt; &lt;/context-param&gt; &lt;listener&gt; &lt;listener-class&gt;com.example.web.MyServletContextListener&lt;/listener-class&gt; &lt;/listener&gt;&lt;/web-app&gt; 监听器的工作是得到该ServletContext的初始值，然后创建一个Dog对象，把该值作为参数传入对象构造函数，并构造一个ServletContext对象，设置该Dog对象作为新的ServletContext的属性。123456789101112131415161718192021package com.example.web;import com.example.model.Dog;import javax.servlet.ServletContext;import javax.servlet.ServletContextEvent;import javax.servlet.ServletContextListener;public class MyServletContextListener implements ServletContextListener &#123; public void contextInitialized(ServletContextEvent event) &#123; ServletContext sc = event.getServletContext(); String dogBreed = sc.getInitParameter("breed"); Dog d = new Dog(dogBreed); sc.setAttribute("dog", d); &#125; public void contextDestroyed(ServletContextEvent event) &#123; &#125;&#125; Dog对象如下1234567891011121314package com.example.model;public class Dog &#123; private String breed; public Dog(String breed) &#123; this.breed = breed; &#125; public String getBreed() &#123; return breed; &#125;&#125; Servlet通过getServletContext().getAttribute(&quot;dog&quot;)得到ServletContext的属性值来获取该Dog对象，这样就可以通过ServletContext对象来获取String以外的值了。 123456789101112131415161718192021222324252627282930package com.example.web;import com.example.model.Dog;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.io.PrintWriter;@WebServlet(name = "ListenerTester")public class ListenerTester extends HttpServlet &#123; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; &#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; response.setContentType("text/html"); PrintWriter out = response.getWriter(); out.println("test context attributes set by listener&lt;br&gt;"); out.println("&lt;br&gt;"); Dog dog = (Dog) getServletContext().getAttribute("dog"); out.println("Dog's breed is : " + dog.getBreed()); &#125;&#125; 其他监听者 属性API与属性安全 上下文属性无法确保线程安全，要对上下文加锁。 请求属性和请求分派1234request.setAttribute("attrName", attrValue);RequestDispatcher view = request.getRequestDispatcher("*.jsp");view.forward(request, response); 通过从ServletRequest（或ServletContext）得到RequestDispatcher对象，调用forward()把请求转交给JSP处理 注意！如果已经提交了响应，就不能转发请求，否则会报IllegalStateException，os.flush()等方法都是提交响应]]></content>
      <categories>
        <category>Servlet</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
        <tag>ServletConfig</tag>
        <tag>ServletContext</tag>
        <tag>Listener</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript01-语法]]></title>
    <url>%2F2018%2F09%2F01%2FJavaScript01-%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[JavaScript01-语法在HTML中嵌入JavaScript有两种方法，第一种是内嵌在&lt;head&gt;标签的&lt;script&gt;标签之间123456789101112&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;Example&lt;/title&gt; &lt;script&gt; JavaScript goes here... &lt;/script&gt; &lt;body&gt; Mark-up goes here... &lt;/body&gt;&lt;/html&gt; 另一种更好的方法是存在.js文件中，利用&lt;script&gt;标签的src属性指向该文件12345678910&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;Example&lt;/title&gt; &lt;script src="file.js"&gt;&lt;/script&gt; &lt;body&gt; Mark-up goes here... &lt;/body&gt;&lt;/html&gt; Script标签元素详解有如下6个属性 async: 可选，表示立即下载脚本，但不应妨碍页面其他操作，只对外部脚本有效。 charset: 可选，基本不用。 defer: 可选，表示脚本可以延迟到文档完全被解析和显示后再执行。只对外部脚本有效。 src: 可选，表示包含要执行代码的外部文件。 type: 可选，使用脚的脚本语言的内容类型，目前用的比较多的还是 text/javascript Script标签的位置最好的做法就是把&lt;script&gt;标签放在HTML文档的最后，&lt;body&gt;标签的前面12345678910&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;Example&lt;/title&gt; &lt;body&gt; Mark-up goes here... &lt;script src="file.js"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; JavaScript数据类型JS有6种数据类型，可以通过关键词typeof检测。 Undefined类型 只有一个值undefined。 Null类型 只有一个值null，undefined派生于null，typeof null检测null会返回boject。 Boolean类型 只有true与false。 Number类型 NaN(Not a number)是一个特殊的数值，表示一个本来要返回数值的操作数未返回数值的情况。 String类型 与Python类似，用双引号或者单引号都OK。 Object类型 ECMAScript的对象其实就是一组数据和功能的集合，可以通过new操作符创建，后续会讲到。 JavaScript语句JS很多语句都和Java类似，这里就只列举JS独有的语句 for-in语句1234for(var propName in window) &#123; document.write(propName);&#125;// 枚举BOM中window对象的所有属性，顺序不可预测 for-in语句是一种精准的迭代语句，可以用来枚举对象的属性。 label语句与Java类似，在代码中添加标签以便将来使用，多用于for语句等循环语句1234start: for (var i=0; i &lt; count; i++)&#123; alert(i); &#125;// start标签可以在将来由break或continue语句引用 with语句将代码的作用于设置到一个特定的对象中123var qs = location.search.substring(1);var hostName = location.hostname;var url = location.href; 等价于下面代码12345with(location) &#123; var qs = search.substring(1); var hostName = hostname; var url = href;&#125; JavaScript函数123function functionName(arg0, arg1, arg2, ... ,argN) &#123; statements;&#125; 理解参数ECMAScript函数的参数与大多数其他语言函数的参数不同，ECMAScript函数不介意传递进来多少个参数，也不在乎传进来参数是什么类型的。即使你定义的函数只接受两个参数，在调用这个函数的时候传递多少个也没问题，原因是ECMAScript中参数在内部是用一个数组来表示的，函数接受到的始终都是这个数组，实际上可以在函数体内通过arguments对象来访问这个数组，从而获取传递给函数的每一个参数。 ECMAScript所有参数传递都是值传递，不可能通过引用传递参数，对于引用数据类型，其值就是其引用 没有重载对于同一名字的多个函数，该名字只属于最后定义的]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java基础之初窥反射]]></title>
    <url>%2F2018%2F06%2F19%2FJava%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%88%9D%E7%AA%A5%E5%8F%8D%E5%B0%84%2F</url>
    <content type="text"><![CDATA[前言:之前写安卓的时候有遇到过反射,但是当时怎么都不理解,现在正好借此机会初步了解一下反射 什么是反射 Reflection enables Java code to discover information about the fields, methods and constructors of loaded classes, and to use reflected fields, methods, and constructors to operate on their underlying counterparts, within security restrictions.The API accommodates applications that need access to either the public members of a target object (based on its runtime class) or the members declared by a given class. It also allows programs to suppress default reflective access control. 简单来说,反射能够分析类能力,他可以做以下几件事: 在运行时分析类的能力 在运行时查看对象,例如,写一个toString方法供所有类使用 实现通用的数组操作代码 利用Method对象(类比C中的函数指针) 获得对象的Class类反射比较重要的一点是获得对象的类,对象的类是一个Class对象(但不是所有Class对象都是一种类,例如int也是Class对象) 以下是三种获得Class类的方法1234// 第一种:通过对象.getClass()获得Employee e;...Class cl = e.getClass(); 1234567// 第二种:通过Class类的静态方法forName()获得try &#123; String className = "java.util.Random"; Class cl = Class.forName(className);&#125; catch (Execption e) &#123; e.printStackTrace();&#125; 1234// 第三种:通过T.class获得(T是任意Java类型)Class cl1 = Random.class;Class cl2 = int.class;Class cl3 = Double[].class; Class类的一些常用方法getName() Returns the name of the entity (class, interface, array class, primitive type, or void) represented by this Class object, as a String. 123Employee e;...System.out.println(e.getClass().getName()); newInstance() Creates a new instance of the class represented by this Class object. 123Employee e;e.getClass().newInstance();// 调用默认的构造函数,如果要传参,请使用Constructor类的newInstance(Objcet[] args)方法 getMethod() Modifier and Type Method and Description Method getMethod(String name, Class&lt;?&gt;… parameterTypes) &nbsp; Returns a Method object that reflects the specified public member method of the class or interface represented by this Class object. e.g. 获得Employee的raiseSalary方法 Method m1 = Employee.class.getMethod(&quot;raiseSalary&quot;, double.class); getDeclaredFields() Returns an array of Field objects reflecting all the fields declared by the class or interface represented by this Class object. getDeclaredMethods() Returns an array containing Method objects reflecting all the declared methods of the class or interface represented by this Class object, including public, protected, default (package) access, and private methods, but excluding inherited methods. getDeclaredConsstructors() Returns an array of Constructor objects reflecting all the constructors declared by the class represented by this Class object. getDeclaredFields()与getFields()的区别getFields()返回一个包含Field对象的数组,这些对象记录了这个类或其超类的公有域,而getDeclaredFields()的对象记录了这个类的全部域类比Methods与Constructors 反射包中重要类的简单描述在java.lang.reflect包中有三个类Field,Method,和Constructor分别用于描述类的域,方法和构造器 FieldField用于描述类的域,常见的方法有 Modifier and Type Method and Description Object get(Object obj) &nbsp; Returns the value of the field represented by this Field, on the specified object. void set(Object obj, Object value) &nbsp; Sets the field represented by this Field object on the specified object argument to the specified new value. int getModifiers() &nbsp; Returns the Java language modifiers for the field represented by this Field object, as an integer. Class&lt;?&gt; getType() &nbsp; Returns a Class object that identifies the declared type for the field represented by this Field object. String getName() &nbsp; Returns the name of the field represented by this Field object. Method Modifier and Type Method and Description String getName() &nbsp; Returns the name of the method represented by this Method object, as a String. Class&lt;?&gt; getReturnType() &nbsp; Returns a Class object that represents the formal return type of the method represented by this Method object. int getModifiers() &nbsp; Returns the Java language modifiers for the field represented by this Field object, as an integer. Class&lt;?&gt;[] getParameterTypes() &nbsp; Returns an array of Class objects that represent the formal parameter types, in declaration order, of the executable represented by this object. Object invoke(Object obj, Object… args) &nbsp; Invokes the underlying method represented by this Method object, on the specified object with the specified parameters. Constructor Modifier and Type Method and Description String getName() &nbsp; Returns the name of this constructor, as a string. Class&lt;?&gt;[] getParameterTypes() &nbsp; Returns an array of Class objects that represent the formal parameter types, in declaration order, of the executable represented by this object. int getModifiers() &nbsp; Returns the Java language modifiers for the field represented by this Field object, as an integer. 利用反射分析类的能力12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485public class ReflectionTest &#123; public static void main(String[] args) &#123; String name; if (args.length &gt; 0) name = args[0]; else &#123; Scanner in = new Scanner(System.in); System.out.println("Enter class name (e.g. java.util.Date):"); name = in.next(); &#125; try &#123; Class cl = Class.forName(name); Class supercl = cl.getSuperclass(); String modifiers = Modifier.toString(cl.getModifiers()); if (modifiers.length() &gt; 0) System.out.print(modifiers + " "); System.out.print("class " + name); if (supercl != null &amp;&amp; supercl != Object.class) System.out.print(" extends " + supercl.getName()); System.out.print("\n&#123;\n"); printConstructors(cl); System.out.println(); printMethods(cl); System.out.println(); printFields(cl); System.out.println("&#125;"); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; System.exit(0); &#125; public static void printConstructors(Class cl) &#123; Constructor[] constructors = cl.getDeclaredConstructors(); for (Constructor c : constructors) &#123; String name = c.getName(); System.out.print(" "); String modifiers = Modifier.toString(c.getModifiers()); if (modifiers.length() &gt; 0) System.out.print(modifiers + " "); System.out.print(name + "("); Class[] paramTypes = c.getParameterTypes(); // 构造器的参数是Class类型 for (int j = 0; j &lt; paramTypes.length; j++) &#123; if (j &gt; 0) System.out.print(", "); System.out.print(paramTypes[j].getName()); &#125; System.out.println(");"); &#125; &#125; public static void printMethods(Class cl) &#123; Method[] methods = cl.getDeclaredMethods(); for (Method m : methods) &#123; Class retType = m.getReturnType(); // 方法的返回值是Class类型,注意:int等基本数据类型也是Class类型 String name = m.getName(); System.out.print(" "); String modifiers = Modifier.toString(m.getModifiers()); if (modifiers.length() &gt; 0) System.out.print(modifiers + " "); System.out.print(retType.getName() + " " + name + "("); // 这里返回了int, boolean等 Class[] paramTypes = m.getParameterTypes(); for (int j = 0; j &lt; paramTypes.length; j++) &#123; if (j &gt; 0) System.out.print(", "); System.out.print(paramTypes[j].getName()); &#125; System.out.println(");"); &#125; &#125; public static void printFields(Class cl) &#123; Field[] fields = cl.getDeclaredFields(); for (Field f : fields) &#123; Class type = f.getType(); // Returns a Class object that identifies the declared type for the field represented by this Field object. String name = f.getName(); System.out.print(" "); String modifiers = Modifier.toString(f.getModifiers()); if (modifiers.length() &gt; 0) System.out.print(modifiers + " "); System.out.println(type.getName() + " " + name + ";"); &#125; &#125;&#125; 在运行时使用反射分析对象上面讲的是如何查看任意对象的数据域名称和类型,这次进一步查看数据域的实际内容12345Employee harry = new Employee("Harry Hacker", 35000, 10, 1 1989);Class cl = harry.getClass();Field f = cl.getDeclaredField("name");f.setAccessible(true);Object v = f.get(harry) // the value of v is "Harry Hacker" 上面是一个获得对象域的例子,注意反射机制默认受限于Java的访问控制,可以通过以下方法覆盖访问控制 f.setAccessible(true) Field继承自AccessibleObject,可通过其父类方法setAccessible()设置权限 AccessibleObject.setAccessible(fields, true) 调用静态方法对fields设置权限(见下面代码) 下面是一个通用的toString方法12345678910111213141516public class ObjectAnalyzerTest &#123; public static void main(String[] args) &#123; ArrayList&lt;Integer&gt; squares = new ArrayList&lt;&gt;(); String[] ss = &#123;"a", "b", "c"&#125;; for (int i = 1; i &lt;= 5; i++) &#123; squares.add(i * i); &#125; ObjectAnalyzer objectAnalyzer = new ObjectAnalyzer();// System.out.println(objectAnalyzer.toString(ss)); System.out.println(objectAnalyzer.toString(squares));// System.out.println(new ObjectAnalyzer().toString(12345));// System.out.println(new ObjectAnalyzer().toString("test"));// System.out.println(new ObjectAnalyzer().toString(null)); &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546public class ObjectAnalyzer &#123; private ArrayList&lt;Object&gt; visited = new ArrayList&lt;&gt;(); // 循环引用可能导致无限递归 public String toString(Object obj) &#123; if (obj == null) return "null"; if (visited.contains(obj)) return "..."; visited.add(obj); Class cl = obj.getClass(); if (cl == String.class) return (String)obj; if (cl.isArray()) &#123; String r = cl.getComponentType() + "[]&#123;"; // getComponentType() Returns the Class representing the component type of an array. for (int i = 0; i &lt; Array.getLength(obj); i++) &#123; if (i &gt; 0) r += ","; Object val = Array.get(obj, i); if (cl.getComponentType().isPrimitive()) r += val; else r += toString(val); &#125; return r + "&#125;"; &#125; String r = cl.getName(); do &#123; r += "["; Field[] fields = cl.getDeclaredFields(); AccessibleObject.setAccessible(fields, true); for (Field f : fields) &#123; if (!Modifier.isStatic((f.getModifiers()))) &#123; // 静态域舍弃 if (!r.endsWith("[")) r += ","; r += f.getName() + "="; try &#123; Class t = f.getType(); Object val = f.get(obj); if (t.isPrimitive()) r += val; // 如果为原始数据类型则直接添加 else r += toString(val); // 否则递归调用 &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; &#125; r += "]"; cl = cl.getSuperclass(); &#125; while (cl != null); return r; &#125;&#125; 使用反射编写泛型数组代码123456789101112131415161718192021222324252627282930public class CopyOfTest &#123; public static void main(String[] args) &#123; int[] a = &#123; 1, 2, 3 &#125;; a = (int[]) goodCopyOf(a, 10); System.out.println(Arrays.toString(a)); String[] b = &#123; "Tom", "Dick", "Harry" &#125;; b = (String[]) goodCopyOf(b, 10); System.out.println(Arrays.toString(b)); &#125; // int[]无法转换为Object[] public static Object[] badCopyOf(Object[] a, int newLength) &#123; Object[] newArray = new Object[newLength]; System.arraycopy(a, 0, newArray, 0, Math.min(a.length, newLength)); return newArray; &#125; public static Object goodCopyOf(Object a, int newLength) &#123; Class cl = a.getClass(); if (!cl.isArray()) return null; Class componentType = cl.getComponentType(); // Returns the Class representing the component type of an array. int length = Array.getLength(a); Object newArray = Array.newInstance(componentType, newLength); System.arraycopy(a, 0, newArray, 0, Math.min(length, newLength)); return newArray; &#125;&#125; 注意getComponentType()是Class的方法而不是Array的方法Array.newInstance()返回Object对象 调用任意方法类似C语言的函数指针,通过Java的反射机制可以调用任意方法 Object invoke(Object obj, Object... args)第一个参数是隐式参数,其余的对象提供了显示参数,对于静态方法,第一个参数可以被忽略,即设置为null,e.g. ml是一个Method,代表Employee的getName方法,harry是一个Employee对象String n = (String) ml.invoke(harry) // 调用harry的getName()方法method.invoke(a, s); // 调用a的method方法,参数为smethod.invoke(null, s); // 调用静态method方法,参数为s注意invoke返回的是Object 而获得方法可以通过Class cl = harry.getClass()cl.getMethod(String name, Class&lt;?&gt;... parameterTypes) 一个使用invoke的例子123456789101112131415161718192021222324252627282930public class MethodTableTest &#123; public static void main(String[] args) &#123; try &#123; Method square = MethodTableTest.class.getMethod("square", double.class); Method sqrt = Math.class.getMethod("sqrt", double.class); printTable(1, 10, 10, square); printTable(1, 10, 10, sqrt); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; public static double square(double x) &#123; return x * x; &#125; public static void printTable(double from, double to, int n, Method f) &#123; System.out.println(f); double dx = (to - from) / (n - 1); for (double x = from; x &lt;= to; x += dx) &#123; try &#123; double y = (Double) f.invoke(null, x); System.out.printf("%10.4f | %10.4f%n", x, y); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; &#125;&#125; 后言:这次仅仅是跟着课本尝试了一下反射,以后有了相应的基础后会深入理解反射的机制]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Object,所有类的超类]]></title>
    <url>%2F2018%2F06%2F03%2FObject-%E6%89%80%E6%9C%89%E7%B1%BB%E7%9A%84%E8%B6%85%E7%B1%BB%2F</url>
    <content type="text"><![CDATA[Object类是Java中所有类的超类,在Java中每个类都由它扩展而来Object类的方法如下 其中最为关键的3个方法为equals(),hashCode()和toString() equals方法官方文档 在文档中说到,equals用于检测一个对象是否等于另一个对象,该方法必须有以下5个特性: 自反性:对任意非空引用x,&nbsp;&nbsp;&nbsp;x.equals(x)&nbsp;&nbsp;必须返回true 对称性:对任意非空引用x,y,&nbsp;&nbsp;x.equals(y)&nbsp;&nbsp;返回true当且仅当&nbsp;&nbsp;y.equals(x)&nbsp;&nbsp;返回true 传递性:对任意非空引用x,y,z,如果&nbsp;&nbsp;x.equals(y)&nbsp;&nbsp;返回true并且&nbsp;&nbsp;y.equals(x)&nbsp;&nbsp;返回true,则&nbsp;&nbsp;x.equals(z)&nbsp;&nbsp;返回true 一致性:如果x和y引用的对象没有发生变化,反复调用&nbsp;&nbsp;x.equals(y)&nbsp;&nbsp;应该返回同样的结果 对于任意非空引用x,&nbsp;&nbsp;x.equals(y)&nbsp;&nbsp;应该返回false Object类的equals方法而Object类中的默认的equals方法如下123public boolean equals(Object obj) &#123; return (this == obj);&#125; 自定义类的equals方法如果两个对象具有相同的引用,则返回true,否则返回false,这是最经济的符合以上5个特性的equals方法了,但是很多时候这种判断并没有什么意义,更多时候我们要判断对象是否相等,需要检测他们状态的相等性,如果两个对象的状态相等,则认为他们是相等的,比如有一个雇员Employee类,如果两个雇员对象的姓名,薪水和雇佣日期都相等,则认为他们是相等的,那么雇员类的equals方法可以如下(完整的Employee类请见最后)1234567891011121314 public boolean equals(Object otherObject) &#123; if (this == otherObject) return true; // 先判断这两个对象是否具有相同的引用 if (otherObject == null) return false; // 然后判断otherObject是否为null if (getClass() != otherObject.getClass()) return false; // 使用getClass()判断是否为同一类 Employee other = (Employee) otherObject; // 把Object类转换成Employee类 return Objects.equals(name, other.name) // 详细比较他们的域 &amp;&amp; salary == other.salary &amp;&amp; Objects.equals(hireDay, other.hireDay); &#125;&#125; Employee类的equals方法代码解释代码中使用&nbsp;Objects.equals(name, other.name)&nbsp;是为了防备name和hireDay可能为null的情况,下面是Objects类的equals方法,当对象a和b都是null,则返回true,如果其中一个是null则返回false,否则调用a.equals(b)123public static boolean equals(Object a, Object b) &#123; return (a == b) || (a != null &amp;&amp; a.equals(b));&#125; 在是否为同一类的比较中,,除了&nbsp;&nbsp;if (getClass() != otherObject.getClass()) return false;&nbsp;&nbsp;这个判断外,还可以使用&nbsp;&nbsp;if (!(otherObject instanceof Employee)) return false;&nbsp;&nbsp;来判断,但是使用instanceof判断没有解决otherObject是子类的情况(&nbsp;子类引用 instanceof 父类&nbsp;返回true,但反过来则返回false,不符合对称性)所以,使用getClass()与instanceof可以根据下面情况判断: 如果子类能够拥有自己的相等概念,则对称性需求将强制性采用getClass进行检测 如果由超类决定相等的概念(比如Employee与其子类Manager中使用Employee类的成员ID来判断是否相等),那么就可以使用instanceof进行检测 完美的equals方法 显示参数命名为otherObject,稍后强制类型转换为变量other 检测this与ohetObject是否引用同一对象 检测ohterObject是否为null,如果为null返回false 比较this与otherObject是否属于同一类,根据相等概念由父类还是子类决定用getClass()还是instanceof检测 将ohterObject转换为相应的类类型变量 开始对需要比较的域进行比较,对于对象的比较,用Objects.equals(field, other.field) 子类中的equals方法12345public boolean equals(Object otherObject) &#123; if (!super.equals(otherObject)) return false; Manager other = (Manager) otherObject; return bonus == other.bonus; &#125; 先调用super.equals(otherObject)检测父类元素是否相等,然后再比较子类的域 其他对于数组类型的域,使用静态方法Arrays.equals方法判断 hashCode方法散列码hashCode是由对象导出的一个整型值,不同的对象散列码一般不会相同 官方文档根据说明我们可以得知: 只要在Java应用程序执行过程中多次调用同一对象时，hashCode方法就必须始终返回相同的整数，前提是未修改对象的等同比较中使用的信息。 该整数不需要从应用程序的一次执行到同一应用程序的另一次执行保持一致。 如果两个对象由equals方法得到的结果为true，则对这两个对象中的每个对象调用hashCode方法必须产生相同的整数结果。 根据equals方法，如果两个对象不相等，则不要求对两个对象中的每一个调用hashCode方法都必须生成不同的整数结果。 但是，程序员应该意识到，为不相等的对象生成不同的整数结果可能会提高散列表的性能。 Object类中的hashCode方法在源码中,hashCode()不是由Java代码生成的,它返回的值为对象的存储地址,这里就不赘述了 自定义类的hashCode方法如果要重新定义equals方法,则必须重新定义hashCode方法equals方法与什么成员有关,hashCode也必须与该成员有关e.g:如果equals方法与Employee类的salary,hireDay,name相关,则Employee的hashCode方法可以定义如下 123456public int hashCode() &#123; return 7 * Objects.hashCode(name) + 11 * Double.hashCode(salary) + 13 * Objects.hashCode(hireDay);// 如果成员为数组,则使用Arrays.hashCode()&#125; 或者使用Objects.hash(Object… values)123public int hashCode() &#123; return Objects.hash(name, salary, hireDay);&#125; Objects.hashCode(Object o)是null安全的,当参数为null则返回0,否则返回对参数调用Object.hashCode()的结果注意:只有一个参数的时候不要使用Objects.hash(),而是Objects.hashCode(Object o)或者Doubles.hashCode(Double d) Objects.hash(Object… values)源码123public static int hash(Object... values) &#123; return Arrays.hashCode(values);&#125; Arrays.hashCode(Object a[])源码1234567891011public static int hashCode(Object a[]) &#123; if (a == null) return 0; int result = 1; for (Object element : a) result = 31 * result + (element == null ? 0 : element.hashCode()); return result; &#125; toString方法toString()方法返回表示对象值的字符串 官方文档 Object类的toString方法123public String toString() &#123; return getClass().getName() + "@" + Integer.toHexString(hashCode());&#125; 他返回 getClass().getName() + &#39;@&#39; + Integer.toHexString(hashCode()) toString()为什么随处可见只要对象与一个字符串通过操作符”+”连接起来,Java编译就会自动调用toString方法 数组的toString方法数组继承了Object类的toString,仍会像Object类那样输出字符串,大概输出如下[I@1a46e30]这不符合我们的预期,修正方法如下: Arrays.toString()调用静态方法Arrays.toString(),返回对象大概为[2,3,5,7,11,13]如果想要打印多维数组,调用 Arrays.deepToString() 测试类Employee与Manager的源代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354import java.time.LocalDate;import java.util.Objects;public class Employee &#123; private String name; private double salary; private LocalDate hireDay; public Employee(String n, double s, int year, int month, int day) &#123; name = n; salary = s; hireDay = LocalDate.of(year, month, day); &#125; public String getName() &#123; return name; &#125; public double getSalary() &#123; return salary; &#125; public LocalDate getHireDay() &#123; return hireDay; &#125; public void raiseSalary(double byPercent) &#123; double raise = salary * byPercent / 100; salary += raise; &#125; public boolean equals(Object otherObject) &#123; if (this == otherObject) return true; if (otherObject == null) return false; if (getClass() != otherObject.getClass()) return false; Employee other = (Employee) otherObject; return Objects.equals(name, other.name) &amp;&amp; salary == other.salary &amp;&amp; Objects.equals(hireDay, other.hireDay); &#125; public int hashCode() &#123; return 7 * Objects.hashCode(name) + 11 * Double.hashCode(salary) + 13 * Objects.hashCode(hireDay); &#125; /* public int hashCode() &#123; * return Objects.hash(name, salary, hireDay); * &#125; * */ public String toString() &#123; return getClass().getName() + "[name = " + name + ",salary = " + salary + ",hireDay = " + hireDay + "]"; &#125;&#125; 1234567891011121314151617181920212223242526272829303132public class Manager extends Employee &#123; private double bonus; public Manager(String n, double s, int year, int month, int day) &#123; super(n, s, year, month, day); bonus = 0; &#125; public double getSalary() &#123; double baseSalary = super.getSalary(); return baseSalary + bonus; &#125; public void setBonus(double b) &#123; bonus = b; &#125; public boolean equals(Object otherObject) &#123; if (!super.equals(otherObject)) return false; Manager other = (Manager) otherObject; return bonus == other.bonus; &#125; public int hashCode() &#123; return super.hashCode() + 17 * Double.hashCode(bonus); &#125; public String toString() &#123; return super.toString() + "[bonus = " + bonus + "]"; &#125;&#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Object</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java继承之子类访问父类的私有域]]></title>
    <url>%2F2018%2F06%2F01%2FJava%E7%BB%A7%E6%89%BF%E4%B9%8B%E5%AD%90%E7%B1%BB%E8%AE%BF%E9%97%AE%E7%88%B6%E7%B1%BB%E7%9A%84%E7%A7%81%E6%9C%89%E5%9F%9F%2F</url>
    <content type="text"><![CDATA[在类的继承中,子类可以访问父类的公有方法和域,但对于父类的私有成员则不能访问,但很多情况下,子类也应当拥有父类的私有属性,例如一个雇员Employee有名字,薪资,雇佣时间等属性,经理Manager也属于雇员,那么经理也应当有名字,薪资,雇佣时间等,那么问题就来了,子类如何才能使用父类的私有成员?请看下面代码123456789101112131415161718public class Father &#123; private int a; // 默认构造方法,如果没有此方法,子类构造器第一句必须调用super() public Father() &#123; &#125; public Father(int a) &#123; this.a = a; &#125; public int getA() &#123; return a; &#125; public void setA(int a) &#123; this.a = a; &#125;&#125; 1234567891011121314151617public class Son extends Father&#123; public Son() &#123; // 如果子类没有显式调用super(),则自动调用父类默认(没有参数)的构造器,如果父类没有默认构造器,则报错 &#125; public Son(int a) &#123; super(a); // super()必须是子类构造器的第一句 &#125; public static void main(String[] args) &#123; Son son1 = new Son(); son1.setA(123); // 第一种给父类成员赋值的方法,调用setter() Son son2 = new Son(234); // 第二种给父类成员赋值的方法,构造器初始化 System.out.println(son.getA()); // 调用getter()获取父类成员 &#125;&#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>继承</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[二分查找]]></title>
    <url>%2F2018%2F06%2F01%2F%E6%8A%98%E5%8D%8A%E6%9F%A5%E6%89%BE%E7%9A%84%E6%80%9D%E6%83%B3%E4%B8%8E%E4%BD%9C%E7%94%A8%2F</url>
    <content type="text"><![CDATA[折半查找的思想与作用折半查找又称二分查找，是适用于有序表的查找，它的查找时间复杂度是O(logn)，代码如下： 12345678910111213int Binary_Search(SeqList L, ElemType key) &#123; int low = 0, high = L.length - 1, mid; while (low &lt;= high) &#123; mid = (low + high) / 2; if (L.elem[mid] == key) return mid; else if (L.elem[mid] &gt; key) high = mid - 1; else low = mid + 1; &#125; return -1;&#125; 对二分查找的应用，不仅仅是在有序表中找到key那么简单，它还有很多的变通，最让我印象深刻的是leetcode上的Longest Common Prefix，使用二分查找对第0个字符串进行二分，然后判断mid之前的子串是否为共同子串，如果是则high=mid+1，如果不是则low=mid-1，最后返回substring(0,(low+high)/2) 需要注意的是，二分查找查找失败时low和high的值，high为有序表中待查元素的直接前驱，low为待查元素的直接后驱，这个结论用处很多。]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>二分查找</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[让类实现for-each loop:Iterable与Iterator接口]]></title>
    <url>%2F2018%2F06%2F01%2FIterable%E4%B8%8EIterator%2F</url>
    <content type="text"><![CDATA[Interface Iterable&lt;T&gt;根据Java API上写: Implementing this interface allows an object to be the target of the “for-each loop” statement. 也就是说,实现该接口可以让类实现for循环阅读Iterable源码,该接口有3个方法 Modifier,Type and Method Description public interface Iterable&lt;T&gt; &nbsp; default void forEach(Consumer action) Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception. Iterator&lt;T&gt; iterator() Returns an iterator over elements of type T. default Spliterator spliterator() Creates a Spliterator over the elements described by this Iterable. 可以知道,实现该接口,我们只需要实现Iterator iterator()由API: Iterator iterator()Returns an iterator over elements of type T.Returns:an Iterator. 我们只需要返回一个Iterator对象就可以了 Interface IteratorJava API中说到: An iterator over a collection. Iterator takes the place of Enumeration in the Java Collections Framework. Iterators differ from enumerations in two ways:Iterators allow the caller to remove elements from the underlying collection during the iteration with well-defined semantics.Method names have been improved. 其实就是一个迭代器啦… Modifier,Type and Method Description public interface Iterator&lt;E&gt; &nbsp; default void forEachRemaining(Consumer action) Performs the given action for each remaining element until all elements have been processed or the action throws an exception. boolean hasNext() Returns true if the iteration has more elements. E next() Returns the next element in the iteration. default void remove() Removes from the underlying collection the last element returned by this iterator (optional operation). 可以知道,实现该接口,只要实现next()与hasNext(),当有remove()需求时,也要实现该方法. 下面是具体实现1.类名中加上implements Iterable1public class ClassName&lt;E&gt; implements Iterable&lt;E&gt; 2.实现Iterator iterator(),返回Iterator对象1public Iterator&lt;E&gt; iterator() &#123; return new MyIterator&lt;E&gt;(); &#125; 3.实现内部类MyIterator1234567891011121314private class MyIterator&lt;E&gt; implements Iterator&lt;E&gt; &#123; public boolean hasNext() &#123; //return true if the iteration has more elements &#125; public E next() &#123; if (!hasNext()) throw NoSuchElementException(); // returns the next element in the iteration &#125; public void remove() &#123; throw new UnsupportedOperationException(); &#125;&#125; 对Iterator的next()与remove()方法的解释Java的迭代器认为是位于两个元素之间的,当调用next()的时候,迭代器就会越过下一个元素,并返回越过的元素的引用 即如果要用remove()连续删除2个相邻的元素1234Iterator&lt;String&gt; it = instance.iterator(); // 假设instance是实现了Iterable接口的类的实例,泛型指定为Stringit.next();it.remove();it.remove(); // error! 上面的是不行的,因为Java的迭代器并不像C++根据数组索引建模的,在Java迭代器中,查找操作与位置变更是紧密相连的,查找一个元素的唯一方法是调用next(),而执行查找操作的同时,迭代器的位置随之向前移动12345Iterator&lt;String&gt; it = instance.iterator(); // 假设instance是实现了Iterable接口的类的实例,泛型指定为Stringit.next();it.remove();it.next();it.remove(); // OK 调用next()的过程见下图]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Iterable</tag>
        <tag>Iterator</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaDoc与Jar]]></title>
    <url>%2F2018%2F06%2F01%2FJavaDoc%E4%B8%8EJar%2F</url>
    <content type="text"><![CDATA[使用JavaDoc生成文档1javadoc -d 目录名 -encoding UTF-8 -charset UTF-8 xxx.java java内格式： /** 文档内容 / @author : 对类的说明，表明开发该类模块的作者 @version : 对类的说明，表明该模块版本 @see : 对类，属性，方法的说明，参考转向，也就是相关主题 @param : 对方法的说明，对方法中某参数的说明 @return : 对方法的说明，对方法返回值的说明 @exception : 对方法的说明，对方法可能抛出的异常进行说明 下为《算法》中StdRandom.java源码的注释与文档效果 使用jar打包（1）编译 javac A.java （2）打包 jar cvfm A.jar A.man A.class ——c表示创建(create)，v表示显示详情(verbose)，f表示指定文件名，m表示清单文件（3）运行 java -jar A.jar 其中A.man是清单文件（manifest），内容如下：·Manifest-Version：1.0Class-Path：.Main-Class：A]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JavaDoc</tag>
        <tag>Jar</tag>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
